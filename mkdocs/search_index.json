{
    "docs": [
        {
            "location": "/",
            "text": "The following API documentation requires AgenaTrader in version 1.9.0.563\n\n\nWelcome to the official AgenaIndicator repository!\n\n\nWant to learn more about the AgenaTrader indicators? We've got the resources to help you get started.\n\n\n\n\nData\n\n\nBars (Candles)\n\n\nData Series\n\n\nOpen\n\n\nHigh\n\n\nLow\n\n\nClose\n\n\nMedian\n\n\nTypical\n\n\nWeighted\n\n\nWeighteds\n\n\nTime\n\n\nTimes\n\n\nVolume\n\n\nVolumes\n\n\nTimeFrame\n\n\nTimeFrames\n\n\nIndicators & Oscillators\n\n\nAccumulation/Distribution (ADL)\n\n\nAdaptive Price Zone (APZ)\n\n\nAroon\n\n\nAroon Oscillator\n\n\nAverage Directional Index (ADX)\n\n\nAverage Directional Movement Rating (ADXR)\n\n\nAverage True Range (ATR)\n\n\nBalance of Power (BOP)\n\n\nBBBreakOutSpeed\n\n\nBollinger Bands\n\n\nBollinger Percent B (%b)\n\n\nBollinger Band Width (BBWidth)\n\n\nBollinger MTF (MultiTimeFrame)\n\n\nBuySellPressure\n\n\nBuySellVolume\n\n\nCandleStickPattern\n\n\nChaikinMoneyFlow (CMF)\n\n\nChaikin Oscillator\n\n\nChaikinVolatility (CVL)\n\n\nChande Momentum Oscillator (CMO)\n\n\nClimactic Distance\n\n\nCommodity Channel Index (CCI)\n\n\nCOTAggregatedIndexPositionDisaggregated\n\n\nCOTCommercialIndex\n\n\nCOTOpenInterestDisaggregated\n\n\nCOTOpenInterestLegacy\n\n\nCOTReportDisaggregated\n\n\nCOTReportLegacy\n\n\nCOTStockDummy\n\n\nDarvas Boxes\n\n\nDirectional Movement (DM)\n\n\nDonchian Channel\n\n\nDirectional Movement Index (DMI)\n\n\nDouble Stochastics (DSS)\n\n\nDynamic Momentum Index (DMIndex)\n\n\nEase of Movement (EOM)\n\n\nFisher Transform\n\n\nForecast Oscillator (FOSC)\n\n\nHighestHighIndex()\n\n\nHighestHighPrice()\n\n\nIchimokuCloud\n\n\nInsideBarsMT\n\n\nKeltner Channel\n\n\nKeyReversalUp\n\n\nKeyReversalDown\n\n\nKeyReversalUpAtSMA\n\n\nKeyReversalDownAtSMA\n\n\nKeyReversalUpAtEMA\n\n\nKeyReversalDownAtEMA\n\n\nKlingerVolumeOscillator\n\n\nLinear Regression\n\n\nLinRegIntercept\n\n\nLinRegSlope\n\n\nLowestLowIndex()\n\n\nLowestLowPrice()\n\n\nMACD\n\n\nMAEnvelopes\n\n\nMarketPhases\n\n\nMarketValue\n\n\nMomentum (MOM)\n\n\nMoney Flow Index (MFI)\n\n\nMoving Averages\n\n\nDEMA - Double Exponential Moving Average\n\n\nEMA - Exponential Moving Average\n\n\nEMA MTF (MultiTimeFrame)\n\n\nHMA - Hull Moving Average\n\n\nKAMA - Kaufman's Adaptive Moving Average\n\n\nMAMA - Mesa Adaptive Moving Average\n\n\nSMA - Simple Moving Average\n\n\nSMA MTF (MultiTimeFrame)\n\n\nSMMA - Smoothed Moving Average\n\n\nTEMA - Triple Exponential Moving Average\n\n\nTMA - Triangular Moving Average\n\n\nTRIX - Triple Exponential Moving Average\n\n\nT3 - Triple Exponential Moving Average\n\n\nVMA - Variable Moving Average\n\n\nVWMA - Volume Weighted Moving Average\n\n\nWMA - Weighted Moving Average\n\n\nZLEMA - Zero Lag Exponential Moving Average\n\n\nnBarsUp\n\n\nnBarsDown\n\n\nOnBalanceVolume (OBV)\n\n\nOutsideBars\n\n\nP123\n\n\nParabolic SAR\n\n\nPercentage Price Oscillator (PPO)\n\n\nPercentEnvelopes\n\n\nPivot Points\n\n\nPolarized Fractal Efficiency (PFE)\n\n\nPrice Oscillator\n\n\nRainbow\n\n\nRange\n\n\nRange Indicator (RIND)\n\n\nRate of Change (ROC)\n\n\nRelative Currency Strength (RCS)\n\n\nRelative Performance\n\n\nRelative Spread Strength (RSS)\n\n\nRelative Strength Index (RSI)\n\n\nRelative Strength Levy (RSL)\n\n\nRelative Volatility Index (RVI)\n\n\nReversalBars\n\n\nR-Squared\n\n\nStandardDeviation(StdDev)\n\n\nStandard Error (StdError)\n\n\nStochastics\n\n\nStochastics Fast\n\n\nStochastics RSI (StochRSI)\n\n\nSummation (SUM)\n\n\nSuperTrend\n\n\nSupportResistanceAreas\n\n\nSwing\n\n\nTime-Series-Forecast (TSF)\n\n\nTools\n\n\nConstant Lines\n\n\nCurrentDayOHL\n\n\nDaily Performance\n\n\n DailyQuoteMoves\n\n\nDayLines\n\n\nDayLinesAdv\n\n\nGetDayBar\n\n\nInfo\n\n\nMaximum (MAX)\n\n\nMinimum (MIN)\n\n\nMTFBoxes\n\n\nPriceLine\n\n\nPriorDayOHLC\n\n\nPriorDayOHLCext\n\n\nSessionBreakLines\n\n\nShowBidAsk\n\n\nTickCounter\n\n\nTrue Strength Index (TSI)\n\n\nUltimate Oscillator\n\n\nVolume (VOL)\n\n\nVolume Moving Average (VOLMA)\n\n\nVolume Oscillator\n\n\nVolume Profile\n\n\nVolume Rate of Change (VROC)\n\n\nVolumeArea\n\n\nVolumeGraph\n\n\nVolumeKeltnerChannels\n\n\nVolumeRiseFall\n\n\nVolumeSentimentLong\n\n\nVolumeSentimentShort\n\n\nVolumeSessionPro\n\n\nVolumeTickSpeed\n\n\nVolumeUDR\n\n\nVolumeUpDown\n\n\nVolume Zones\n\n\nVolumeZoneOscillator\n\n\nWilliams %R\n\n\nWyckoffWave\n\n\nZigZag",
            "title": "Lets start"
        },
        {
            "location": "/#welcome-to-the-official-agenaindicator-repository",
            "text": "Want to learn more about the AgenaTrader indicators? We've got the resources to help you get started.   Data  Bars (Candles)  Data Series  Open  High  Low  Close  Median  Typical  Weighted  Weighteds  Time  Times  Volume  Volumes  TimeFrame  TimeFrames  Indicators & Oscillators  Accumulation/Distribution (ADL)  Adaptive Price Zone (APZ)  Aroon  Aroon Oscillator  Average Directional Index (ADX)  Average Directional Movement Rating (ADXR)  Average True Range (ATR)  Balance of Power (BOP)  BBBreakOutSpeed  Bollinger Bands  Bollinger Percent B (%b)  Bollinger Band Width (BBWidth)  Bollinger MTF (MultiTimeFrame)  BuySellPressure  BuySellVolume  CandleStickPattern  ChaikinMoneyFlow (CMF)  Chaikin Oscillator  ChaikinVolatility (CVL)  Chande Momentum Oscillator (CMO)  Climactic Distance  Commodity Channel Index (CCI)  COTAggregatedIndexPositionDisaggregated  COTCommercialIndex  COTOpenInterestDisaggregated  COTOpenInterestLegacy  COTReportDisaggregated  COTReportLegacy  COTStockDummy  Darvas Boxes  Directional Movement (DM)  Donchian Channel  Directional Movement Index (DMI)  Double Stochastics (DSS)  Dynamic Momentum Index (DMIndex)  Ease of Movement (EOM)  Fisher Transform  Forecast Oscillator (FOSC)  HighestHighIndex()  HighestHighPrice()  IchimokuCloud  InsideBarsMT  Keltner Channel  KeyReversalUp  KeyReversalDown  KeyReversalUpAtSMA  KeyReversalDownAtSMA  KeyReversalUpAtEMA  KeyReversalDownAtEMA  KlingerVolumeOscillator  Linear Regression  LinRegIntercept  LinRegSlope  LowestLowIndex()  LowestLowPrice()  MACD  MAEnvelopes  MarketPhases  MarketValue  Momentum (MOM)  Money Flow Index (MFI)  Moving Averages  DEMA - Double Exponential Moving Average  EMA - Exponential Moving Average  EMA MTF (MultiTimeFrame)  HMA - Hull Moving Average  KAMA - Kaufman's Adaptive Moving Average  MAMA - Mesa Adaptive Moving Average  SMA - Simple Moving Average  SMA MTF (MultiTimeFrame)  SMMA - Smoothed Moving Average  TEMA - Triple Exponential Moving Average  TMA - Triangular Moving Average  TRIX - Triple Exponential Moving Average  T3 - Triple Exponential Moving Average  VMA - Variable Moving Average  VWMA - Volume Weighted Moving Average  WMA - Weighted Moving Average  ZLEMA - Zero Lag Exponential Moving Average  nBarsUp  nBarsDown  OnBalanceVolume (OBV)  OutsideBars  P123  Parabolic SAR  Percentage Price Oscillator (PPO)  PercentEnvelopes  Pivot Points  Polarized Fractal Efficiency (PFE)  Price Oscillator  Rainbow  Range  Range Indicator (RIND)  Rate of Change (ROC)  Relative Currency Strength (RCS)  Relative Performance  Relative Spread Strength (RSS)  Relative Strength Index (RSI)  Relative Strength Levy (RSL)  Relative Volatility Index (RVI)  ReversalBars  R-Squared  StandardDeviation(StdDev)  Standard Error (StdError)  Stochastics  Stochastics Fast  Stochastics RSI (StochRSI)  Summation (SUM)  SuperTrend  SupportResistanceAreas  Swing  Time-Series-Forecast (TSF)  Tools  Constant Lines  CurrentDayOHL  Daily Performance   DailyQuoteMoves  DayLines  DayLinesAdv  GetDayBar  Info  Maximum (MAX)  Minimum (MIN)  MTFBoxes  PriceLine  PriorDayOHLC  PriorDayOHLCext  SessionBreakLines  ShowBidAsk  TickCounter  True Strength Index (TSI)  Ultimate Oscillator  Volume (VOL)  Volume Moving Average (VOLMA)  Volume Oscillator  Volume Profile  Volume Rate of Change (VROC)  VolumeArea  VolumeGraph  VolumeKeltnerChannels  VolumeRiseFall  VolumeSentimentLong  VolumeSentimentShort  VolumeSessionPro  VolumeTickSpeed  VolumeUDR  VolumeUpDown  Volume Zones  VolumeZoneOscillator  Williams %R  WyckoffWave  ZigZag",
            "title": "Welcome to the official AgenaIndicator repository!"
        },
        {
            "location": "/data/",
            "text": "Data\n\n\nIn this context, data is understood as information loaded from outside sources as well as data sets originating from internally generated AgenaScripts.\n\n\nBars (Candles)\n\n\nModus Operandi\n\n\nA classical indicator will calculate one or multiple values using the available data series.\n\n\nData series in this sense can consist of closing prices, lows, hourly charts or 10-minute periods etc.\nEach period (candle) will be assigned to a specific indicator(s).\n\n\nIn the following examples and illustrations, we will assume an indicator value generated by something like a simple moving average.\n\n\nTo calculate a moving average, AgenaTrader needs a data series; for this we will use the closing prices. All closing prices for the bars (candles) within a chart will be saved in a list and numerically ordered.\n\n\nThe current closing price of the current bar will be displayed on the right edge of the chart and will be assigned the number 0. The bar to the left of it is assigned the number 1 and so on. The oldest displayed bar will have the number 500 (as an example).\n\n\nIf a new bar is added during the current trading session, then this bar will be assigned the number 0, and the previous bar \u2013 which up to that point was bar number 0 \u2013 will now be reassigned as bar 1, and the oldest bar to the very left will have the number 501.\n\n\nWithin a script (self-created program), the \u201cClose\" array is the list of all closing prices. The last closing price is thus Close[0] and the preceding closing price (bar to the left of the last bar) is Close[1] and so on, with the oldest candle having the value of Close[501]. The number within the square brackets here clearly denotes the index of the array. The general term used within AgenaTrader is \u201cbarsAgo\".\n\n\nIn addition, each bar will not only have a close value, but also a \nHigh\n, \nLow\n, \nOpen\n, \nMedian\n, \nTypical\n, \nWeighted\n, \nTime\n and \nVolume\n. On a daily period timeframe, the high of the candle that occurred 10 periods ago would be High[10]; the low of the last day would be Low[1].\n\n\nImportant note:\n\nThe examples mentioned concern calculations that are performed at the end of a period. The values for the currently running and unfinished candles are not taken into consideration.\n\n\nIf you want the values of the currently running and unfinished candles, you will need to set CalculateOnBarClose = false. As with the previous example, the currently running bar will receive the number 0 and so on.\nClose[0] will provide you with the most recent price transmitted by the data provider. All values of the bars High[0]\u2026Low[0]\u2026 etc. are subject to change until the bar has been finalized and a new bar has begun. The only value that will definitely not change is Open[0].\n\n\nData Series\n\n\nDescription\n\n\nAgenaTrader differentiates between data series used for your self-programmed definitions that will hold values of various types, and on the other hand, data series which are the standard integrated series containing market data and price data for the individual data.\nThe concept of data series is followed up consistently and continuously. All price data for individual bars are organized within the data series.\n\n\nThe following data series are available:\n\n\nOpen\n\n\nHigh\n\n\nLow\n\n\nClose\n\n\nMedian\n\n\nTypical\n\n\nWeighted\n \nWeighteds\n\n\nTime\n \nTimes\n\n\nTimeFrame\n \nTimeFrames\n\n\nVolume\n \nVolumes\n\n\nOpen\n\n\nDescription\n\n\nOpen is the data series in which the historical opening prices are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nOpen\nOpen[int barsAgo]\n\n\n\n\nMore information\n\n\nThe outputted value depends on the property \nCalculateOnBarClose\n.\n\n\nExample\n\n\n// Opening price of the current period\nPrint(Time[0] + \" \" + Open[0]);\n\n// Opening price of the bar that occurred 5 periods ago\nPrint(Time[5] + \" \" + Open[5]);\n\n// Current value of the SMA 14 above the opening price (rounded)\nPrint(\"SMA(14) Calculated using the opening prices: \" + Instrument.Round2TickSize(SMA(Open, 14)[0]));\n\n\n\n\nHigh\n\n\nDescription\n\n\nHigh is the data series in which the historical highs are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nusage\n\n\nHigh\nHigh[int barsAgo]\n\n\n\n\nMore information\n\n\nThe outputted value depends on the property \nCalculateOnBarClose\n.\n\n\nExample\n\n\n// High price of the current period\nPrint(Time[0] + \" \" + High[0]);\n\n// High price of the bar 5 periods ago\nPrint(Time[5] + \" \" + High[5]);\n\n// Current value for the SMA 14 using the high prices (rounded)\nPrint(\"SMA(14) calculated using the high values: \" + Instrument.Round2TickSize(SMA(High, 14)[0]));\n\n\n\n\nLow\n\n\nDescription\n\n\nLow is the data series in which all historical lows are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nLow\nLow[int barsAgo]\n\n\n\n\nMore information\n\n\nThe outputted value depends on the property \nCalculateOnBarClose\n.\n\n\nExample\n\n\n// Low prices of the current period\nPrint(Time[0] + \" \" + Low[0]);\n\n// Low prices of the bar 5 periods ago\nPrint(Time[5] + \" \" + Low[5]);\n\n// Current value for the SMA 14 calculated using the low prices\nPrint(\"SMA(14) calculated using the low prices: \" + Instrument.Round2TickSize(SMA(Low, 14)[0]));\n\n\n\n\nClose\n\n\nDescription\n\n\nClose is the data series in which all historical closing prices are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nClose\nClose[int barsAgo]\n\n\n\n\nMore information\n\n\nThe outputted value depends on the property \nCalculateOnBarClose\n.\n\n\nIndicators are generally calculated using the closing prices. The selection of the inseries can generally be omitted (see example below).\n\n\nExample\n\n\n// Closing prices for the current period\nPrint(Time[0] + \" \" + Close[0]);\n\n// Closing prices for the bar 5 periods ago\nPrint(Time[5] + \" \" + Close[5]);\n\n// Current value for the SMA 14 using the closing prices\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(Close, 14)[0]));\n\n// Close can be omitted since it is used by default\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(14)[0]));\n\n\n\n\nMedian\n\n\nDescription\n\n\nMedian is the data series in which the historical median values are saved.\nThe median price is calculated as (high + low) / 2.\n\n\nSee \nTypical\n and \nWeighted\n.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nMedian\nMedian[int barsAgo]\n\n\n\n\nMore information\n\n\nThe outputted value depends on the property \nCalculateOnBarClose\n.\n\n\nFurther information on median, typical and weighted:\n\nhttp://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html\n\n\nExample\n\n\n// Median price for the current period\nPrint(Time[0] + \" \" + Median[0]);\n\n// Median price for the bar 5 periods ago\nPrint(Time[5] + \" \" + Median[5]);\n\n// Current value for the SMA 14 calculated using the median prices\nPrint(\"SMA(14) calculated using the median prices: \" + Instrument.Round2TickSize(SMA(Median, 14)\\[0\\]));\n\n\n\n\nTypical\n\n\nDescription\n\n\nTypical is the data series in which the historical typical values are saved.\n\n\nThe typical price of a bar is calculated as (high + low + close) / 3.\n\n\nSee \nMedian\n and \nWeighted\n.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nTypical\nTypical[int barsAgo]\n\n\n\n\nMore information\n\n\nThe outputted value depends on the property \nCalculateOnBarClose\n.\n\n\nFurther information regarding median, typical and weighted:\n\nhttp://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html\n\n\nExample\n\n\n// Typical price of the current period\nPrint(Time[0] + \" \" + Typical[0]);\n\n// Typical price for the bar 5 periods ago\nPrint(Time[5] + \" \" + Typical[5]);\n\n// Current value for the SMA 14 using the typical price\nPrint(\"SMA(14)calculated using the typical prices: \" + Instrument.Round2TickSize(SMA(Typical, 14)[0]));\n\n\n\n\nWeighted\n\n\nDescription\n\n\nWeighted is the data series in which all historical weighted values are saved.\n\n\nThe weighted price of a bar is calculated as (high + low + 2*close) / 4 and is weighted on the closing price. See \nMedian\n & \nTypical\n.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nWeighted\nWeighted[int barsAgo]\n\n\n\n\nMore information\n\n\nThe outputted value depends on the property \nCalculateOnBarClose\n.\n\n\nFurther information on median, typical and weighted:\n\nhttp://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html\n\n\nExample\n\n\n// Weighted price for the current period\nPrint(Time[0] + \" \" + Weighted[0]);\n\n// Weighted price of the bar 5 periods ago\nPrint(Time[5] + \" \" + Weighted[5]);\n\n// Current value for the SMA(14) using the weighted price\nPrint(\"SMA(14) calculated using the weighted price: \" + Instrument.Round2TickSize(SMA(Weighted, 14)[0]));\n\n\n\n\nWeighteds\n\n\nDescription\n\n\nWeighteds is an array of \nDataSeries\n[1] that contains all \nWeighted\n data series.\n\n\nThe array is only of value for indicators and strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nWeighteds\n[0] the weighted data series of the chart timeframe\n\nWeighteds\n[1] the weighted data series of all bars in a daily timeframe\n\nWeighteds\n[2] the weighted data series of all bars in a weekly timeframe\n\n\nWeighteds\n[0][0] is equivalent to \nWeighteds\n[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nWeighteds[int barSeriesIndex]\nWeighteds[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnBarClose\n.\n\n\nExample\n\n\nSee example under \nMultibars\n.\n\n\nTime\n\n\nDescription\n\n\nTime is a \nDataSeries\n of the type \nDateTimeSeries\n, in which the timestamps of the individual bars are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nTime\nTime[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnBarClose\n.\n\n\nExample\n\n\n// Timestamp of the current period\nPrint(Time[0]);\n// Timestamp of the bar from 5 periods ago\nPrint(Time[5]);\n\n\n\n\nTimes\n\n\nDescription\n\n\nTimes is an array of \nDataSeries\n that contains all \nTime\n data series.\n\n\nThis array is only of value to indicators and strategies that make use of multiple timeframes.\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTimes\n[0] the time data series of the chart timeframe\n\nTimes\n[1] the time data series of all bars in a daily timeframe\n\nTimes\n[2] the time data series of all bars in a weekly timeframe\n\n\nTimes\n[0][0] is equivalent to \nTimes\n[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nTimes[int barSeriesIndex]\nTimes[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnBarClose\n.\n\n\nExample\n\n\nSee example \nMultibars\n.\n\n\nVolume\n\n\nDescription\n\n\nVolume is a \nDataSeries\n of the type \nDataSeries\n, in which the historical volume information is saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nVolume\nVolume[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnBarClose\n.\n\n\nThe value returned by the \nVOL()\n indicator is identical with the volume described here;\nfor example, \nVol()\n[3] will have the same value as \nVolume\n[3].\n\n\nExample\n\n\n// Volume for the current period\nPrint(Time[0] + \" \" + Volume[0]);\n// Volume of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Volume[5]);\n// Current value for the SMA 14 calculated using the volume\nPrint(\"SMA(14) calculated using the volume: \" + Instrument.Round2TickSize(SMA(Volume, 14)[0]));\n\n\n\n\nVolumes\n\n\nDescription\n\n\nVolumes is an array of \nDataSeries\n that contains all \nVolume\n data series.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nVolumes[0] the volume data series of the chart timeframe\nVolumes[1] the volume data series of all bars in the daily timeframe\nVolumes[2] the volume data series of all bars in the weekly timeframe\n\n\nVolumes[0][0] is equivalent to Volumes[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\n\n\nbarSeriesIndex Index value of the various timeframes\n\n\nUsage\n\n\nVolumes[int barSeriesIndex]\nVolumes[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnBarClose\n.\n\n\nExample\n\n\nSee example \nMultibars\n.\n\n\nTimeFrame\n\n\nDescription\n\n\nTimeFrame is a timeframe object.\n\n\nUsage\n\n\nTimeFrame\n\n\n\n\nTimeFrames\n\n\nDescription\n\n\nTimeFrames is an array of timeframe objects that contains a timeframe object for each individual bar object.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTimeFrames [0]; //Timeframe of the primary data series (chart timeframe)\nTimeFrames [1];\nPrint(TimeFrames[1]); // returns \"1 Day\"\nTimeFrames [2];\nPrint(TimeFrames[2]); // returns \"1 Week\"\n\n\n\n\nTimeFrames [0] is equivalent to \nTimeFrame\n.\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nTimeFrames [int barSeriesIndex]",
            "title": "Data"
        },
        {
            "location": "/data/#data",
            "text": "In this context, data is understood as information loaded from outside sources as well as data sets originating from internally generated AgenaScripts.",
            "title": "Data"
        },
        {
            "location": "/data/#bars-candles",
            "text": "Modus Operandi  A classical indicator will calculate one or multiple values using the available data series.  Data series in this sense can consist of closing prices, lows, hourly charts or 10-minute periods etc.\nEach period (candle) will be assigned to a specific indicator(s).  In the following examples and illustrations, we will assume an indicator value generated by something like a simple moving average.  To calculate a moving average, AgenaTrader needs a data series; for this we will use the closing prices. All closing prices for the bars (candles) within a chart will be saved in a list and numerically ordered.  The current closing price of the current bar will be displayed on the right edge of the chart and will be assigned the number 0. The bar to the left of it is assigned the number 1 and so on. The oldest displayed bar will have the number 500 (as an example).  If a new bar is added during the current trading session, then this bar will be assigned the number 0, and the previous bar \u2013 which up to that point was bar number 0 \u2013 will now be reassigned as bar 1, and the oldest bar to the very left will have the number 501.  Within a script (self-created program), the \u201cClose\" array is the list of all closing prices. The last closing price is thus Close[0] and the preceding closing price (bar to the left of the last bar) is Close[1] and so on, with the oldest candle having the value of Close[501]. The number within the square brackets here clearly denotes the index of the array. The general term used within AgenaTrader is \u201cbarsAgo\".  In addition, each bar will not only have a close value, but also a  High ,  Low ,  Open ,  Median ,  Typical ,  Weighted ,  Time  and  Volume . On a daily period timeframe, the high of the candle that occurred 10 periods ago would be High[10]; the low of the last day would be Low[1].  Important note: \nThe examples mentioned concern calculations that are performed at the end of a period. The values for the currently running and unfinished candles are not taken into consideration.  If you want the values of the currently running and unfinished candles, you will need to set CalculateOnBarClose = false. As with the previous example, the currently running bar will receive the number 0 and so on.\nClose[0] will provide you with the most recent price transmitted by the data provider. All values of the bars High[0]\u2026Low[0]\u2026 etc. are subject to change until the bar has been finalized and a new bar has begun. The only value that will definitely not change is Open[0].",
            "title": "Bars (Candles)"
        },
        {
            "location": "/data/#data-series",
            "text": "Description  AgenaTrader differentiates between data series used for your self-programmed definitions that will hold values of various types, and on the other hand, data series which are the standard integrated series containing market data and price data for the individual data.\nThe concept of data series is followed up consistently and continuously. All price data for individual bars are organized within the data series.  The following data series are available:  Open  High  Low  Close  Median  Typical  Weighted   Weighteds  Time   Times  TimeFrame   TimeFrames  Volume   Volumes",
            "title": "Data Series"
        },
        {
            "location": "/data/#open",
            "text": "Description  Open is the data series in which the historical opening prices are saved.  Parameter  barsAgo Index value (see  Bars )  Usage  Open\nOpen[int barsAgo]  More information  The outputted value depends on the property  CalculateOnBarClose .  Example  // Opening price of the current period\nPrint(Time[0] + \" \" + Open[0]);\n\n// Opening price of the bar that occurred 5 periods ago\nPrint(Time[5] + \" \" + Open[5]);\n\n// Current value of the SMA 14 above the opening price (rounded)\nPrint(\"SMA(14) Calculated using the opening prices: \" + Instrument.Round2TickSize(SMA(Open, 14)[0]));",
            "title": "Open"
        },
        {
            "location": "/data/#high",
            "text": "Description  High is the data series in which the historical highs are saved.  Parameter  barsAgo Index value (see  Bars )  usage  High\nHigh[int barsAgo]  More information  The outputted value depends on the property  CalculateOnBarClose .  Example  // High price of the current period\nPrint(Time[0] + \" \" + High[0]);\n\n// High price of the bar 5 periods ago\nPrint(Time[5] + \" \" + High[5]);\n\n// Current value for the SMA 14 using the high prices (rounded)\nPrint(\"SMA(14) calculated using the high values: \" + Instrument.Round2TickSize(SMA(High, 14)[0]));",
            "title": "High"
        },
        {
            "location": "/data/#low",
            "text": "Description  Low is the data series in which all historical lows are saved.  Parameter  barsAgo Index value (see  Bars )  Usage  Low\nLow[int barsAgo]  More information  The outputted value depends on the property  CalculateOnBarClose .  Example  // Low prices of the current period\nPrint(Time[0] + \" \" + Low[0]);\n\n// Low prices of the bar 5 periods ago\nPrint(Time[5] + \" \" + Low[5]);\n\n// Current value for the SMA 14 calculated using the low prices\nPrint(\"SMA(14) calculated using the low prices: \" + Instrument.Round2TickSize(SMA(Low, 14)[0]));",
            "title": "Low"
        },
        {
            "location": "/data/#close",
            "text": "Description  Close is the data series in which all historical closing prices are saved.  Parameter  barsAgo Index value (see  Bars )  Usage  Close\nClose[int barsAgo]  More information  The outputted value depends on the property  CalculateOnBarClose .  Indicators are generally calculated using the closing prices. The selection of the inseries can generally be omitted (see example below).  Example  // Closing prices for the current period\nPrint(Time[0] + \" \" + Close[0]);\n\n// Closing prices for the bar 5 periods ago\nPrint(Time[5] + \" \" + Close[5]);\n\n// Current value for the SMA 14 using the closing prices\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(Close, 14)[0]));\n\n// Close can be omitted since it is used by default\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(14)[0]));",
            "title": "Close"
        },
        {
            "location": "/data/#median",
            "text": "Description  Median is the data series in which the historical median values are saved.\nThe median price is calculated as (high + low) / 2.  See  Typical  and  Weighted .  Parameter  barsAgo Index value (see  Bars )  Usage  Median\nMedian[int barsAgo]  More information  The outputted value depends on the property  CalculateOnBarClose .  Further information on median, typical and weighted: http://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html  Example  // Median price for the current period\nPrint(Time[0] + \" \" + Median[0]);\n\n// Median price for the bar 5 periods ago\nPrint(Time[5] + \" \" + Median[5]);\n\n// Current value for the SMA 14 calculated using the median prices\nPrint(\"SMA(14) calculated using the median prices: \" + Instrument.Round2TickSize(SMA(Median, 14)\\[0\\]));",
            "title": "Median"
        },
        {
            "location": "/data/#typical",
            "text": "Description  Typical is the data series in which the historical typical values are saved.  The typical price of a bar is calculated as (high + low + close) / 3.  See  Median  and  Weighted .  Parameter  barsAgo Index value (see  Bars )  Usage  Typical\nTypical[int barsAgo]  More information  The outputted value depends on the property  CalculateOnBarClose .  Further information regarding median, typical and weighted: http://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html  Example  // Typical price of the current period\nPrint(Time[0] + \" \" + Typical[0]);\n\n// Typical price for the bar 5 periods ago\nPrint(Time[5] + \" \" + Typical[5]);\n\n// Current value for the SMA 14 using the typical price\nPrint(\"SMA(14)calculated using the typical prices: \" + Instrument.Round2TickSize(SMA(Typical, 14)[0]));",
            "title": "Typical"
        },
        {
            "location": "/data/#weighted",
            "text": "Description  Weighted is the data series in which all historical weighted values are saved.  The weighted price of a bar is calculated as (high + low + 2*close) / 4 and is weighted on the closing price. See  Median  &  Typical .  Parameter  barsAgo Index value (see  Bars )  Usage  Weighted\nWeighted[int barsAgo]  More information  The outputted value depends on the property  CalculateOnBarClose .  Further information on median, typical and weighted: http://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html  Example  // Weighted price for the current period\nPrint(Time[0] + \" \" + Weighted[0]);\n\n// Weighted price of the bar 5 periods ago\nPrint(Time[5] + \" \" + Weighted[5]);\n\n// Current value for the SMA(14) using the weighted price\nPrint(\"SMA(14) calculated using the weighted price: \" + Instrument.Round2TickSize(SMA(Weighted, 14)[0]));",
            "title": "Weighted"
        },
        {
            "location": "/data/#weighteds",
            "text": "Description  Weighteds is an array of  DataSeries [1] that contains all  Weighted  data series.  The array is only of value for indicators and strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Weighteds [0] the weighted data series of the chart timeframe Weighteds [1] the weighted data series of all bars in a daily timeframe Weighteds [2] the weighted data series of all bars in a weekly timeframe  Weighteds [0][0] is equivalent to  Weighteds [0].  See  MultiBars .  Parameter  barsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes  Usage  Weighteds[int barSeriesIndex]\nWeighteds[int barSeriesIndex][int barsAgo]  More Information  The returned value is dependent upon the property  CalculateOnBarClose .  Example  See example under  Multibars .",
            "title": "Weighteds"
        },
        {
            "location": "/data/#time",
            "text": "Description  Time is a  DataSeries  of the type  DateTimeSeries , in which the timestamps of the individual bars are saved.  Parameter  barsAgo Index value (see  Bars )  Usage  Time\nTime[int barsAgo]  More Information  The returned value is dependent upon the property  CalculateOnBarClose .  Example  // Timestamp of the current period\nPrint(Time[0]);\n// Timestamp of the bar from 5 periods ago\nPrint(Time[5]);",
            "title": "Time"
        },
        {
            "location": "/data/#times",
            "text": "Description  Times is an array of  DataSeries  that contains all  Time  data series.  This array is only of value to indicators and strategies that make use of multiple timeframes.\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Times [0] the time data series of the chart timeframe Times [1] the time data series of all bars in a daily timeframe Times [2] the time data series of all bars in a weekly timeframe  Times [0][0] is equivalent to  Times [0].  See  MultiBars .  Parameter  barsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes  Usage  Times[int barSeriesIndex]\nTimes[int barSeriesIndex][int barsAgo]  More Information  The returned value is dependent upon the property  CalculateOnBarClose .  Example  See example  Multibars .",
            "title": "Times"
        },
        {
            "location": "/data/#volume",
            "text": "Description  Volume is a  DataSeries  of the type  DataSeries , in which the historical volume information is saved.  Parameter  barsAgo Index value (see  Bars )  Usage  Volume\nVolume[int barsAgo]  More Information  The returned value is dependent upon the property  CalculateOnBarClose .  The value returned by the  VOL()  indicator is identical with the volume described here;\nfor example,  Vol() [3] will have the same value as  Volume [3].  Example  // Volume for the current period\nPrint(Time[0] + \" \" + Volume[0]);\n// Volume of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Volume[5]);\n// Current value for the SMA 14 calculated using the volume\nPrint(\"SMA(14) calculated using the volume: \" + Instrument.Round2TickSize(SMA(Volume, 14)[0]));",
            "title": "Volume"
        },
        {
            "location": "/data/#volumes",
            "text": "Description  Volumes is an array of  DataSeries  that contains all  Volume  data series.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Volumes[0] the volume data series of the chart timeframe\nVolumes[1] the volume data series of all bars in the daily timeframe\nVolumes[2] the volume data series of all bars in the weekly timeframe  Volumes[0][0] is equivalent to Volumes[0].  See  MultiBars .  Parameter  barsAgo Index value of the individual bars within a data series  barSeriesIndex Index value of the various timeframes  Usage  Volumes[int barSeriesIndex]\nVolumes[int barSeriesIndex][int barsAgo]  More Information  The returned value is dependent upon the property  CalculateOnBarClose .  Example  See example  Multibars .",
            "title": "Volumes"
        },
        {
            "location": "/data/#timeframe",
            "text": "Description  TimeFrame is a timeframe object.  Usage  TimeFrame",
            "title": "TimeFrame"
        },
        {
            "location": "/data/#timeframes",
            "text": "Description  TimeFrames is an array of timeframe objects that contains a timeframe object for each individual bar object.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  TimeFrames [0]; //Timeframe of the primary data series (chart timeframe)\nTimeFrames [1];\nPrint(TimeFrames[1]); // returns \"1 Day\"\nTimeFrames [2];\nPrint(TimeFrames[2]); // returns \"1 Week\"  TimeFrames [0] is equivalent to  TimeFrame .  See  MultiBars .  Parameter  barSeriesIndex Index value for the various timeframes  Usage  TimeFrames [int barSeriesIndex]",
            "title": "TimeFrames"
        },
        {
            "location": "/indicators_oscillators/",
            "text": "Indicators & Oscillators\n\n\nTrade like the professionals!\n\n\nAgenaTrader provides you with a variety of powerful indicators that will assist you with your individual market analysis.\n\n\nIndicators can be used in\n-   Charts\n-   Condition Escort\n-   AgenaScript\n\n\nFor each indicator you will find a brief description of its interpretation, operation and functionality, a graphical representation on a chart and further technical details for its usage with AgenaScript.\n\n\n\n\nAccumulation/Distribution (ADL)\n\n\nDescription\n\n\nThe Accumulation Distribution LevelLine (ADL) indicator was developed by Marc Chaikin. The ADL is a volume indicator that represents the money flow. The ADL is an improvement of the On-Balance Volume Indicator created by Joe Granville, which was actually one of the very first volume indicators.\n\n\nInterpretation\n\n\nThere are two interpretations of the ADL:\n\n\nConfirmation of a trend or\n\n\n\n\nThe depiction of \ndivergence\n\n\n\n\nIf the ADL is rising in an uptrend, then money is flowing in the direction of the rising prices, thus the uptrend is confirmed. If the ADL is falling in a downward trend, money is being taken out of the stock, thus confirming the downtrend.\n\n\nFurther information\n\n\nvtadwiki.vtad.de\n\n\nUsage\n\n\nADL()\nADL(IDataSeries inSeries)\nADL()[int barsAgo]\nADL(IDataSeries inSeries)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using the method with an index (e.g. ADL()[int barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Testing the direction of the ADL\nif (IsSerieRising(ADL())\nPrint(\"The ADL indicator is rising.\");\n\n\n\n\nAdaptive Price Zone (APZ)\n\n\nDescription\n\n\nThis is a technical indicator developed by Lee Leibfarth in 2006. The Adaptive Price Zone is a volatility-based indicator shown as a set of bands laid over a price chart. The APZ, which is particularly useful in non-trending, choppy markets, was developed with the aim of helping traders to find potential turning points in the markets. The APZ is based on a short-term, double-smoothed EMA that reacts rapidly to price changes with reduced lag. It works in the following way: the bands create a channel that envelopes the average price and tracks price changes. If the price crosses over the upper band of the zone, this creates an opportunity for the trader to trade a reversal. For the lower band, the reverse is true.\n\n\nInterpretation\n\n\nThe bigger the price movement, the greater the distance between the upper and lower band will be. The smaller the price movement, the smaller the distance between the bands. More widely spaced bands will indicate increased instability and volatility, whereas closely tuned bands will display reduced volatility. If the price action breaks through the upper or lower band then the APZ will tend to return to its statistical average. This will lead to trading opportunities where the market may try to compensate for imbalances. If the price overshoots the bands for example, as mentioned in the description, then this will present you with a trading opportunity in the opposite direction.\n\n\nFurther information\n\n\nhttp://www.investopedia.com/articles/trading/10/adaptive-price-zone-indicator-explained.asp\n\n\nUsage\n\n\nAPZ(double barPct, int period)\nAPZ(IDataSeries inSeries, double barPct, int period)\nUpper Band\nAPZ(double barPct, int period).Upper[int barsAgo]\nAPZ(IDataSeries inSeries, double barPct, int period).Upper[int barsAgo]\nLower Band\nAPZ(double barPct, int period).Lower[int barsAgo]\nAPZ(IDataSeries inSeries, double barPct, int period).Lower[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using the method with an index (e.g. \nAPZ\n(2, 20)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\nbarPct Standard deviation\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the current values for the upper and lower band of a 20-period APZ\nPrint(\"Value for the upper APZ band : \" + APZ(2, 20).Upper[0]);\nPrint(\"Value for the lower APZ band: \" + APZ(2, 20).Lower[0]);\n\n\n\n\nAroon\n\n\nDescription\n\n\nAroon, an indicator system that determines whether or not a stock is trending and how strong this trend is, was developed by Tushar Chande in 1995. Its name is derived from the Sanskrit \u201cdawn\u2019s early light\u201d. Chande used this name to signify the indicators\u2019 purpose of revealing the start of a new trend. These indicators measure the number of periods since the last time the price recorded an x-day high or low. There are two distinct indicators: the Aroon-Up and Aroon-Down, whereby a 50-day Aroon-Up measures the number of days since a 50-day high, and a 50-day Aroon-Down measures the days since a 50-day low. This makes the Aroon indicators significantly different from the usual momentum oscillators, which concentrate on price in relation to time. What makes Aroon indicators unique is that they focus on time in relation to price. Aroon indicators can be used to detect emerging trends, identify consolidations, anticipate reversals and define correction periods.\n\n\nInterpretation\n\n\nThe Aroon indicators fluctuate above/below a centerline (50) and are bound between 0 and 100. These three levels are important for interpretation. At its most basic, the bulls have the edge when Aroon-Up is above 50 and Aroon-Down is below 50. This indicates a greater propensity for new x-day highs than lows. The converse is true for a downtrend. The bears have the edge when Aroon-Up is below 50 and Aroon-Down is above 50.\n\n\nA surge to 100 indicates that a trend may be emerging. This can be confirmed with a decline in the other Aroon indicator. For example, a move to 100 in Aroon-Up combined with a decline below 30 in Aroon-Down shows upside strength. Consistently high readings mean prices are regularly hitting new highs or new lows for the specified period. Prices are moving consistently higher when Aroon-Up remains in the 70-100 range for an extended period. Conversely, consistently low readings indicate that prices are seldom hitting new highs or lows. Prices are NOT moving lower when Aroon-Down remains in the 0-30 range for an extended period. This does not mean prices are moving higher though. For that we need to check Aroon-Up.\n\n\nFurther information\n\n\nhttp://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:aroon\n\n\nUsage\n\n\nAroon(int period)\nAroon(IDataSeries inSeries, int period)\n//For the upper value\nAroon(int period).Up[int barsAgo]\nAroon(IDataSeries inSeries, int period).Up[int barsAgo]\n//For the lower value\nAroon(int period).Down[int barsAgo]\nAroon(IDataSeries inSeries, int period).Down[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nAroon\n(20)[\nint\n barsAgo] ) the value of the indicator will be displayed for the last referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars taken into consideration when calculating the values\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current up or down values for the 20 period Aroon\nPrint(\"Current value for Aroon Up is : \" + Aroon(20).Up[0]);\nPrint(\"Current value for Aroon Down is: \" + Aroon(20).Down[0]);\n\n\n\n\nAroon Oscillator\n\n\nDescription\n\n\nThis oscillator is calculated by subtracting the Aroon-Down from the Aroon-Up. Usually, these two indicators are plotted next to each other for easy comparison, but traders can also view the difference between the two indicators using the Aroon oscillator, which can fluctuate between -100 and +100, with zero as the middle line. When the oscillator is positive, this indicates a bullish trend bias, whilst when the oscillator is negative, this shows a bearish trend bias. Chartists also have the option to extend the bull-bear threshold to spot stronger signals.\n\n\nInterpretation\n\n\nThe Aroon Oscillator is ideally used as a trend filter and trend strength indicator. It is used analogously to the ADX Indicator.\n\n\nUsage\n\n\nAroonOscillator(int period)\nAroonOscillator(IDataSeries inSeries, int period)\nAroonOscillator(int period)[int barsAgo]\nAroonOscillator(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index such as (\nAroonOcsillator\n(20)[\nint\n barsAgo] ), the value of the indicator will be outputted for the bar that was referenced.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars taken into consideration for the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the current value for a 20 period Aroon Oscillator\nPrint(\"Value for the oscillator is: \" + AroonOscillator(20)[0]);\n\n\n\n\nAverage Directional Index (ADX)\n\n\nDescription\n\n\nThe ADX is part of a group of directional movement indicators that make up a trading system developed by Welles Wilder: the Average Directional Index, Minus Directional Indicator (-DI) and Plus Directional Indicator (+DI). Wilder designed ADX with daily prices and commodities in mind; however, these indicators can also be applied to stocks. The Average Directional Index measures the trend strength without taking trend direction into account, while the -DI and +DI complement the ADX by defining the trend direction. When used together, traders can find out both the direction and the strength of the trend.\n\n\nWilder talks about the Directional Movement indicators in his 1978 book, New Concepts in Technical Trading Systems, which also features details of Average True Range (ATR), the Parabolic SAR system and the RSI. Although he developed them before the computer age, Wilder\u2019s indicators are extremely detailed in their calculation and are still equally effective today.\n\n\nInterpretation\n\n\nThe Average Directional Index (ADX) is used to measure the strength or weakness of a trend, not the actual direction. Directional movement is defined by +DI and -DI. In general, the bulls have the edge when +DI is greater than -DI, while the bears have the edge when -DI is greater. Crosses of these directional indicators can be combined with ADX for a complete trading system.\n\n\nIt should be kept in mind that Wilder was a commodity and currency trader. The examples in his books are based on these instruments, not stocks. This does not mean his indicators cannot be used with stocks. Some stocks have price characteristics similar to commodities, which tend to be more volatile with short and strong trends. Stocks with low volatility may not generate signals based on Wilder's parameters. Chartists will likely need to adjust the indicator settings or the signal parameters according to the characteristics of the security.\n\n\nFurther information\n\n\nhttp://de.wikipedia.org/wiki/Average_Directional_Movement_Index\n\n\nUsage\n\n\nADX(int period)\nADX(IDataSeries inSeries, int period)\nADX(int period)[int barsAgo]\nADX(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nADX\n(20)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current value of a 20 period ADX\nPrint(\"Value of the ADX: \" + ADX(20)[0]);\n\n\n\n\nAverage Directional Movement Rating (ADXR)\n\n\nDescription\n\n\nThe ADXR is the ADX indicator plus the ADX from n days ago divided by 2. Written as an equation, it looks like this: (current ADX + ADX n days ago) / 2.\n\n\nInterpretation\n\n\nThe oscillator moves along a guiding line that typically has a value of 20. When the ADXR rises above 20, a trend exists. If the ADXR is below 20, no trend exists and the market is moving sideways.\nWelles Wilder recommends buying into the market at a value of 25 and higher, and holding the position as long as the value remains above 20.\n\n\nUsage\n\n\nADXR(int interval, int period)\nADXR(IDataSeries inSeries, int interval, int period)\nADXR(int interval, int period)[int barsAgo]\nADXR(IDataSeries inSeries, int interval, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nADXR\n(10, 14)[\nint\n barsAgo]), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\ninterval Interval between the first ADX value and the current ADX value\n\n\nperiod Number of bars included in the calculation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current value of the ADXR\nPrint(\"Value of the ADXR: \" + ADXR(10, 14)[0]);\n\n\n\n\nAverage True Range (ATR)\n\n\nDescription & Interpretation\n\n\nThe Average True Range (ATR), which was developed by J. Welles Wilder, is an indicator that measures volatility. As is true for most of his indicators, Wilder designed the ATR with commodities and daily prices in mind. Commodities are often more volatile than stocks, and frequently experience gaps and limit moves, which happen when a commodity opens up or down its maximum allowed move for the session. A volatility formula that was based on the high-low range only would be unable to capture volatility from gap or limit moves. Wilder, therefore, developed the Average True Range to capture this \"missing\" volatility. Keep in mind that ATR does not provide an indication of price direction, but merely volatility.\n\n\nThe ATR is featured in Wilder\u2019s 1978 book, New Concepts in Technical Trading Systems, which also goes into detail about the Parabolic SAR, RSI and the Directional Movement Concept (ADX). Despite having been developed before the computer age, Wilder's indicators are equally functional today and remain extremely popular.\n\n\nThe starting point for Wilder was a concept called \nTrue Range (TR)\n, which is defined as the greatest of the following:\n-   Method 1: current high minus the current low\n-   Method 2: current high minus the previous close (absolute value)\n-   Method 3: current Low minus the previous close (absolute value)\n\n\nAbsolute values are used for ensuring positive numbers, since Wilder was interested in measuring the distance between two points, not the direction. If the current period's high is above the prior period's high and the low is below the prior period's low, then the current period's high-low range will be used as the True Range. This is an outside day that would use method 1 to calculate the TR, and is quite straightforward. Methods 2 and 3 are used whenever there is a gap or inside day. A gap occurs when the previous close is greater than the current high (indicating a potential gap down or limit move) or the previous close is lower than the current low (indicating a potential gap up or limit move). The image below shows examples of when methods 2 and 3 are appropriate.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Average_True_Range\n\n\nUsage\n\n\nATR(int period)\nATR(IDataSeries inSeries, int period)\nATR(int period)[int barsAgo]\nATR(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nATR\n(14)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current value of a 14 period ATR\nPrint(\"The current ATR value is: \" + ATR(14)[0]);\n\n\n\n\nBBBreakOutSpeed\n\n\nDescription\n\n\nShows the change in the width of the Bollinger Bands in comparison to the width of the Bollinger Bands of the previous bar.\nNegative (red) means that the Bollinger Bands are drawing together. (Larger than SignalSize -> Short, characterized by a more intense red)\nPositive (green) means that the Bollinger Bands are diverging. (Larger than SignalSize -> Long, characterized by a more intense green)\n\n\nUsage\n\n\nBBBreakOutSpeed(double bandsDeviation, int bandsPeriod, int signalsize) \nBBBreakOutSpeed(IDataSeries inSeries, double bandsDeviation, int bandsPeriod, int signalsize) \nBBBreakOutSpeed(double bandsDeviation, int bandsPeriod, int signalsize)[int barsAgo]\nBBBreakOutSpeed(IDataSeries inSeries, double bandsDeviation, int bandsPeriod, int signalsize)[int barsAgo] \n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nBBBreakOutSpeed\n(5)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nbandsDeviation Standard deviation for the Bollinger Bands\n\n\nbandsPeriod Periods for the Bollinger Bands\n\n\nsignalsize The minimum height of the bar in order for it to produce a signal (long, short)\n\n\nVisualization\n\n\n\n\nExample\n\n\n//If the width between the Bollinger Bands (standard deviation 2, period 20) has significantly (value > 15) increased in comparison to the previous period, a long position is opened.\n\nif(BBBreakOutSpeed(2, 20, 15).BandWidthEntrySignalBuffer[0] != 0)\n{\n    OpenLong(\"BBBreakOutSpeedLong\");\n}\n//If the width between the Bollinger Bands (standard deviation 2, period 20) has significantly (value > 15) decreased in comparison to the previous period, a short position is opened.\n\nif(BBBreakOutSpeed(2, 20, 15).BandWidthExitSignalBuffer[0] != 0)\n{\n    OpenShort(\"BBBreakOutSpeedShort\");\n}\n\n\n\n\nBalance of Power (BOP)\n\n\nDescription\n\n\nThe developer of the Balance of Power indicator was Igor Livshin, who came up with the BOP in August 2001. The BOP indicator represents the strength of the buyers (bulls) vs. the sellers (bears), and oscillates between -100 and 100. The calculation of the BOP = (close - open) / (high - low).\n\n\nInterpretation\n\n\nA directional change of the BOP can be interpreted as a warning signal and will generally be followed by a price change.\n\n\nUsage\n\n\nBOP(int smooth)\nBOP(IDataSeries inSeries, int smooth)\nBOP(int smooth)[int barsAgo]\nBOP(IDataSeries inSeries, int smooth)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nBOP\n(5)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nsmooth Settings for the smoothing\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the value for the BOP with a smoothing of 5 periods\nPrint(\"The Balance of Power value is: \" + BOP(5));\n\n\n\n\nBollinger Bands\n\n\nDescription & Interpretation\n\n\nBollinger Bands\u00ae, which were developed by John Bollinger, are volatility bands that are placed above and below a moving average. The volatility is based on the standard deviation, which fluctuates as volatility increases and decreases. An increase in volatility causes the bands to automatically widen, and a decrease in volatility causes them to automatically narrow. The Bollinger Bands\u2019 dynamic nature means that they can also be used on different securities with the standard settings. When it comes to signals, Bollinger Bands can be used to identify M-Tops and W-Bottoms, or for determining a trend\u2019s strength.\n\n\nBollinger Bands are made up of a middle band with two outer bands.\n The middle band is a simple moving average that is normally set to 20 periods. The reason a simple moving average is used is that the standard deviation formula also uses a simple moving average. The look-back period for the standard deviation is the same as for the simple moving average. The outer bands are generally set 2 standard deviations above and below the middle band, but settings can be adjusted to suit the characteristics of specific securities or trading styles. Bollinger recommends making small, incremental adjustments to the standard deviation multiplier. Changing the number of periods for the moving average also has an effect on the number of periods used to calculate the standard deviation, which is why only small adjustments are required for the standard deviation multiplier. An increase in the moving average period would also automatically increase the number of periods used for calculating the standard deviation, as well as warranting an increase in the standard deviation multiplier. With a 20-day SMA and 20-day Standard Deviation, the standard deviation multiplier is set at 2. Bollinger recommends increasing the standard deviation multiplier to 2.1 for a 50-period SMA and decreasing the standard deviation multiplier to 1.9 for a 10-period SMA.\n\nBollinger Bands reflect direction with the 20-period SMA and volatility with the upper/lower bands\n. This means that they can be used to determine whether prices are relatively high or low. Bollinger maintains that the bands should contain 88-89% of price action, rendering a move outside the bands very significant. Technically, prices are relatively high when above the upper band and relatively low when below the lower band. However, relatively high should not be seen as bearish or as a sell signal. Likewise, relatively low should not be regarded as bullish or as a buy signal, since prices are high or low for a reason. As with other indicators, Bollinger Bands are not designed to be used as a stand-alone tool. Traders should combine Bollinger Bands with basic trend analysis and other indicators to confirm a trend.\n\n\nThe calculation is performed in the following manner:\n\n\nUpper band = middle band + 2 standard deviations\nMiddle band = average of 20 periods\nLower band = middle period \u2013 2 standard deviations\n\n\nMore information can be found here: \nBollingerMTF\n, \nBollinger Percent %B\n, \nBollinger Bands Width\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Bollinger_B%C3%A4nder\n\n\nBook \"Technische Indikatoren - simplified\" by Oliver Paesler (German only)\n\n\nUsage\n\n\nBollinger(double numStdDev, int period)\nBollinger(IDataSeries inSeries, double numStdDev, int period)\n//For the upper band\nBollinger(double numStdDev, int period).Upper[int barsAgo]\nBollinger(IDataSeries inSeries, double numStdDev, int period).Upper[int barsAgo]\n//For the lower band\nBollinger(double numStdDev, int period).Lower[int barsAgo]\nBollinger(IDataSeries inSeries, double numStdDev, int period).Lower[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nBollinger\n(2, 20)[\nint\n barsAgo] ), the value of the indicator will be displayed for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nnumStdDev Standard deviation\n\n\nperiod Number of bars included in the calculation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the value for the upper Bollinger Band\nPrint(\"Value of the upper band: \" + Bollinger(2, 20).Upper[0]);\n//Middle band\nPrint(\"Value of the middle band: \" + Bollinger(2, 20)[0]);\n//Lower band\nPrint(\"Value of the lower band: \" + Bollinger(2, 20).Lower[0]);\n\n\n\n\nBollinger Percent B (%b)\n\n\nDescription\n\n\nBollinger %b is an important indicator that is derived from John Bollinger's original Bollinger Bands indicator. %b represents the location of the most recent close price in relation to the Bollinger Bands as well as to what degree it is above or below any of the bands. The Bollinger Percent B equation can be constructed in the following way: Percent B = ((Close - Bollinger Lower Band) / (Bollinger Upper Band - Bollinger Lower Band)) * 100. If the close price is the same as the upper Bollinger Band, %b will be 100 (percent). If the close price is the same as the lower Bollinger Band, %b will be 0.0 (percent). A %b value of 50 indicates that the close price is equal to the middle Bollinger Band. What is more, readings above 100 and below 0 show that the close price is outside of the Bollinger Bands by a corresponding percentage of the Bollinger Bandwidth. A %b value of 125 means that the close price is above the upper Bollinger Band by 25% of the Bandwidth, while a %b value of -25 means that the close price is below the lower Bollinger Band by 25% of the Bandwidth.\n\n\nSee \nBollinger Bands\n, \nBBWidth\n\n\nAn additional application: normalizing indicators\n\n\nBollinger bands, and therefore the %b indicator, can be applied not only to the prices of stocks, futures etc., but also to time series with fundamental data, volume data and other indicators. This is particularly interesting when you need to know whether a value is relatively high or low \u2013 in this case, the %b indicator offers you a different perspective. If you wish to find out whether the volume of a stock is exceedingly high or low, you can simply apply it to the volume data. John Bollinger regards the application of the %b onto other indicators as one of the most important aspects of the indicator. If you wish to normalize an indicator with %b, it is important to first calculate the indicator (e.g. the RSI) with the help of the %b for the calculation of the indicator instead of the price data. The application of the %b essentially works in the same way as the application of Bollinger bands onto the indicator itself. The intersection points between the bands and the indicators will therefore be 1 and 0. In principle, the relative position of the original indicator is displayed in relation to its upper and lower bands. This means that the boundaries of the original indicator will be removed. John Bollinger himself wrote: \u201cYou\u2019re defining a high or low point on a relative basis, this may allow you to gain a deeper insight and understanding not provided by traditional indicators and guidelines.\u201d John Bollinger provides several parameters for the %b calculation, such as 40-day periods and a factor of 2.0 for a 9-day RSI, and a 50-day period with a factor of 2.1 for the calculation of %b.\n\n\n(Sources: Oliver Paesler: \"Technische Indikatoren - simplified\" and John Bollinger: \"Bollinger B\u00e4nder\")\n\n\n(Source: \ntradesignalonline\n)\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Bollinger_B%C3%A4nder\n\n\nBook \"Technische Indikatoren - simplified\" by Oliver Paesler (German only)\n\n\nUsage\n\n\nBollingerPercentB(int period, double numStdDev)\nBollingerPercentB(IDataSeries inSeries, int period, double numStdDev)\nBollingerPercentB(int period, double numStdDev) [int barsAgo]\nBollingerPercentB(IDataSeries inSeries, int period, double numStdDev)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nBollingerPercentB\n(20, 2)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculation\n\n\nnumStdDev Standard deviation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of Bollinger %B\n\n\nPrint\n(\"Value of the Bollinger Percent B is: \" + \nBollingerPercentB\n(20, 2)[0]);\n\n\nBollinger Band Width (BBWidth)\n\n\nDescription\n\n\nThis indicator is derived from Bollinger Bands. John Bollinger refers to Bollinger Band Width as one of two indicators that one can derive from Bollinger Bands; the other indicator is %B.\nThe Band Width measures the percentage difference between the upper and the lower band. It decreases as Bollinger Bands narrow, and increases as they widen. Since Bollinger Bands are based on the standard deviation, falling Band Width reflects decreasing volatility and rising Band Width reflects the opposite.\n\n\nInterpretation\n\n\nJohn Bollinger uses the Band Width to recognize rising and falling trends. Most trends have their origins within sideway market movements that generally have a low volatility. If a breakout is accompanied by a sudden rise in the Band Width, this means that there is definite support for the move.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Bollinger_B%C3%A4nder\n\n\nBook \"Technische Indikatoren - simplified\" by Oliver Paesler (German only)\n\n\nUsage\n\n\nBBWidth(double numStdDev, int period)\nBBWidth(IDataSeries inSeries, double numStdDev, int period)\nBBWidth(double numStdDev, int period)[int barsAgo]\nBBWidth(IDataSeries inSeries, double numStdDev, int period)[int barsAgo]\n\n//For the value of the upper Band Width\nBBWidth(double numStdDev, int period).BandWidth\nBBWidth(IDataSeries inSeries, double numStdDev, int period).BandWidth\nBBWidth(double numStdDev, int period).BandWidth[int barsAgo]\nBBWidth(IDataSeries inSeries, double numStdDev, int period).BandWidth[int barsAgo]\n\n//For the value of the trigger line (threshold)\nBBWidth(double numStdDev, int period).Threshold\nBBWidth(IDataSeries inSeries, double numStdDev, int period).Threshold\nBBWidth(double numStdDev, int period).Threshold[int barsAgo]\nBBWidth(IDataSeries inSeries, double numStdDev, int period).Threshold[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using the method with an index (e.g. \nBBWidth\n(2, 20)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculation\n\n\nnumStdDev Standard deviation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the values of Bollinger Band Width\nPrint(\"The value of the Bollinger Band Width is: \" + BBWidth(2, 20).BandWidth[0]);\n//Output for the values for the signal line\nPrint(\"The value of the signal line is: \" + BBWidth(2, 20).Threshold[0]);\n\n\n\n\nBollinger MTF (MultiTimeFrame)\n\n\nDescription\n\n\nThe Bollinger MTF is the multi-timeframe version of the Bollinger Bands, and its main use is in intraday trading. Multi-timeframe means that the indicator is calculated in a separate timeframe than that which is displayed in the chart. With the standard Bollinger band indicator, displaying an hourly Bollinger band in a 5-minute timeframe would not be possible \u2013 this is the point at which the MTF becomes useful. BollingerMTF can only be used for display in the chart and cannot be applied/implemented in AgenaScript.\n\n\nVisualization\n\n\nThe image shows a 5-minute chart with a 60-minute Bollinger band\n\n\n\n\nBuySellPressure\n\n\nDescription\n\n\nThe BuySellPressure indicator displays the buy or sell pressure for the current bar. Furthermore, these trades are classified as \"buy\" or \u201csell\u201d. For this classification, a \"buy\" is assumed any time the transaction has occurred at or above the ask. Inside trades are not taken into account.\n\n\nCaution:\nThis is a real-time indicator. It will only work on and with real-time data and cannot therefore be used for historical information.\n\n\nWhen the properties dialog for the indicator is open and changes are made, then the indicator must be reloaded. Doing so will delete all previously accumulated data.\n\n\nSee \nBuySellVolume\n.\n\n\nUsage\n\n\nBuySellPressure()\nBuySellPressure(IDataSeries inSeries)\n\n//For the values of buy pressure\nBuySellPressure().BuyPressure[int barsAgo]\nBuySellPressure(IDataSeries inSeries).BuyPressure[int barsAgo]\n\n//For the values of sell Pressure\nBuySellPressure().SellPressure[int barsAgo]\nBuySellPressure(IDataSeries inSeries).SellPressure[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nBuySellPressure\n().BuyPressure[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nCaution:\n\n\nIf BuySellPressure is used with EoD data, the value 50 will always be outputted.\n\n-   BuySellPressure().SellPressure[0] = 50\n-   BuySellPressure().SellPressure[0] = 50\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\nprotected override void OnInit()\n{\n  BuySellPressure().CalculateOnClosedBar = false;\n}\n\nprotected override void OnCalculate()\n{\n  if (Close[0] > DonchianChannel(20).Upper[5])\n  {\n    if (IsHistoricalMode || BuySellPressure().BuyPressure[0] > 70)\n    OpenLong();\n  }\n}\n\n\n\n\nBuySellVolume\n\n\nDescription\n\n\nThis indicator shows us the current buy or sell pressure based on the volume. For this, trades are classified as \"buy\" or \"sell\", whereby for the classification, a \"buy\" is assumed any time the transaction is executed at or above the ask. A transaction at or below the bid is considered a \"sell\".\n\n\nCaution: This is a real-time indicator and will not work with historical data.\n\n\nSimilar conditions as with the \nBuySellPressure\n apply.\n\n\nUsage\n\n\nBuySellVolume BuySellVolume()\nBuySellVolume BuySellVolume(IDataSeries inSeries)\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nBuySellVolume\n().BuyVolume[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the BuySellVolume\nPrint(\"The BuySellVolume is: \" + BuySellVolume()[0]);\n\n\n\n\nCandleStickPattern\n\n\nDescription\n\n\nThe CandleStickPattern indicator looks for specific candlestick formations.\n\n\nFurther information\n\n\nExplanations of the formations and their interpretations can be found here: \nhttp://en.wikipedia.org/wiki/Candlestick_pattern\n\n\nUsage\n\n\nCandleStickPattern(ChartPattern pattern, int trendStrength)\nCandleStickPattern(IDataSeries inSeries, ChartPattern pattern, int trendStrength)\nCandleStickPattern(ChartPattern pattern, int trendStrength)[int barsAgo]\nCandleStickPattern(IDataSeries inSeries, ChartPattern pattern, int trendStrength)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\n0 \u2013 Pattern not existent\n1 \u2013 Pattern existent\n\n\nWhen using this method with an index (e.g. \nCandleStickPattern\n(...)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInSeries\n\n\nInput data series for the indicator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npattern\n\n\nPossible values are:\n\n\n\n\n\n\nChartPattern.BearishBeltHold\n\n\n\n\n\n\n\n\nChartPattern.BearishEngulfing\n\n\n\n\n\n\n\n\nChartPattern.BearishHarami\n\n\n\n\n\n\n\n\nChartPattern.BearishHaramiCross\n\n\n\n\n\n\n\n\nChartPattern.BullishBeltHold\n\n\n\n\n\n\n\n\nChartPattern.BullishEngulfing\n\n\n\n\n\n\n\n\nChartPattern.BullishHarami\n\n\n\n\n\n\n\n\nChartPattern.BullishHaramiCross\n\n\n\n\n\n\n\n\nChartPattern.DarkCloudCover\n\n\n\n\n\n\n\n\nChartPattern.Doji\n\n\n\n\n\n\n\n\nChartPattern.DownsideTasukiGap\n\n\n\n\n\n\n\n\nChartPattern.EveningStar\n\n\n\n\n\n\n\n\nChartPattern.FallingThreeMethods\n\n\n\n\n\n\n\n\nChartPattern.Hammer\n\n\n\n\n\n\n\n\nChartPattern.HangingMan\n\n\n\n\n\n\n\n\nChartPattern.InvertedHammer\n\n\n\n\n\n\n\n\nChartPattern.MorningStart\n\n\n\n\n\n\n\n\nChartPattern.PiercingLine\n\n\n\n\n\n\n\n\nChartPattern.RisingThreeMethods\n\n\n\n\n\n\n\n\nChartPattern.ShootingStar\n\n\n\n\n\n\n\n\nChartPattern.StickSandwich\n\n\n\n\n\n\n\n\nChartPattern.ThreeBlackCrows\n\n\n\n\n\n\n\n\nChartPattern.ThreeWhiteSoldiers\n\n\n\n\n\n\n\n\nChartPattern.UpsideGapTwoCrows\n\n\n\n\n\n\n\n\nChartPattern.UpsideTasukiGap\n\n\n\n\n\n\n\n\ntrendStrength\n\n\nSignifies the number of bars to the left and right of the swing high or swing low that are used to identify a trend. The value 0 turns off the search, meaning that the only thing searched for is chart patterns.\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\nif (CandelStickPattern(ChartPattern.ShootingStar, 5)[0] == 1)\nPrint(\"Pattern ShootingStar found!\");\n\n\n\n\nChaikinMoneyFlow (CMF)\n\n\nDescription\n\n\nMarc Chaikin was the one to develop the Chaikin Money Flow Index, which is a volume indicator that tries to find an answer to the following question: Where is the money flowing into? Into the stock = accumulation, and out of the stock = distribution. Clearly, this applies not only to stocks/shares but also to other instruments. With this, Chaikin attempts to expand on and improve the On-Balance Volume that was developed by Granville. Using the CMF, the position of the closing price within the trading range is placed in relation to the volume. What this essentially means is that the trading volume is multiplied by the price. The trading volume displays the amount of money that has \u201cflowed\u201d into the stock or has been \u201cremoved\u201d from the stock; the indicator simply displays whether it has been accumulated (buying pressure) or removed (distribution).\n\n\nInterpretation\n\n\nThe CMF oscillates around the zero line and is shown in a separate window with an open scale. Should the CMF be located above the zero line, then it can be interpreted as accumulation. If higher highs are being created, then the buying pressure is increasing. The reverse is true for the selling pressure. The Chaikin Money Flow should always be used in combination with other methods of technical analysis.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Chaikin_Money_Flow\n\n\nUsage\n\n\nChaikinMoneyFlow(int period)\nChaikinMoneyFlow(IDataSeries inSeries, int period)\nChaikinMoneyFlow(int period)[int barsAgo]\nChaikinMoneyFlow(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nChaikinMoneyFlow\n(21)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the Money Flow value\nPrint(\"The Chaikin Money Flow value is: \" + ChaikinMoneyFlow(21)[0]);\n\n\n\n\nChaikin Oscillator\n\n\nDescription\n\n\nThe Chaikin Oscillator is a volume indicator that lets the trader know whether new highs are also accompanied by new volumes. This oscillator is a simple MACD that is applied to the accumulation/distribution line. Hereby, the difference between a 3-day exponential moving average and a 10-day exponential smoothed average for the accumulation/distribution line is calculated.\n\n\nInterpretation\n\n\nThe interpretation of the Chaikin Oscillator is similar to the principle of the accumulation/distribution. All an oscillator does is show the changes in liquidity for the instrument.\n\n\nUsage\n\n\nChaikinOscillator(int fast, int slow)\nChaikinOscillator(IDataSeries inSeries, int fast, int slow)\nChaikinOscillator(int fast, int slow)[int barsAgo]\nChaikinOscillator(IDataSeries inSeries, int fast, int slow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nChaikinOscillator\n(3, 10)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nfast Number of bars included in the calculation for the fast EMA\n\n\nslow Number of bars included in the calculation for the slow EMA\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the oscillator for the fast and slow values of 3 and 10\nPrint(\"The Chaikin Oscillator value is: \" + ChaikinOscillator(3, 10)[0]);\n\n\n\n\nChaikinVolatility (CVL)\n\n\nDescription\n\n\nThe Chaikin Volatility Indicator is one of a few indicators that are designed to try and measure price movement fluctuations. Chaikin takes the daily price range (daily high minus daily low) as the fundamental measure of volatility. With this indicator, a widening range is, by implication, associated with a higher volatility.\n\n\nInterpretation\n\n\nThe indicator oscillates around the zero line and fluctuates between a scale of +100 to -100. It can be used on a daily chart as well as on a weekly or monthly chart. All values above the zero line represent rising volatility, and the gradient of the rise implies the seriousness of potential floors forming. The Chaikin Volatility is not specifically used to define exact signals, but is considered as more of an assisting tool in the trading system.\n\n\nUsage\n\n\nChaikinVolatility(int fast, int slow)\nChaikinVolatility(IDataSeries inSeries, int fast, int slow)\nChaikinVolatility(int fast, int slow)[int barsAgo]\nChaikinVolatility(IDataSeries inSeries, int fast, int slow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nChaikinVolatility\n(14)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Chaikin output for a period of 14\nPrint(\"The value of the Chaikin Volatility is: \" + ChaikinVolatility(14)[0]);\n\n\n\n\nChande Momentum Oscillator (CMO)\n\n\nDescription\n\n\nThe CMO is one of several indicators created by the technical analyst Tushar Chande; it is a technical momentum indicator. This indicator arises from calculating the difference between the total of all recent gains and the total of all recent losses, and then dividing this result by the total of all price movement over the given period. This oscillator shares similarities with other momentum indicators such as the Relative Strength Index and the Stochastic Oscillator, because it is also range-bound (+100 and -100).\n\n\nInterpretation\n\n\nThe security is deemed overbought when the momentum oscillator is above +50 and oversold when it is below -50. Many technical traders add a nine-period moving average to this oscillator to act as a signal line. Bullish signals are generated when the oscillator crosses above the signal, and bearish signals are generated when the oscillator crosses down through the signal.\n\n\nFurther information\n\n\nhttp://www.boersenwissen.de/content/content_bin/cont_bin18.html\n\n\nUsage\n\n\nCMO(int period)\nCMO(IDataSeries inSeries, int period)\nCMO(int period)[int barsAgo]\nCMO(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nCMO\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the Chande Momentum Oscillator\nPrint(\"The current value for the Chande Momentum Oscillator is: \" + CMO(14)[0]);\n\n\n\n\nClimactic Distance\n\n\nDescription\n\n\nThe Climactic Distance indicator was invented and developed by Gilbert Kreuzthaler, CEO of Include IT GmbH and founder of AgenaTrader.com. This indicator is used in the Location Point Trading system. It calculates the median course of the current and historical candle at a distance to the simple moving average (SMA) of the last 20 periods. Additionally, it also measures the average course deviation within the last 80 periods. If the median course exceeds the top or bottom course deviation, the market is deemed climactic, and this influences the trading decisions made in Location Point Trading.\n\n\nCalcualtion\n\n\nBlack line in the middle: SMA 20\nGreen moving line: Median Kurs\nRed upper and lower line: Average course deviation oft he last 80 periods.\n\n\nMore information\n\n\nhttps://www.facebook.com/Location-Point-Trading-344217482287592/?fref=ts\n\n\nUsage\n\n\nClimacticDistance(int sMAPeriod, int thresholdPercent)\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent)\nClimacticDistance(int period, int tresholdPercent, Color climacticColor)\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor)\n//Upper band\nClimacticDistance(int sMAPeriod, int thresholdPercent).Upper[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).Upper[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).Upper[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).Upper[int barsAgo]\n//Lower band\nClimacticDistance(int sMAPeriod, int thresholdPercent).Lower[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).Lower[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).Lower[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).Lower[int barsAgo]\n\n//MovingAverage\nClimacticDistance(int sMAPeriod, int thresholdPercent).MovingAverage[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).MovingAverage[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).MovingAverage[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).MovingAverage[int barsAgo]\n//Distance\nClimacticDistance(int sMAPeriod, int thresholdPercent).Distance[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).Distance[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).Distance[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).Distance[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nParameters\n\n\nInt\n\n\nVisualization\n\n\nImage\n\n\nExample\n\n\n//Output of the value for the Upper climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).Upper[0]);\n//Output of the value for the Lower climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).Lower[0]);\n//Output of the value for the Distance climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).Distance[0]);\n//Output of the value for the Moving Average climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).MovingAverage[0]);\n\n\n\n\nCommodity Channel Index (CCI)\n\n\nDescription\n\n\nThe Commodity Channel Index (CCI), which was created by Donald Lambert and actually featured in Commodities magazine in 1980, is a versatile indicator that can be used for identifying a new trend or as a warning of extreme conditions. Lambert originally developed the CCI as a means to identify cyclical turns in commodities \u2013 however, the indicator can also successfully be applied to ETFs, indices, stocks and various other securities. In general, what CCI does is to measure the current price level relative to an average price level over a specified period of time. When prices are well above their average, CCI is relatively high. When prices are far below their average, CCI is relatively low. This is how CCI can be used for identifying overbought and oversold levels.\n\n\nInterpretation\n\n\nCCI measures the difference between a securitys price change and its average price change. High positive readings indicate that prices are well above their average, which is a show of strength. Low negative readings indicate that prices are well below their average, which is a show of weakness.\n\n\nThe Commodity Channel Index (CCI) can be used as either a coincident or leading indicator. As a coincident indicator, surges above +100 reflect strong price action that can signal the start of an uptrend. Plunges below -100 reflect weak price action that can signal the start of a downtrend.\n\n\nAs a\u00a0\nleading indicator\n, \nmomentum oscillators\n, chartists can look for overbought or oversold conditions that may foreshadow a mean reversion. Similarly, bullish and bearish divergences can be used to detect early momentum shifts and anticipate trend reversals.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Commodity_Channel_Index\n\n\nUsage\n\n\nCCI(int period)\nCCI(IDataSeries inSeries, int period)\nCCI(int period)[int barsAgo]\nCCI(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nCCI\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the CCI value calculated using 14 periods\nPrint(\"The value of the Commodity Channel Index is: \" + CCI(14));\n\n\n\n\nCOTAggregatedIndexPositionDisaggregated\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator also works in the same way as the COTAggregatedIndexPositionLegacy; for interpretation and more detailed information, please read more under  \nCOTAggregatedIndexPositionLegacy\n. The difference here, in turn, consists in the usage of the detailed disaggregated data for calculating the indicator.\n\n\nFor the COTAggregatedIndexPositionDisaggregated, the following parameters are available:\n\n\n\n\nAddIndices: \n\n\nDowJones:\n select [True] if the positions of the DowJones should be added to the overall result. \n\n\nNasdaq100:\n select [True] if the positions of the Nasdaq100 should be added to the overall result. \n\n\nRussell2000:\n select [True] if the positions of the Russell2000 should be added to the overall  result. \n\n\n\n\nSP500:\n  select [True] if the positions of the SP500 should be added to the overall result.\n\n\n\n\n\n\nCategories: Financial\n\n\n\n\nHere you can only select the categories of the Financials, since this indicator addresses 4 financial markets. However, you can load the indicator in Financials AND Commodities.\n\n\n\n\nSelect [True] for the categories for which the positions for the selected markets should be added up and displayed.\n\n\n\n\n\n\nData base:\n\n\n\n\n\n\nReportType:\n see \nCOTReportLegacy\n \u2013 CotType\n\n\n\n\n\n\nDisplay:\n\n\n\n\nLongPosition:\n select [True] to display the long positions of the desired market participants \n\n\nShortPosition:\n select [True] to display the short positions of the desired market participants \n\n\nNetPosition:\n select [True] to display the net positions of the desired market participants\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nCOTCommercialIndex\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe CommercialIndex is a very telling COT indicator. It puts two of the most important COT-parameters in relation to each other \u2013 the net position of the commercials to the open interest. These values are normalized and subsequently outputted. A high value of the CommercialIndex shows strong buying behavior of the commercials, whereas a low value shows strong sell pressure from the commercials. The parameters are similarly structured as with the COTReport. \n\n\nThe following parameters are available for the COTCommercialIndex:\n\n\n\n\nCotType\n: see \nCOTReportLegacy\n \u2013 CotType\n\n\nReportType:\n see \nCOTReportLegacy\n \u2013 ReportType\n\n\nStochasticPeriod:\n see \nCOTReportLegacy\n  \u2013 ComparativePeriod\n\n\nOpenInterestType:\n Here you can choose between [Native/Stochastic], which determines whether absolute values or the stochastic values of the positions of the commercials should be used for the calculation. The default setting is \u201cNative\u201d; do not change this if you wish to keep the informative value of the indicator.\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nCOTOpenInterestDisaggregated\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator corresponds to the mode of operation of the COTOpenInterestLegacy, instead using, however, the more finely broken down data of the disaggregated reports. For the functionality and interpretation of the open interest, please read more under see \nCOTOpenInterestLegacy\n.\n The calculation also occurs analogously to the legacy reports, and since for each long contract, there must also be a market participant on the short side, two calculation methods are possible (here for commodity futures):\n\n\n1) Producer[Long] + SwapDealer[Long] + SwapDealer[Spread] + ManagedMoney[Long] + ManagedMoney[Spread] + OtherReportables[Long] + OtherReportables[Spread] + NonReportable[Long] = OpenInterest \n\n\n2) Producer[Short] + SwapDealer[Short] + SwapDealer[Spread] + ManagedMoney[Short] + ManagedMoney[Spread] + OtherReportables[Short] + OtherReportables[Spread] + NonReportable[Short] = OpenInterest\n\n\nThe following parameters are available for the COTOpenInterestDisaggregated:\n\n\n\n\nCategories: Commodity\n \n\n\nOpenInterest_Comm:\n (=total OpenInterest for Commodities) \n\n\n[Absolute]: outputs the OpenInterest as an absolute number\n\n\n[Stochastic]: OpenInterest as an oscillator with values between 0-100 \n\n\n[None]: no output for the OpenInterest.\n\n\n\n\n\n\n%ofOIProd Long/Short/Spread:\n (=Percent of OpenInterest for Producer Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed. This here is the percentage that the positions of the producers have of the overall OpenInterest. A value of 0.5, for example, means that the producers have built up long positions in the size of 50% of the entire OpenInterest.\n\n\n%ofOISwapDealer Long/Short/Spread:\n (=Percent of OpenInterest for SwapDealers Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed.\n\n\n%ofOIManagedMoney Long/Short/Spread\n: (=Percent of OpenInterest for ManagedMoney Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed. \n\n\n%ofOIComOther Long/Short/Spread:\n (=Percent of OpenInterest for Other Traders in Commodities Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed. \n\n\n%ofOIComNonreportables Long/Short/Spread\n: (=Percent of OpenInterest for NonReportables in Commodites Long/Short/Spread \u2013 Position) select [True] if this value should be displayed.\n\n\nCategories: Financial\n\n\nAll parameters work analogously to the settings under \u201cCategories: Commodity\u201d; the only difference lies in the division into various groups of market participants\n\n\nData base:\n \n\n\nCotType:\n \nCOTReportLegacy\n - CotType \n\n\nReportType:\n \nCOTReportLegacy\n - ReportType \n\n\nStochasticPeriod:\n \nCOTReportLegacy\n \u2013 ComparativePeriod\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nCOTOpenInterestLegacy\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe open interest specifies the number of all currently held contracts; a high open interest, therefore, indicates that the market participants have great interest in this value; vice versa, low open interest shows that a value has only few held contracts and therefore little activity from the market participants. \nThere are two options for calculating the OpenInterest:\n\n\n1) Commercial[Long] + NonCommercial[Long] + NonCommercial[Spread] + NonReportable[Long] = OpenInterest\n 2) Commercial[Short] + NonCommercial[Short] + NonCommercial[Spread] + NonReportable[Short] = OpenInterest\n\n\nSince for every long contract, there is also a market participant on the short side, both calculation methods yield exactly the same value. Additional info: with the CFTC, the open interest is not calculated; the CFTC can simply see the open interest by counting all contracts that are open in the market. With known open interest, the NonReportable positions are then calculated, since the following equation must be valid: TotalReportable + NonReportable = OpenInterest. TotalReportable and OpenInterest are known, allowing the NonReportables to be calculated.\n\n\nThe following parameters are available for the OpenInterestLegacy:\n\n\n\n\n\n\nCotType:\n \nCOTReportLegacy\n \u2013 CotType\n\n\n\n\n\n\nReportType:\n \nCOTReportLegacy\n \u2013 ReportType\n\n\n\n\n\n\nStochasticPeriod:\n \nCOTReportLegacy\n\u2013 ComparativePeriod \n\n\n\n\n\n\nIsNative:\n outputs the OpenInterest as an absolute number, just as it is read out from the CFTC reports\n\n\n\n\n\n\nIsStochastic:\n the OpenInterest is outputted and calculated as an oscillator with values between 0-100. With the StochasticPeriod, you can set with which period the Stochastic should be calculated.\n\n\n\n\n\n\nIsCommercialLong/IsCommercialShort:\n select [True] if you would like to have the data for the NonCommercials displayed. The outputted values are percentages; if, for example, you set IsCommercialLong=True, the percentage of long positions of the Commercials that make up the total OpenInterest is outputted. A value of 0.5, for example, means that the OpenInterest consists of 50% long positions of the Commercials, which can be considered a very large long position of the Commercials.\n\n\n\n\n\n\nIsNonCommercialLong/IsNonCommercialShort:\n if you select [True], the percentage of NonCommercial long positions i.e. NonCommercial short positions that make up the total OpenInterest is outputted.\n\n\n\n\n\n\nIsNonReportableLong/IsNonReportableShort:\n if you select [True], the percentage of NonReportable long positions i.e. NonReportable short positions that make up the total OpenInterest it outputted.\n\n\n\n\n\n\nIsTotalReportableLong/IsTotalReportableShort:\n if you select [True], the percentage of TotalReportable long positions i.e. TotalReportable short positions that make up the total OpenInterest is outputted. (TotalReportable = Commercials+NonCommercials).\n\n\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nCOTReportDisaggregated\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe COTReportDisaggregated accesses the detailed disaggregated reports of the CFTC, which have been published since 2009 and can be regarded as a further development of the legacy reports. The necessity for improvement has resulted in the drastically changing and constantly developing market environment since the introduction of the COT reports in 1986. \nThe market participants are now divided more subtly and are organized into 5 categories. These 5 categories vary according to whether we are dealing with a commodity future or a financial future.\n\n\nThe market participants are now divided more subtly and are organized into 5 categories. These 5 categories vary according to whether we are dealing with a commodity future or a financial future.\n\n\nThe \ncommodity futures\n are divided into the following groups: \n\n\n\n\nProducer/Merchant/Processor/User \n\n\nSwapDealers o ManagedMoney \n\n\nOther Reportables \n\n\nNonreportables \n\n\nYou can find more information about the classification of the commodities \nHERE\n\n\n\n\nFor the \nfinancial futures\n, there are the following groups: \n\n\n\n\nDealer/Intermediary \n\n\nAssetManager/Institutional \n\n\nLeveraged Funds \n\n\nOther Reportables \n\n\nNonreportabes\n\n\nYou can find more information about the classification of the financials \nHERE\n\n\n\n\nThe following parameters are available for the COTReportDisaggregated:\n\n\n\n\nCategories Commodity/Categories Financial:\n \n\n\n\n\nSelect [True] for the groups that you would like to have displayed in the chart. If you have opened a commodity chart, only settings made under \u201cCategories Commodity\u201d will be taken into account, and vice versa if you have opened a financial chart.\n\n\n\n\n\n\nDatabase:\n\n\n\n\nCotType:\n \nCOTReportLegacy\n \u2013 CotType\n\n\nIndexType:\n \nCOTReportLegacy\n \u2013 IndexType\n\n\nReportType:\n \nCOTReportLegacy\n \u2013 ReportType\n\n\n\n\nStochasticPeriod:\n \nCOTReportLegacy\n\u2013 ComparativePeriod \n\n\n\n\n\n\nDisplay:\n \n\n\n\n\nLongPosition:\n select [True] to display the long positions of the desired market participants \n\n\nShortPosition:\n select [True] to display the short positions of the desired market participants \n\n\nNetPosition:\n select [True] to display the net positions of the desired market participants\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nCOTReportLegacy\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator is the core element of the COT analysis, with which one can directly display the pure data that the indicator reads from the reports published weekly by the CFTC (www.cftc.gov/CommitmentsofTraders). \nThe published reports can be viewed by every market participant. The legacy data is published in the so called short reports you can find on the CFTC-website. The following parameters are available in the COTReportLegacy:\n\n\n\n\n\n\nComparative Period:\n with this setting, you can enter a comparative period with which the stochastic display is calculated (=StochasticPeriod). The system only triggers this parameter when \u201cIndexType = Stochastic\u201d is set.\n\n\n\n\n\n\nCotType:\n under [All/Other/Old], select which contracts should be used for the display; more details are available \nHERE\n\n\n\n\n\n\nIndexType:\n choose between [Absolute/Stochastic] as to how the values should be outputted.\n\n\n\n\nAbsolute = the values are outputted in whole numbers, just as they are read out from the reports. \n\n\n\n\nStochastic = the values are outputted and calculated as an oscillator with values between 0-100. With the ComparativePeriod, you can set with which period the Stochastic should be calculated.\n\n\n\n\n\n\nReportType:\n under this parameter, you select whether the data from the reports should be read out only for futures, or for futures + options.\n\n\n\n\n\n\nReturnType:\n \n\n\n\n\nNet: outputs the net position (=LongContracts \u2013 ShortContracts) of the selected market participants\n\n\nLong/Short: outputs the long i.e. short contracts of the selected market participants\n\n\n\n\nOI: outputs the total OpenInterest of this instrument; for a more precise and advanced display of the OpenInterest, please use the indicator OpenInterestLegacy\n\n\n\n\n\n\nShowCommercials:\n select [True] if you would like to have the data for the Commercials displayed. For detailed information on the definition of which market participants are classified as Commercials, please have a look \nHERE\n\n\n\n\n\n\nShowNonCommercials:\n select [True] if you would like to have the data for the NonCommercials displayed. For detailed information on the definition of which market participants are classified as NonCommercials please have a look at the link provided above.\n\n\n\n\n\n\nShowNonReportables:\n select [True] if you would like to have the data for the NonReportables displayed. For detailed information on the definition of which market participants are classified as NonCommercials please have a look at the link provided above.\n\n\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nCOTStockDummy\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator attempts to simulate the behavior of the commercials in stock markets using a special algorithm. The values are outputted as Stochastic, meaning that they oscillate between values of 0-100. The interpretation of this indicator is analogous to\nthe interpretation of the commercial data in the standard COT indicators. The output of this indicator should be confirmed with other indicators; you must be aware that we are not talking about real COT data from market participants, but about calculations from the price data. As for the COT data, an analysis in the weekly chart is also recommended for the COTStockDummy.\n\n\nThe following parameters are available for the COTStockDummy:\n\n\n\n\nComparativePeriod:\n input period for the stochastic calculation\n\n\nStochastic:\n [True] outputs normalized values (values between 0-100)\n\n\nPeriod:\n this is a period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the default setting.\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nCOTLargeTraderActivity\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe COTLargeTraderActivity indicator, like the COTStockDummy, is based not on real COT data, but instead on algorithmically calculated outputs. This indicator attempts to simulate the behavior of the large traders in markets for which no COT data is available. Here, the interpretation takes place analogously to the analysis of the NonCommercials in the standard COT indicators.As with the COTStockDummy, we point out that other indicators should be consulted, since we are not dealing with real COT data.\n\n\nThe following parameters are available for the COTLargeTraderActivity:\n\n\n\n\nPeriod:\n this is a period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the default setting.\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nDarvas Boxes\n\n\nDescription\n\n\nFormer ballroom dancer Nicolas Darvas developed the Darvas boxes as a trading strategy in 1956. Darvas' trading technique consisted of buying into stocks that were trading at new 52-week highs, with accordingly high volumes. When a stock price rises above the previous 52-week high, but then proceeds to fall back to a price not far from that high, a Darvas box is formed. If the price falls too far, this can signify a false breakout. Otherwise, however, the lower price is used as the bottom of the box and the higher price as the top.\nA box is made up of an upper boundary (top) and a lower boundary (floor). Each new box is created based on a previous box, depicting a \u201cstair\u201d formation.\nIf a new high is not formed after three consecutive days, then the high is labeled as the upper boundary. Following this, the floor is specified based on the lowest price.\n\n\nInterpretation\n\n\nThis system is similar to a trend-following channel breakout system. As soon as one of these boxes breaks out, a new buy or sell signal is generated.\n\n\nExplanation\n\n\nThe initial box top is the high of day 1. First, you should find a new high that must be higher than the high of day 1. It does not matter when the high is located - even if it is after 5 days. However, if the bottom is detected, the box has been completed.\nTo detect the bottom, the low must be after the day 2 since the last day\u2019s box top was detected, and should be lower than the low of the original day 1 low.\n\n\nThe bottom is usually detected last, and a new high may not be detected until the bottom is locked in. The Darvas box has then been completed.\n\n\nIf the price breaks out of the bottom or top, a new box will be started. The bottom stop loss box has been drawn as the last price percentage.\n\n\nWe should take the first day\u2019s high value as the top border. The next day, we check if the high of the day is higher than the previous border top. In the case that it is higher -> top border = high. In the case that the top is going up for the last 3 steps, and the next is then lower, it will be a box top. Start looking for the bottom border. It is identical to the top (search for a trend low after which the daily low would be higher than the previous. In this case, the previous low would be the box bottom). Now we have a Darvas corridor. If one of the next bar\u2019s high values is higher than the top box or lower than the bottom box -> box is closed (a new box will be started when the price breaks out of the top or bottom of the box).\n\n\nBuy Signal\n\n\n\n\nSell Signal\n\n\n\n\nFurther information\n\n\nHere you can read about a trading system based on the Darvas boxes. (German only)\n\nhttp://www.eusdoni.de/index.php?option=com_content&view=article&catid=13:eusdoni-version-3&id=42:darvas-boxen\n\n\nUsage\n\n\nDarvas()\nDarvas(IDataSeries inSeries)\n\n//For the upper Box boundary\nDarvas().Upper[int barsAgo]\nDarvas(IDataSeries inSeries).Upper[int barsAgo]\n\n//Returns the lower value\nDarvas().Lower[int barsAgo]\nDarvas(IDataSeries inSeries).Lower[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDarvas\n()[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the values for the upper markings (box top)\nPrint(\"The upper boundary for the Darvas box is: \" + Darvas().Upper[0]);\n//Lower markings\nPrint(\"The lower boundary for the Darvas box is: \" + Darvas().Lower[0]);\n\n\n\n\nDirectional Movement (DM)\n\n\nDescription\n\n\nThe Directional Movement indicator is almost identical to the ADX, with the only difference that the +DM and -DM values are also calculated. These values are then later on used for the DMI.\n\n\nInterpretation\n\n\nThe Directional Movement indicator is positive when the difference between the highs is at its largest.\n\n\nFurther information\n\n\nSee: Directional Movement Index (\nDMI\n)\n\n\nUsage\n\n\nDM(int period)\nDM(IDataSeries inSeries, int period)\nDM(int period)[int barsAgo]\nDM(IDataSeries inSeries, int period)[int barsAgo]\n//For the value of +DM\nDM(int period).DiPlus[int barsAgo]\nDM(IDataSeries inSeries, int period).DiPlus[int barsAgo]\n//For the value of -DM\nDM(int period).DiMinus[int barsAgo]\nDM(IDataSeries inSeries, int period).DiMinus[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDM\n(14).DiPlus[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the DM values\nPrint(\"The current +DM value is: \" + DM(14).DiPlus[0]);\nPrint(\"The current \u2013DM value is: \" + DM(14).DiMinus[0]);\n\n\n\n\nDonchian Channel\n\n\nDescription\n\n\nThe Donchian channel can also be called the \u201c4-week-rule\u201d; this is how it works: when the current price reaches a peak above the high of the past 4 weeks, a new long position is opened. If a short position is open simultaneously, it is closed. This works vice versa with shorts. The  Donchian channel trading system is a purely trend-following system based on the concept \u201cbuy when it is strong, sell when it is weak\u201d. The famous \u201cTurtles\u201d also employed this breakout system. This indicator displays the highs and lows of the last n days as lines above and below the price development. 20 days represent 4 weeks.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Donchian_Channel\n\n\nUsage\n\n\nDonchianChannel(int period)\nDonchianChannel(IDataSeries inSeries, int period)\n\n//Upper band\nDonchianChannel(int period).Upper[int barsAgo]\nDonchianChannel(IDataSeries inSeries, int period).Upper[int barsAgo]\n\n//Middle band\nDonchianChannel(int period)[int barsAgo]\nDonchianChannel(IDataSeries inSeries, int period)[int barsAgo]\n\n//Lower band\nDonchianChannel(int period).Lower[int barsAgo]\nDonchianChannel(IDataSeries inSeries, int period).Lower[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDonchianChannel\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the values of the Donchian Channel\nPrint(\"The upper band is at: \" + DonchianChannel(14).Upper[0]);\nPrint(\"The middle band is at: \" + DonchianChannel(14)[0]);\nPrint(\"The lower band is at: \" + DonchianChannel(14).Lower[0]);\n\n\n\n\nDirectional Movement Index (DMI)\n\n\nDescription\n\n\nWelles Wilder Jr. developed the Directional Movement concept in 1978. His concept includes the following components:\n\n\nDirectional Movement Index (DMI)\n\n\nAverage Directional Movement Index (\nADX\n)\n\n\nTrue Range (TR)\n\n\nThe Directional Movement Index comes before the Average Directional Movement Index. The DMI shows the strengths of the trend-favoring price movements in percentages. Its standard application is the smoothed ADX.\n\n\nInterpretation\n\n\nThe DMI shows the strength of the trend, but not the trend direction. This means that it is particularly suited as a filter for trading systems employing the Parabolic SAR, for example, in order to filter out sideways phases. When the DMI rises (especially above 25), a trend is displayed; anything below that is recognized as a sideways phase. The +DI and the \u2013DI point towards a trend. An uptrend is classified when the +DI is above the \u2013DI. The further apart they drift, the stronger the trend.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/DMI_-_Directional_Movement_Index\n\n\nUsage\n\n\nDMI(int period)\nDMI(IDataSeries inSeries, int period)\nDMI(int period)[int barsAgo]\nDMI(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDMI\n(20)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the DMI\nPrint(\"The current DMI value is: \" + DMI(20)[0]);\n\n\n\n\nDouble Stochastics (DSS)\n\n\nDescription\n\n\nWilliam Blau was the developer of the Double Smoothed Stochastic (DSS), which is a double-smoothed stochastic indicator. After a while, it was improved upon by Walter Bressert as a variation of the double-smoothed stochastic. Smaller changes in the price movements cause this indicator to react more sensitively, and it also produces more signals than the one Blau developed. The Bressert version therefore also illustrates extreme zones more clearly than the Blau version.\n\n\nRegardless of the various calculation methods used, the DSS always stays within a scale of 0 to 100. The extreme zones in the developed stochastics are the same as for the original stochastics. The upper extreme area is marked at 80, and the lower extreme zone at 20 - these values cannot be changed. For many applications, it is wise to include an additional middle line at 50, and to adapt this to the circumstances as needed.\n\n\nInterpretation\n\n\nValues above 80 are seen as overbought, and below 20 as oversold. In addition, signals are produced by the signal line\u2019s behavior and movements into and out of the extreme zones.\n\n\nUsage\n\n\nDoubleStochastics(int period)\nDoubleStochastics(int period)[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1)\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1)\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1)[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1)[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)[int barsAgo]\n\n//For the value of %K\nDoubleStochastics(int period).K[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period).K[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1).K[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1).K[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2).K[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2).K[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDoubleStochastics\n(...)[\nint\n barsAgo] or \nDoubleStochastics\n(...).K[\nint\n barsAgo]), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations (default: 10)\n\n\nmode Method of calculation, possible inSeries are Blau, Blau2, Bressert\n\n\nEMA-Period1 Periods for the EMA\n\n\nEMA-Period2 Periods for the second EMA\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for %K\nPrint(\"The value of the DSS Bressert %K is: \" + DoubleStochastics(10, DoubleStochasticsMode.Bressert, 2)[0]);\n\n\n\n\nDynamic Momentum Index (DMIndex)\n\n\nDescription\n\n\nThe Dynamic Momentum Index, which was developed by Tushar Chande, is a specific variant of the Relative Strength Index. Chande changed the Dynamic Momentum Index in such a way that, based on various factors, the period settings automatically adjust themselves, which he achieved by coupling it to the RSI in order for a volatility component to be present. The definition of this volatility component is based on a 5-day standard deviation of the closing prices. This, in turn, is then compared to the 10-day average of a 5-day standard deviation.\n\n\nInterpretation\n\n\nIf the DMI is inside the oversold zone, it is reasonable to assume that prices are going to start to fall.\n\n\nFurther and more concise information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Dynamic_Momentum_Index\n\n\nUsage\n\n\nDMIndex(int smooth)\nDMIndex(IDataSeries inSeries, int smooth)\nDMIndex(int smooth)[int barsAgo]\nDMIndex(IDataSeries inSeries, int smooth)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDMIndex\n(3)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nsmooth Smoothing settings\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the value for the DMIndex Indicator with a smoothing factor of 3\nPrint(\"The current value for the DMIndex is: \" + DMIndex(3)[0]);\n\n\n\n\nEase of Movement (EOM)\n\n\nDescription\n\n\nEase of Movement (EMV) is a volume-based oscillator created by Richard Arms that constantly moves above and below the zero line. It is intended to measure the \"ease\" of price movement, as suggested by the name. Arms developed Equivolume charts in order to visually display price ranges and volume. Ease of Movement expands upon Equivolume by quantifying the price/volume relationship and displaying the results in the form of an oscillator. Generally, when the oscillator is in a positive area, prices are advancing with relative ease. On the other hand, when the oscillator is in negative territory, prices are falling with relative ease.\n\n\nInterpretation\n\n\nWhen the EOM is moving away from the zero line (marker) then an impulse has begun in that direction. During a breakout onto the opposite side of the zero line, it is recommended to enter with the trend direction.\n\n\nFurther information\n\n\nhttp://www.volumen-analyse.de\n\n\nUsage\n\n\nEaseOfMovement(int smoothing, int volDivisor)\nEaseOfMovement(IDataSeries inSeries, int smoothing, int volDivisor)\nEaseOfMovement(int smoothing, int volDivisor)[int barsAgo]\nEaseOfMovement(IDataSeries inSeries, int smoothing, int volDivisor)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nEaseOfMovement\n(14, 10000)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nsmoothing Smoothing settings\n\n\nvolDivisor For calculation of the box ratio (see \u201cCalculation\u201d below)\n\n\nVisualization\n\n\n\n\nCalculation\n\n\nMidpoint = (High + Low) / 2\nMidpointMove = Midpoint [today] \u2013 Midpoint [yesterday]\nBoxRatio = Volume / (High \u2013 Low)\nEase = MidpointMove / Box Ratio\n\n\nExample\n\n\n//Output for the values of the EOM line\nPrint(\"The value for the Ease of Movement is: \" + EaseOfMovement(14, 10000)[0]);\n\n\n\n\nFisher Transform\n\n\nDescription\n\n\nThe physicist John Ehlers created the Fisher Transform in 2002. The intention of the indicator is to show where there are turning points, which can be achieved with the help of the Inverse Fisher Transform. This changes indicators in such a way that the movements are less random, and the signal quality is clearer. The Fisher Transform either stretches or compresses the input values of the function so that the output is very likely to be between -1 and 1. This gives us a clearly identifiable pattern where even indicators such as the RSI become better defined and more precise.\n\n\nInterpretation\n\n\nA system using the Fisher Transform can be found here:\n\nhttps://www.prorealtime.com/de/pdf/probacktest.pdf\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nFisherTransform\n(10)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nUsage\n\n\nFisherTransform(int period)\nFisherTransform(IDataSeries inSeries, int period)\nFisherTransform(int period)[int barsAgo]\nFisherTransform(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output values for the Fisher Transform\nPrint(\"The current value for the Fisher Transform is: \" + FisherTransform(10)[0]);\n\n\n\n\nForecast Oscillator (FOSC)\n\n\nDescription\n\n\nThe FOSC makes a comparison of the current price against the value returned by the Time Series Forecast study. It is calculated as a percentage ratio of the difference between the close price and the Time Series Forecast value for the previous bar.\n\n\nWhen this oscillator displays positive values, it hints that the Time Series Forecast has underestimated the price, whereas negative values suggest that the TSF has overestimated the price. Usually, an SMA also accompanies the Forecast Oscillator line in the search for oscillator reversals.\n\n\nFurther information\n\n\nFMLabs: \nhttp://www.fmlabs.com/reference/default.htm?url=ForecastOscillator.htm\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nFOSC\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nUsage\n\n\nFOSC(int period)\nFOSC(IDataSeries inSeries, int period)\nFOSC(int period)[int barsAgo]\nFOSC(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nVisualization\n\n\n\n\nExamples\n\n\n//Output for the Forecast Oscillator\nPrint(\"The current value for the Forecast Oscillator is: \" + FOSC(14)[0]);\n\n//Determining the future market direction\nif (FOSC(14)[0] > 0)\nPrint(\"The FOSC is bigger than zero, which indicates rising price movements.\");\n\n\n\n\nHighestHighIndex()\n\n\nDescription\n\n\nThe Highest High Index prints the index for the bars with the highest high within a specified number of periods. It is slightly different from the GetSerieHighestValue() function in that it can be visualized within the chart.\n\n\nSee \nHighestHighPrice()\n, \nLowestLowPrice()\n, \nLowestLowIndex\n, \nGetSerieHighestValue()\n, \nGetSerieLowestValue()\n.\n\n\nUsage\n\n\nHighestHighIndex(int BarsBack)\nHighestHighIndex(int BarsBack)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nHighestHighIndex\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameter\n\n\nBarsBack Number of periods in which the highest high will be searched for\n\n\nVisualization\n\n\n\n\nExample\n\n\n// How many bars back is the bar with the highest high of the last 14 bars located?\nPrint(\"The highest high in the last 14 bars was \" + HighestHighIndex(14)[0] + \" bars ago.\");\n\n\n\n\nHighestHighPrice()\n\n\nDescription\n\n\nHighest High Price shows the highest high achieved within a predefined number of periods.\n\n\nUnlike the GetSerieHighestValue(), this indicator can be displayed within the chart.\n\n\nSee \nHighestHighIndex()\n, \nLowestLowPrice()\n, \nLowestLowIndex\n, \nGetSerieHighestValue()\n, \nGetSerieLowestValue()\n.\n\n\nUsage\n\n\nHighestHighPrice(int BarsBack)\nHighestHighPrice(int BarsBack)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nHighestHighPrice\n(14)[\nint\n barsAgo] ), the value of the indicator will be outputted for the referenced bar.\n\n\nParameter\n\n\nBarsBack Number of periods in which the highest high will be searched for\n\n\nVisualization\n\n\n\n\nExample\n\n\n// What was the value of the highest high in the last 14 periods?\nPrint(\"The highest high for the last 14 bars is \" + HighestHighPrice(14)[0]);\n\n\n\n\nIchimokuCloud\n\n\nDescription\n\n\nThe Ichimoku Cloud, also called Ichimoku Kinko Hyo, is a very adaptable indicator that defines support and resistance, gauges momentum, identifies trend direction and provides trading signals. Ichimoku Kinko Hyo literally means \"one look equilibrium chart\". With just one look, traders can identify the trend and search for possible signals in that trend. The indicator was developed by the journalist Goichi Hosoda, and published in his 1969 book. Although the Ichimoku Cloud may appear complicated when looked at on the price chart, it is in fact a simple indicator that can be implemented very well \u2013 a tribute to the fact that its inventor was a journalist! What is more, the concepts are easily understandable and the signals well-defined.\n\n\n1. Tenkan Sen\n \u2013 conversion line This is the median value of the 9-period high and the 9-period low.\n\n2. Kinjun Sen\n \u2013 the baseline This is the midpoint of the 26-period high and low.\n\n3. Chikou Span\n \u2013 lagging span This is the closing price plotted 26 days in the past.\n\n4. Senkou Span A\n \u2013 the first leading line This is the midpoint between the conversion line and the baseline. The leading Span A forms one of the two cloud boundaries. It is referred to as leading because it is plotted 26 periods in the future and thus builds the faster cloud boundary.\n\n5. Senkou Span B\n \u2013 the second leading line This is the midpoint of the 52-day high-low range projected 26 periods into the future, forming the slower cloud boundary.\nKumo \u2013 cloud The cloud (Kumo) is the area between Senkou Span A and Senkou Span B. This area is highlighted in color, forming a cloud shape.\n\n\nCaution:\n\nBecause the cloud is drawn \u201cinto the future\u201d, it is necessary to shift the time axis to the left in order to view it.\n\n\nInterpretation\n\n\nSimilarly to the smoothing averages, the Ichimoku indicator will create a bullish signal when the Tenkan Sen crosses over the Kinjun Sen from below.\n\n\nFurther information\n\n\nhttp://de.wikipedia.org/wiki/Ichimoku\n\n\nhttp://www.forexabode.com/technical-analysis/ichimoku-cloud\n\n\nhttp://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ichimoku_cloud\n\n\nhttp://www.forexonlinegeheimnisse.com/ichimoku-kinko-hyo-teil-i#top\n (Part 1, German)\n\n\nhttp://www.forexonlinegeheimnisse.com/ichimoku-kinko-hyo-teil-ii-das-perfekte-kauf-oder-verkaufssignal#top\n (Part 2, German)\n\n\nUsage\n\n\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow)\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow)\n\n//TenkanSen\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).TenkanSen[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).TenkanSen[int barsAgo]\n\n//KijunSen\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).KijunSen[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).KijunSen[int barsAgo]\n\n//ChikouSpan\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).ChikouSpan[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).ChikouSpan[int barsAgo]\n\n//SenkouSpanA\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).SenkouSpanA[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).SenkouSpanA[int barsAgo]\n\n//SenkouSpanB\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).SenkouSpanB[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).SenkouSpanB[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nIchimokuCloud\n(9,26,52)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiodFast Period setting for the Tenkan line. Default: 9\n\n\nperiodMedium Period setting for the Kijun line. Default: 29\n\n\nperiodSlow Number of periods used for the calculation of the Chikou line. Default: 52\n\n\nVisualization\n\n\n\n\nInsideBarsMT\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nInsideBarsMT displays inside bars as defined by Michael Voigt in his book.\nThe settings can be modified, and additional adjustments are also possible. Furthermore, there are several data series used in stop calculations for self-developed indicators and strategies.\n\n\nInterpretation\n\n\nInside bars are bars whose body (open-close) are located within the high-low span of the previous bar. The previous bar is generally called an outside bar.\nInside bars will sometimes reflect sideways phases, and will also display trend corrections of lower timeframes. When trading inside bars, the stop is placed at the high or low of the previous period. If the high or low of the previous candle is unsuitable, then the high or low of an older candle is used.\n\n\nUsage\n\n\nInsideBarsMT().isInsideBar[int barsAgo]\nInsideBarsMT().isOutsideBar[int barsAgo]\nInsideBarsMT().HighBeforeOutsideBar[int barsAgo]\nInsideBarsMT().LowBeforeOutsideBar[int barsAgo]\n\n\n\n\nSettings\n\n\n\n\nInsideBarsMT\n().isInsideBar[\nint\n barsAgo]\n\n\n\n\nWill return \u201ctrue\u201d if the referenced bar is an inside bar, otherwise \u201cfalse\u201d\n\n\n\n\nInsideBarsMT\n().isOutsideBar[\nint\n barsAgo]\n\n\n\n\nWill return \u201ctrue\u201d if the previous bar is an outside bar\n\n\n\n\nInsideBarsMT\n().HighBeforeOutsideBar[\nint\n barsAgo]\n\n\n\n\nWill output the high of the bar preceding the outside bar\n\n\n\n\nInsideBarsMT\n().LowBeforeOutsideBar[\nint\n barsAgo]\n\n\n\n\nWill return the low of the bar preceding the outside bar\n\n\nVisualization\n\n\n\n\nTolerance parameter\n\n\nIn the image below you will see a longer \u201cphase\u201d where the market is within an inside bar. The bar marked with the arrow opens the low of the outside bar. If the open of the green candle had been a tick lower, then the marked bar would not be an inside bar and the red bar would clearly not be an outside bar.\nThe tolerance parameter defines the number of ticks by which the inside bars may \u201cbreach\u201d the high-low span of the outside bar and still be recognized as an inside bar.\n\n\nTolerance default setting = 0.\n\n\n\n\nExample\n\n\ndouble StopPrice;\nprotected override void OnCalculate()\n{\n// Open position when SMAs cross\nif (CrossAbove(SMA(10),SMA(20),1) && Position.PositionType == PositionType.Flat)\nOpenLong();\n// If the current bar is an inside bar, modify the stop\nif (InsideBarsMT().isInsideBar[0])\nStopPrice = InsideBarsMT().LowBeforeOutsideBar[0];\nelse\n// Use different stop method\n}\n\n\n\n\nKeltner Channel\n\n\nDescription\n\n\nKeltner Channels are volatility-based envelopes placed above and below an EMA. This indicator shares similarities with Bollinger Bands, where the bands are set using the standard deviation. Here, instead of using the standard deviation, Keltner Channels use the Average True Range (ATR) to set the channel distance. Typically, the channels are set two Average True Range values above and two ATRs below the 20-day EMA. The EMA determines the direction and the Average True Range dictates the channel width. Keltner Channels form a trend-following indicator that is applied with the aim of identifying reversals with channel breakouts and channel direction. The channels can also be used to spot overbought and oversold levels when the trend is flat.\nIn his 1960 book, \nHow to Make Money in Commodities,\n Chester Keltner featured the \"Ten-Day Moving Average Trading Rule,\" credited as the original version of Keltner Channels. This version started off with a 10-day SMA of the typical price {(H+L+C)/3)} as the center line. The 10-day SMA of the high-low range was added and subtracted to set the upper and lower channel lines respectively. Linda Bradford Raschke then brought in the more recent version of Keltner Channels in the 1980s. Similarly to Bollinger Bands, this new version made use of a volatility-based indicator, Average True Range (ATR), to set channel width.\nMiddle line = 20-day exponential moving average\nUpper channel line: 20-day EMA + (2x ATR(10))\nLower channel line: 20-day EMA \u2013 (2xATR(10))\n\n\nInterpretation\n\n\nIndicators based on channels, bands and envelopes are designed to encompass most price action. Therefore, moves above or below the channel lines warrant attention because they are relatively rare. Trends often start with strong moves in one direction or another. A surge above the upper channel line shows extraordinary strength, while a plunge below the lower channel line shows extraordinary weakness. Such strong moves can signal the end of one trend and the beginning of another.\n\n\nWith an exponential\u00a0\nmoving average\n, \naverage\n\u00a0as their foundation, the Keltner Channels are a trend-following indicator. As with moving averages and trend-following indicators, Keltner Channels lag price action. The direction of the moving average dictates the direction of the channel. In general, a downtrend is present when the channel moves lower, while an uptrend exists when the channel moves higher. The trend is flat when the channel moves sideways.\n\n\nA channel upturn and break above the upper trend line can signal the start of an uptrend. A channel downturn and break below the lower trend line can signal the start a downtrend. Sometimes a strong trend does not take hold after a channel breakout and prices oscillate between the channel lines. Such trading ranges are marked by a relatively flat moving average. The channel boundaries can then be used to identify overbought and oversold levels for trading purposes.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Keltner_Channel\n\n\nUsage\n\n\nKeltnerChannel(double offsetMutiplier, int period)\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period)\n\n//Returns midline value\nKeltnerChannel(double offsetMutiplier, int period)[int barsAgo]\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period)[int barsAgo]\n\n//Returns upper band value\nKeltnerChannel(double offsetMutiplier, int period).Upper[int barsAgo]\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period).Upper[int barsAgo]\n\n//Returns lower band value\nKeltnerChannel(double offsetMutiplier, int period).Lower[int barsAgo]\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period).Lower[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nKeltnerChannel\n(1.5, 15)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\noffsetMultiplier Multiplier for the SMA\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nCalculation\n\n\ndiff.\nSet\n(High[0] - Low[0]);\n\n\ndouble\n middle = \nSMA\n(Typical, Period)[0];\n\n\ndouble\n offset = \nSMA\n(diff, Period)[0] * offsetMultiplier;\n\n\ndouble\n upper = middle + offset;\n\n\ndouble\n lower = middle - offset;\n\n\nExample\n\n\n//Current value for the Keltner Channel based on 15 periods\nPrint(\"Current value of the upper Keltner Channel band: \" + KeltnerChannel(1.5, 15).Upper[0]);\nPrint(\"Current value of the middle Keltner Channel band: \" + KeltnerChannel(1.5, 15)[0]);\nPrint(\"Current value of the lower Keltner Channel band: \" + KeltnerChannel(1.5, 15).Lower[0]);\n\n\n\n\nKeyReversalUp\n\n\nDescription\n\n\nThe KeyReversalUp indicator searches within a predefined number of periods to find turning points with the following characteristics:\n1   The current close is higher than the previous close\n2   The current low is smaller than or equal to the last low of the last n bars\n\n\nSee \nKeyReversalDown\n, \nKeyReversalUpAtSMA\n, \nKeyReversalDownAtSMA\n, \nKeyReversalUpAtEMA\n, \nKeyReversalDownAtEMA\n.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\nperiod Number of bars included in the calculations\n\n\nReturn value\n\n\ndouble\n\n\n0 \u2013 No reversal information available\n1 \u2013 Reversal information available\n\n\nUsage\n\n\nKeyReversalUp(int period)\nKeyReversalUp(IDataSeries inSeries, int period)\nKeyReversalUp(int period)[int barsAgo]\nKeyReversalUp(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nExample\n\n\n// Search for an entry opportunity (longs)\nif (KeyReversalUp(10)[0] == 1)\nPrint(\"A long reversal formation has occurred.\");\n\n\n\n\nKeyReversalDown\n\n\nDescription\n\n\nKeyReversalDown searches within a predefined number of periods to find turning points with the following characteristics:\n\n\n1   The current close is lower than the previous close\n2   The current high is higher than or equal to the highest high of the last n bars\n\n\nSee \nKeyReversalUp\n, \nKeyReversalUpAtSMA\n, \nKeyReversalDownAtSMA\n, \nKeyReversalUpAtEMA\n, \nKeyReversalDownAtEMA\n.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\nperiod Number of bars included in the calculations\n\n\nReturn value\n\n\ndouble\n\n\n0 \u2013 No reversal information available\n1 \u2013 Reversal information available\n\n\nUsage\n\n\nKeyReversalDown(int period)\nKeyReversalDown(IDataSeries inSeries, int period)\nKeyReversalDown(int period)[int barsAgo]\nKeyReversalDown(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nExample\n\n\n// Look for a short entry\nif (KeyReversalDown(10)[0] == 1)\nPrint(\"A short reversal formation has occurred.\");\n\n\n\n\nKeyReversalUpAtSMA\n\n\nDescription\n\n\nKeyReversalUpAtSMA searches within a predefined number of periods to find turning points with the following characteristics:\n\n\n1   The current close is higher than the previous close\n2   The current low is smaller than or equal to the lowest low within n bars\n3   The current low has touched or breached an SMA\n\n\nSee \nKeyReversalUp\n, \nKeyReversalDown\n, \nKeyReversalDownAtSMA\n, \nKeyReversalUpAtEMA\n, \nKeyReversalDownAtEMA\n.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nSMAperiod Number of periods included in the calculation of the SMA\n\n\nReturn value\n\n\ndouble\n\n\n0 \u2013 No reversal information\n1 \u2013 Reversal information found\n\n\nUsage\n\n\nKeyReversalUpAtSMA(int period, int SMAperiod)\nKeyReversalUpAtSMA(IDataSeries inSeries, int period, int SMAperiod)\nKeyReversalUpAtSMA(int period, int SMAperiod)[int barsAgo]\nKeyReversalUpAtSMA(IDataSeries inSeries, int period, int SMAperiod)[int barsAgo]\n\n\n\n\nExample\n\n\n// Look for a long entry\nif (KeyReversalUpAtSMA(10)[0] == 1)\nPrint(\"A long reversal formation has occurred.\");\n\n\n\n\nKeyReversalDownAtSMA\n\n\nDescription\n\n\nKeyReversalDownAtSMA searches within a predefined number of periods to find a turning point with the following characteristics:\n\n\n1   The current close is lower than the previous close\n2   The current high is higher than or equal to the highest high within the last n periods\n3   The current high has touched or breached an SMA\n\n\nSee \nKeyReversalUp\n, \nKeyReversalDown\n, \nKeyReversalUpAtSMA\n, \nKeyReversalUpAtEMA\n, \nKeyReversalDownAtEMA\n.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nSMAperiod Number of periods included in the SMA calculation\n\n\nReturn value\n\n\ndouble\n\n\n0 \u2013 No reversal formation found\n1 \u2013 Reversal formation present\n\n\nUsage\n\n\nKeyReversalDownAtSMA(int period, int SMAperiod)\nKeyReversalDownAtSMA(IDataSeries inSeries, int period, int SMAperiod)\nKeyReversalDownAtSMA(int period, int SMAperiod)[int barsAgo]\nKeyReversalDownAtSMA(IDataSeries inSeries, int period, int SMAperiod)[int barsAgo]\n\n\n\n\nExample\n\n\n// Search for a short entry\nif (KeyReversalDownAtSMA(10)[0] == 1)\nPrint(\"A short reversal formation has occurred.\");\n\n\n\n\nKeyReversalUpAtEMA\n\n\nDescription\n\n\nKeyReversalUpAtEMA searches within a predefined number of periods to find a reversal formation with the following characteristics:\n\n\n1   The current close is higher than the previous close\n2   The current low is smaller than or equal to the lowest low within the last n bars\n3   The current low has touched or breached an EMA\n\n\nSee \nKeyReversalUp\n, \nKeyReversalDown\n, \nKeyReversalUpAtSMA\n, \nKeyReversalDownAtSMA\n, \nKeyReversalDownAtEMA\n.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nEMAperiod Number of periods included in the EMA calculation\n\n\nReturn value\n\n\ndouble\n\n\n0 \u2013 No reversal information found\n1 \u2013 Reversal information found\n\n\nUsage\n\n\nKeyReversalUpAtEMA(int period, int EMAperiod)\nKeyReversalUpAtEMA(IDataSeries inSeries, int period, int EMAperiod)\nKeyReversalUpAtEMA(int period, int EMAperiod)[int barsAgo]\nKeyReversalUpAtEMA(IDataSeries inSeries, int period, int EMAperiod)[int barsAgo]\n\n\n\n\nExample\n\n\n// Search for a long entry\nif (KeyReversalUpAtEMA(10)[0] == 1)\nPrint(\"A long reversal formation has occurred.\");\n\n\n\n\nKeyReversalDownAtEMA\n\n\nDescription\n\n\nKeyReversalDownAtEMA searches within a predefined number of periods to find a reversal formation with the following characteristics:\n\n\n1   The current close is lower than the previous close\n2   The current high is larger than or equal to the highest high of the last n bars\n3   The current high has touched or breached an EMA\n\n\nSee \nKeyReversalUp\n, \nKeyReversalDown\n, \nKeyReversalUpAtSMA\n, \nKeyReversalDownAtSMA\n, \nKeyReversalUpAtEMA\n.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nEMAperiod Number of periods used to calculate the EMA\n\n\nReturn value\n\n\ndouble\n\n\n0 \u2013 No reversal formation found\n\n\n1 \u2013 Reversal formation found\n\n\nUsage\n\n\nKeyReversalDownAtEMA(int period, int EMAperiod)\nKeyReversalDownAtEMA(IDataSeries inSeries, int period, int EMAperiod)\nKeyReversalDownAtEMA(int period, int EMAperiod)[int barsAgo]\nKeyReversalDownAtEMA(IDataSeries inSeries, int period, int EMAperiod)[int barsAgo]\n\n\n\n\nExample\n\n\n// Search for a short entry\nif (KeyReversalDownAtEMA(10)[0] == 1)\nPrint(\"A short reversal formation has occurred.\");\n\n\n\n\nKlingerVolumeOscillator\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe KlingerVolumeOscillator is a technical indicator that was developed by Stephen Klinger in order to determine long-term trends of the money flow. At the same time, the indicator is sensitive enough to also identify short-term fluctuations, thereby giving the trader the possibility to detect even short-term reversals in the market. The indicator compares the influent and effluent volume of an instrument with its price movements, and is outputted as an oscillator. A signal line (13-period moving average) is used for generating signals. Divergences in the KlingerVolumeOscillator in comparison to the price movement can also be used for entry and exit decisions. A bullish signal is formed when the KlingerVolumeOscillator start to rise while the price continues to fall; the opposite goes for a bearish signal.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nLinear Regression\n\n\nDescription\n\n\nLinear Regression is used to determine trends. Here, the prices are set as dependent variables, and time is set as an independent variable. Using the method for determination of the smallest square, a straight line is placed through the price movements in such a way that the distance between the prices and the line deviates as little as possible. Using this method also establishes a trend between two points in time. The regression line can be found in the middle of the price channel, and the indicator provides the end values of multiple linear regression trend lines. Each point along this indicator is therefore an end value of a linear regression trend line. What results is quite similar to a smoothing average, with the difference that the regression line exhibits less lag.\n\n\nSee \nR-Squared\n, \nLinRegSlope\n, \nLinRegIntercept\n.\n\n\nFurther information\n\n\nhttp://www.vtad.de/sites/files/forschung/vtad_Award_2011_Joachim_Lenz_Veroeffentlichung.pdf\n\n\nInterpretation\n\n\nThe linear regression indicator is used as a prognosis tool for the future developments of the instrument. If the prices are rising or falling steadily, then it can be expected that they will return to a more realistic/reasonable level. In other words: the indicator shows where the price should be, a deviation from the regression is assumed to be short-lived and to be corrected soon.\n\n\nUsage\n\n\nLinReg(int period)\nLinReg(IDataSeries inSeries, int period)\nLinReg(int period)[int barsAgo]\nLinReg(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nLinReg\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Show the current values of the regression line\nPrint(\"The current value for the linear regression is: \" + LinReg(14)[0]);\n\n\n\n\nLinRegIntercept\n\n\nDescription\n\n\nThe Linear Regression Intercept outputs the value of the regression constant, i.e. the mathematical intersection of where the regression line meets the price axis.\n\n\nA straight line can be accurately determined with the help of the slope and intercept values.\n\n\nSee \nLinear Regression\n, \nR-Squared\n \nLinRegSlope\n.\n\n\nInterpretation\n\n\nThe indicator is not used by itself, but is simply a component of trading systems that analyze trade trends with the help of the linear regression.\n\n\nUsage\n\n\nLinRegIntercept(int period)\nLinRegIntercept(IDataSeries inSeries, int period)\nLinRegIntercept(int period)[int barsAgo]\nLinRegIntercept(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nLinRegIntercept\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Show current value\nPrint(\"The current value of the regression constant is: \" + LinRegIntercept(14)[0]);\n\n\n\n\nLinRegSlope\n\n\nDescription\n\n\nThe Linear Regression Slope outputs the slope of the linear regression line, and is a measurement of the regression line\u2019s \u201celevation\u201d.\n\n\nSee \nLinear Regression\n, \nR-Squared\n, \nLinRegIntercept\n.\n\n\nInterpretation\n\n\nSimply put: in an uptrend, the elevation is positive and facing upwards. The opposite applies to downtrends.\nThis indicator is not very useful for determining overbought or oversold areas, but can be used to measure the strength of a trend. It should be used in combination with other indicators to identify potential entries.\n\n\nUsage\n\n\nLinRegSlope(int period)\nLinRegSlope(IDataSeries inSeries, int period)\nLinRegSlope(int period)[int barsAgo]\nLinRegSlope(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nLinRegSlope\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Current value for the slope:\nPrint(\"The current value for the inclination of the linear regression line is: \" + LinRegSlope(14)[0]);\n\n\n\n\nLowestLowIndex()\n\n\nDescription\n\n\nLowestLowIndex delivers the index of the bar with the lowest low within a predefined number of periods.\n\n\nDifferently to GetSerieLowestValue(), one can display this indicator within a chart.\n\n\nSee \nHighestHighPrice()\n, \nHighestHighIndex()\n, \nLowestLowPrice()\n,\n\nGetSerieHighestValue()\n, \nGetSerieLowestValue()\n.\n\n\nUsage\n\n\nLowestLowIndex(int BarsBack)\nLowestLowIndex(int BarsBack)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nLowestLowIndex\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameter\n\n\nBarsBack Number of periods within which the highest high shall be searched for\n\n\nVisualization\n\n\n\n\nExample\n\n\n// How many bars back is the lowest low of the last 14 bars located?\nPrint(\"The lowest low of the last 14 bars was \" + LowestLowIndex(14)[0] + \" bars ago.\");\n\n\n\n\nLowestLowPrice()\n\n\nDescription\n\n\nLowestLowPrice delivers the value of the lowest low within a predefined number of periods.\n\n\nUnlike the GetSerieLowestValue(), this indicator can be viewed within the chart.\n\n\nSee \nHighestHighPrice()\n, \nHighestHighIndex()\n, \nLowestLowIndex\n,\n\nGetSerieHighestValue()\n, \nGetSerieLowestValue()\n.\n\n\nUsage\n\n\nLowestLowPrice(int BarsBack)\nLowestLowPrice(int BarsBack)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nLowestLowPrice\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameter\n\n\nBarsBack Number of periods within which the low will be searched for\n\n\nVisualization\n\n\n\n\nExample\n\n\n// What value did the lowest low of the last 14 periods have?\nPrint(\"The lowest low of the last 14 bars is \" + LowestLowPrice(14)[0]);\n\n\n\n\nMACD\n\n\nDescription\n\n\nThe Moving Average Convergence-Divergence (MACD) indicator, developed by Gerald Appel in the late 70s, is one of the simplest, most effective momentum indicators out there. The MACD makes two trend-following indicators, moving averages, average, become a momentum oscillator by subtracting the longer moving average from the shorter moving average. As a result of this, the MACD offers great advantages: trend following and momentum. The MACD moves above and below the zero line as the moving averages converge, cross and diverge again. Signal line crossovers, centerline crossovers and divergences are things that traders can keep an eye out for to generate signals. Since the MACD is unbounded, it is not especially useful for identifying overbought or oversold levels. The MACD line is the 12-day Exponential Moving Average (EMA) minus the 26-day EMA, and closing prices are used for these moving averages. A 9-day EMA of the MACD line is plotted with the indicator acting as a signal line and identifying turns. The MACD histogram shows the difference between the MACD and its 9-day EMA, i.e. the signal line. When the MACD line is above its signal line, the histogram is positive, and vice versa when the MACD line is below its signal line.\n\n\nThe typical settings used with the MACD are the values 12, 26 and 9. However, other values can also be used depending on the trading style and goals in mind.\n\n\nInterpretation\n\n\nAs its name implies, the MACD is all about the convergence and divergence of the two moving averages. Convergence occurs when the moving averages move towards each other. Divergence occurs when the moving averages move away from each other. The shorter moving average (12-day) is faster and responsible for most MACD movements. The longer moving average (26-day) is slower and less reactive to price changes in the underlying security.\n\n\nThe MACD line oscillates above and below the zero line, which is also known as the centerline. These crossovers signal that the 12-day EMA has crossed the 26-day EMA. The direction, of course, depends on the direction of the moving average cross. Positive MACD indicates that the 12-day EMA is above the 26-day EMA. Positive values increase as the shorter EMA diverges further from the longer EMA.\u00a0This means upside momentum is increasing.\u00a0Negative MACD values indicate that the 12-day EMA is below the 26-day EMA. Negative values increase as the shorter EMA diverges further below the longer EMA.\u00a0This means downside\u00a0\nmomentum\n\u00a0is increasing. Signal line crossovers are the most common MACD signals. The signal line is a 9-day EMA of the MACD line. As a moving average of the indicator, it trails the MACD and makes it easier to spot MACD turns. A bullish crossover occurs when the MACD turns up and crosses above the signal line. A bearish crossover occurs when the MACD turns down and crosses below the signal line. Crossovers can last a few days or a few weeks, it all depends on the strength of the move.\n\n\nDue diligence is required before relying on these common signals. Signal line crossovers at positive or negative extremes should be viewed with caution. Even though the MACD does not have upper and lower limits, chartists can estimate historical extremes with a simple visual assessment. It takes a strong move in the underlying security to push momentum to an extreme. Even though the move may continue, momentum is likely to slow and this will usually produce a signal line crossover at the extremities. Volatility in the underlying security can also increase the number of crossovers.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/MACD\n\n\nUsage\n\n\nMACD(int fast, int slow, int smooth)\nMACD(IDataSeries inSeries, int fast, int slow, int smooth)\n\n//For the value of the MACD line\nMACD(int fast, int slow, int smooth)[int barsAgo]\nMACD(IDataSeries inSeries, int fast, int slow, int smooth)[int barsAgo]\n\n//For the value of the signal line\nMACD(int fast, int slow, int smooth).Avg[int barsAgo]\nMACD(IDataSeries inSeries, int fast, int slow, int smooth).Avg[int barsAgo]\n\n//For the difference between the MACD and the signal line\nMACD(int fast, int slow, int smooth).Diff[int barsAgo]\nMACD(IDataSeries inSeries, int fast, int slow, int smooth).Diff[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nMACD\n(12,26,9)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nfast Number of periods for the fast EMA calculation\n\n\nslow Number of periods for the slow EMA calculation\n\n\nsmooth Number of periods for the EMA calculation of the signal line\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Show the current values for the MACD\nPrint(\"The current value for the MACD line is: \" + MACD(12,26,9)[0]);\nPrint(\"The current value for the signal line is: \" + MACD(12,26,9).Avg[0]);\nPrint(\"The difference between the MACD and the signal line is: \" + MACD(12,26,9).Diff[0]);\n\n\n\n\nMAEnvelopes\n\n\nDescription\n\n\nThese Moving Average Envelopes are percentage-based envelopes placed above and below a moving average. The moving average forms the base for this indicator, and can be a either simple or exponential moving average. Each MA envelope is set the same percentage above or below the moving average, thereby creating parallel bands that follow price action. Moving Average Envelopes can be used as a trend-following indicator with a moving average as the base. But this indicator is not limited to just trend following: the envelopes can also be used for spotting overbought and oversold levels when the trend is relatively flat.\n\n\nIndicators based on channels, bands and envelopes are intended to encompass most price action, which is why moves above or below the envelopes deserve attention. Trends often start with sharp moves in one direction \u2013 a surge above the upper envelope shows extraordinary strength, while a dive below the lower envelope exhibits extraordinary weakness. Strong moves such as these can signal the end of one trend and the start of another.\n\n\nWith a \nmoving average\n as the foundation, Moving Average Envelopes are a trend-following indicator. As with moving averages, the envelopes lag price action. The direction of the moving average dictates the direction of the channel, so generally, when the channel moves lower, a downtrend exists, and when the channel goes higher, an uptrend is present. When the channel moves sideways, this signifies that the trend is flat.\n\n\nOccasionally, it happens that a strong trend does not establish itself after an envelope break, and prices move into a trading range. Trading ranges such as these are characterized by a relatively flat moving average. These envelopes can then be used to spot overbought and oversold levels. A move above the upper envelope shows an overbought situation; a move below the lower envelope signals an oversold situation.\n\n\nUsage\n\n\nMAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period)\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period)\n\n//For the upper band\nMAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period).Upper[int barsAgo]\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period).Upper[int barsAgo]\n\n//For the middle band\nMAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period).Middle[int barsAgo]\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period).Middle[int barsAgo]\n\n//For the lower band\nMAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period).Lower[int barsAgo]\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period).Lower[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nMAEnvelopes\n(14,SMA,1.5)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\nv Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nenvelopePercentage Distance of the upper and lower bands from the middle line in percent\n\n\nmaType Type of moving average used, possible choices are:\n-   EMA\n-   HMA\n-   SMA (default)\n-   TMA\n-   TEMA\n-   WMA\n\n\nVisualization\n\n\n\n\nUsage\n\n\n//Value output for the upper band\nPrint(\"Upper band of the MA Envelope: \" + MAEnvelopes(1.5, MAEnvelopesMAType.SMA, 14).Upper[0]);\n\n//Value output for the middle band\nPrint(\"Middle band of the MA Envelope: \" + MAEnvelopes(1.5, MAEnvelopesMAType.SMA, 14).Middle[0]);\n\n//Value output for the lower band\nPrint(\"Lower band of the MA Envelope: \" + MAEnvelopes(1.5, MAEnvelopesMAType.SMA, 14).Lower[0]);\n\n\n\n\nMarketPhases\n\n\nThe installation of the Dow Theory Standard or Professional Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe Market Phases Indicator is another important component of the Technical Analysis Package, and is based on integrated trend detection for the various relevant trading market phases.\n\n\nThe market phases are defined according to the book series \u201cDer H\u00e4ndler\u201d (\u201cThe Trader\u201d) by Michael Voigt.\n\n\nImportant tip\n \nMarketPhases indicators  are very history sensitive and need at least up to 2000 intraday candles to see good results.\n\n\nPhase 3:\n\n\nThe market is located far away from the movement; a correction is imminent.\n\n\n\n\nPhase 4:\n\n\nThe market is in correction mode. The original trend direction has not yet resumed. During the uptrend, further lows may occur, and in a downtrend, further highs may occur.\n\n\n\n\nPhase 5:\n\n\nThe market is coming out of the correction and will resume its trend direction.\n\n\n\n\nPhase 5+\n\n\nThe market is in Phase 5. In addition, the sub-trend is confirming a 1-2-3 pattern.\n\n\n\n\nPhase 5+ (Prom Queen)\n\n\nThe term Prom Queen is also taken from the book series \u201c\nDer H\u00e4ndler\n\u201d. A 5+ trend phase is classified by an uptrend correction move running up to point 2. The correction zone is marked in grey in the following image.\n\n\n\n\nMarket phases 1, 2, 6, and 9 are not relevant for successful trading.\n\n\nDepiction in the chart\n\n\nNo parameters are required.\n\n\n\n\nUsage in AgenaScript\n\n\nThe indicator provides the following values for the market phases:\n\n\nPhase 3: 3\n\n\nPhase 4: 4\n\n\nPhase 5: 5\n\n\nPhase 5+ 5.1\n\n\nProm Queen 5.2\n\n\nIn a downtrend, the values are prefixed with a \u201c-\u201c sign. If the market phase is not defined, then the value 0 is returned.\n\n\nMarketPhases(int trendSize)[barsAgo]\n\n\n\n\nParameter\n\n\ntrendsize: trend size from 0 .. 3\n\n\nCaution:\n\n\nFor a comparison of double values such as: \nif\n (\nMarketPhases\n(1)[0] == 5.1) ...we recommend that you use the following instead:\n\n\nbool goLong = Math.Abs(MarketPhases(1)[0] - 5.1) <= Double.Epsilon;\n\n\n\n\nUsage within the Condition Escort\n\n\nWhen using market phases within AgenaScript, the indicator provides a data series that has the aforementioned values of +/-3, 4, 5, 5.1, 5.2.\n\n\nYou can use the indicator as a filter by using the signals of other indicators when they are inside the market phases 5.1 or 5.2(long):\n\n\n\n\nImportant tip\n \nIf you want to use  MarketPhases (also Pro and Advanced version) indicator in conjunction with the scanner, the following settings are required:\n\n\n\n\nChart settings:\n\n\nBars count\n\n\n\n\nTime frame\n\n\n\n\n\n\nScanner column settings:\n\n\n\n\nBars required\n\n\nTime frame\n\n\n\n\nThese chart and column settings should be identical.  \n\n\n\n\n\n\nMarketPhases Pro Description\n\n\nPhase5Level\n\nHow far the price correction must be to become a valid market phase 5.\n\n\nPhase4Level\n\nHow far the price correction must be to become a valid market phase 4.\n\n\nMarketValue\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator compares the value of a market with the current price of gold or the dollar index. This means that markets are placed in relation to the gold price or the dollar, whereby over- and undervaluation can be determined very well in instruments. \n\n\nA low MarketValue means that a market is cheap relative to gold/dollar index; vice versa, a higher value means that the market is relatively expensive. \n\n\nIn general, commodities should be compared to the gold price, and financials to the dollar index. However, depending on the market environment, it may be useful to deviate from this rule.\n\n\nThe following parameters are available for the MarketValue: \n\n\n\n\n\n\nCompareTo:\n select [Gold/Dollar Index] depending on which market the current symbol should be placed in relation to. \n\n\n\n\n\n\nEMA1:\n this is a period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the default settings. (Default value = 21) \n\n\n\n\n\n\nEMA2:\n this is an EMA period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the standard settings. (Default value = 3)\n\n\n\n\n\n\nIt is not yet possible to use the MarketValue indicator in the ConditionEscort, since a multi-instrument indicator cannot be depicted there. Since the MarketValue requires the price data from the current chart and also from gold i.e. the dollar index, this is a multi-instrument indicator, which, as mentioned, currently cannot be represented in the ConditionEscort.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nMomentum (MOM)\n\n\nDescription\n\n\nMomentum is one of the most popular indicators available, the first choice of many traders. This relatively simple indicator is so popular because it measures the attenuation of the motion without the need for complex formulas. The momentum indicator represents a whole family of indicators that measure a movement\u2019s strength. Other representatives in this case are the RSI or CCI, and so on. In the illustration below, the indicator is a graph that oscillates around a zero point. There is no fixed scale in percentage terms, and the value can be quite far removed from the zero point; this usually happens when the price makes an exceptionally strong leap, which is why the indicator predominantly shows the direction in which the current prices are moving towards.\n\n\nInterpretation\n\n\nEntry signals are generated when the indicator crosses the zero line.\n\n\nSee \nROC\n.\n\n\nFurther information\n\n\nhttp://de.wikipedia.org/wiki/Momentum_%28Chartanalyse%29\n\n\nUsage\n\n\nMomentum(int period)\nMomentum (IDataSeries inSeries, int period)\nMomentum (int period)[int barsAgo]\nMomentum (IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nMomentum\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the values for the momentum indicator.\nPrint(\"The current value for the momentum is \" + Momentum(14)[0]);\n\n\n\n\nMoney Flow Index (MFI)\n\n\nDescription\n\n\nThe MFI is an oscillator that makes use of both volume and price to measure buying and selling pressure. MFI, which was developed by Gene Quong and Avrum Soudack, is also known as volume-weighted \nRSI\n. MFI starts with the typical price for each period. Money flow is then positive when this aforementioned typical price increases (buying pressure) and negative when it decreases (selling pressure). A ratio of positive-negative money flow is then inserted into an RSI formula to come up with an oscillator that fluctuates between 0 and 100. The MFI, which is a momentum oscillator linked to volume, is best used for identifying reversals and price extremes with a variety of different signals.\n\n\nInterpretation\n\n\nThe MFI is interpreted similarly to the RSI indicator. The MFI\u2019s decisive factor is much stronger than the RSI\u2019s when it comes to trend direction, due to the fact that volume is included in the calculation.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Money_Flow_Index\n\n\nUsage\n\n\nMFI(int period)\nMFI(IDataSeries inSeries, int period)\nMFI(int period)[int barsAgo]\nMFI(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nMFI\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Current MFI value\nPrint(\"The current value for the MFI is: \" + MFI(14)[0]);\n\n\n\n\nMoving Averages\n\n\nVariants\n\n\nDEMA\n - Double Exponential Moving Average\n\n\nEMA\n - Exponential Moving Average\n\n\nHMA\n - Hull Moving Average\n\n\nKAMA\n - Kaufman's Adaptive Moving Average\n\n\nMAMA\n - Mesa Adaptive Moving Average\n\n\nSMA\n - Simple Moving Average\n\n\nTEMA\n - Triple Exponential Moving Average\n\n\nTMA\n - Triangular Moving Average\n\n\nTRIX\n - Triple Exponential Moving Average\n\n\nT3\n - Triple Exponential Moving Average\n\n\nVMA\n - Variable Moving Average\n\n\nVWMA\n - Volume Weighted Moving Average\n\n\nWMA\n, \nVMA\n - Weighted Moving Average\n\n\nZLEMA\n - Zero Lag Exponential Moving Average\n\n\nInterpretation\n\n\nThe arithmetic average, also known as the moving average or simple moving average, smoothes the progression of the price for better trend detection. Moving averages are trend-following indicators; they follow the course and do not lead. IsSerieRising averages show uptrends, whereas falling averages display downtrends.\nBy varying the period input, the time delay of the average can be changed. The smaller the period interval, the quicker the reaction time will be, but as a consequence, the smoothing effect will also be diminished. The opposite is true when increasing the period selection. The most popular choices are: 38, 50, 100 and 200 days. The 200-day moving average in particular has a significant importance for institutional traders, since it displays the long-term trend. 200 trading days are equal to a trading year. When the 200 MA is broken, then buy/sell signals are generated.\n\n\nApplications\n\n\nCrossing of two averages\n\n\nThe integration of multiple moving averages is used to identify trend sequences and minimize the number of false signals. When two arithmetic averages are used, whereby one is a short-term and the other a long-term, more interesting signals can be generated. One such application can be seen with Richard Donchian\u2019s methodologies, such as using the 5 and 20-day averages.\nThe Double Crossover Method generates signals in the following way:\n\n\nIf the short-term average crosses the long-term average from below, this is called a Golden Cross, and a buy signal is generated. Higher trading volume reinforces the quality of the signal. The long-term average works as a support line in an uptrend.\n\n\nIf the short-term average crosses the long-term average from above, this is called a Death Cross. It generates a sell signal. Higher trading volume reinforces the signal quality. In a downtrend, the long-term average functions as a resistance line.\n\n\nCrossing of three moving averages\n\n\nAnother method is to use three moving averages (Triple Crossover Method). This method was presented by R.C Allen, who used the 4, 9, and 18-day averages and suggested that a trend change is hinted at when the 4MA crosses the 9MA from bottom to top. An entry is only recommended when all lines are above the 18-day period. An exit is initiated when the 4-day MA moves below the 9-day MA.\n(Source: VTAD)\n\n\nDEMA - Double Exponential Moving Average\n\n\nDescription\n\n\nThe Double Exponential Moving Average is a technical indicator created by Patrick Mulloy. The calculation hereof is done using a simple as well as a double exponential moving average.\n\n\nInterpretation\n\n\nThe DEMA is a fast-working moving average that reacts quicker to market changes. The DEMA may be used as a stand-alone indicator or in tandem with other indicators.\nThe general interpretations are the same as for regular moving averages.\n\n\nUsage\n\n\nDEMA(int period)\nDEMA(IDataSeries inSeries, int period)\nDEMA(int period)[int barsAgo]\nDEMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDEMA\n(20)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nCalculation\n\n\nValue.Set(2 * EMA(InSeries[0], Period)[0] - EMA(EMA(InSeries[0], Period), Period)[0]);\n\n\n\n\nExample\n\n\n//Output the values for the DEMA\nPrint(\"The current DEMA value is \" + DEMA(20)[0]);\n\n\n\n\nEMA - Exponential Moving Average\n\n\nDescription\n\n\nExponential moving averages work to reduce lag by weighting recent prices more heavily. The weighting given to the most recent price depends on the number of periods in the moving average. Calculating an exponential moving average involves three steps. 1. Calculate the simple moving average. An exponential moving average (EMA) must start somewhere, therefore a simple moving average is used as the previous period's EMA in the beginning calculation. 2. Calculate the weighting multiplier. 3. Calculate the EMA.\n\n\nInterpretation\n\n\nThe EMA is used by many traders in the most varying of timeframes. It is especially meaningful within the 15, 60 and 240-minute charts. The EMA 200 line is also especially popular with traders.\n\n\nIf the price rises sharply and moves away quickly from the respective EMA line, it is possible to enter countertrend positions in order to profit from the potential return to the moving average.\nGeneral interpretations of the moving averages also apply to the EMA.\n\n\nUsage\n\n\nEMA(int period)\nEMA(IDataSeries inSeries, int period)\nEMA(int period)[int barsAgo]\nEMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nEMA\n(20)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nCalculation\n\n\nValue.Set(ProcessingBarIndex == 0 ? InSeries[0] : InSeries[0] * (2.0 / (1 + Period)) + (1 - (2.0 / (1 + Period))) * Value[1]);\n\n\n\n\nExample\n\n\n//Output the value for the EMA\nPrint(\"The current EMA value is \" + EMA(20)[0]);\n\n\n\n\nEMA MTF (MultiTimeFrame)\n\n\nDescription\n\n\nThe EMA MTF indicator is a multi-timeframe version of the standard EMA indicator.\nThis indicator basically allows you to make calculationgs in a different timeframe than that of the current chart.\n\n\nFor more information, see \nEMA\n.\n\n\nAlso see \nBollingerMTF\n, \nSmaMTF\n.\n\n\nVisualization\n\n\nA 5-minute chart with an EMA(20) calculated with hourly bars as the underlying input:\n\n\n\n\nHMA - Hull Moving Average\n\n\nDescription\n\n\nThe Hull Moving Average, invented by Alan Hull, is a fast-working moving average that gets rid of almost all delays/lags (zero lag). The calculation is carried out using several weighted moving averages, thereby partially reducing the smoothing effect. Hull\u2019s methodology uses square roots of the period instead of the actual period itself.\n\n\nInterpretation\n\n\nThe same interpretations as for the moving averages apply to the HMA, the only major distinction being the reduced lag. See \nMoving Averages\n.\n\n\nUsage\n\n\nHMA(int period)\nHMA(IDataSeries InSeries, int period)\nHMA(int period)[int barsAgo]\nHMA(IDataSeries InSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nHMA\n(21)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nCalculation\n\n\ndouble value1 = 2 * WMA(InSeries, (int)(Period / 2))[0];\ndouble value2 = WMA(InSeries, Period)[0];\ndiffSeries.Set(value1 - value2);\nValue.Set(WMA(diffSeries, (int) Math.Sqrt(Period))[0]);\n\n\n\n\nExample\n\n\n//Output the value for the HMA\nPrint(\"The current HMA value is \" + HMA(21)[0]);\n\n\n\n\nKAMA - Kaufman's Adaptive Moving Average\n\n\nDescription\n\n\nThe KAMA is based on an EMA in which a trend efficiency ratio controls the weight of future price changes. This efficiency ratio (the squared efficiency factor) is a measure that can also be used by itself. The trend efficiency is the ratio of the absolute price change from the start to the end of the period, and the total of the absolute daily price changes. At higher trending efficiencies (i.e. straight price movements) without too much variation, the extra price carries a higher weighting, according to a shorter day period setting. Lower trending frequencies carry a smaller weighting.\n\n\nInterpretation\n\n\nKaufman mentions that a rising KAMA value can be interpreted as a buying signal, whilst falling KAMA values assume the prices to be falling.\nKaufman also defines a maximum and minimum value for the calculation of the smoothing components. The efficiency ratio is converted using specified maximum and minimum values, which are applied to newly incoming price changes. Kaufman uses 2 (short period) as a minimum value and 30 (long period) as a maximum value. The number of days for the determination of the efficiency ratio is one of the more important parameters for the KAMA.\n\n\nFor a more general interpretation of moving averages, please see the following chapter: \nMoving Averages\n.\n\n\nFurther information\n\n\nhttp://www.investor-verlag.de/boersenwissen/kama/\n\n\nUsage\n\n\nKAMA(int fast, int period, int slow)\nKAMA(IDataSeries inSeries, int fast, int period, int slow)\nKAMA(int fast, int period, int slow)[int barsAgo]\nKAMA(IDataSeries inSeries, int fast, int period, int slow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nKAMA\n(2,10,30)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nfast Short period\n\n\nslow Long period\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the Kaufman Moving Average(KAMA)\nPrint(\"The current value of the KAMA is \" + KAMA(2,10,30)[0]);\n\n\n\n\nMAMA - Mesa Adaptive Moving Average\n\n\nDescription\n\n\nThis automatically adapting moving average has a period length that is determined by means of various complex calculations. This complex indicator has its origins in publications by John Ehlers. Ehlers calculates cycles for the price movements to determine the length and intensity of single trend phases. Working with the length of the cycles, the weighting factor for the moving average can be established in several different ways.\n\n\nFAMA\n\nThis indicator is a second line \u2013 the name FAMA can be found in various publications. This line is similar to the underlying exponential moving average and can be used as a trigger line.\n\n\nInterpretation\n\n\nFor more concise information, we recommend that you read Ehler\u2019s paper.\n\n\nGeneral information about moving averages can be found here: \nMoving Averages\n.\n\n\nFurther information\n\n\nhttp://www.tradesignalonline.com/de/lexicon/view.aspx?id=MAMA+adaptive+Moving+Average\n\n\nUsage\n\n\nMAMA(double fastLimit, double slowLimit)\nMAMA(IDataSeries inSeries, double fastLimit, double slowLimit)\nMAMA(double fastLimit, double slowLimit)[int barsAgo]\nMAMA(IDataSeries inSeries, double fastLimit, double slowLimit)[int barsAgo]\n\n//Value of the Following Adaptive Moving Average (FAMA)\nMAMA(double fastLimit, double slowLimit).Fama[int barsAgo]\nMAMA(IDataSeries inSeries, double fastLimit, double slowLimit).Fama[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nMAMA\n(0.5,0.05)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nfastLimit Upper limit for the alpha value\n\n\nslowLimit Lower limit for the alpha value\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output values for (MAMA)\nPrint(\"The current value for the MAMA is \" + MAMA(0.5, 0.05)[0]);\n//Output values for (FAMA)\nPrint(\"The current value for the FAMA is \" + MAMA(0.5, 0.05).Fama[0]);\n\n\n\n\nSMA - Simple Moving Average\n\n\nDescription\n\n\nThe SMA is the most well-known average, representing the simplest method of displaying the trend direction in a chart. In mathematical terms, this is the arithmetic mean of a number of individual lengths. It is called \u201cmoving\u201d because to establish an average, the oldest value is always sacrificed to make space for the new incoming price change. Fundamentally speaking, the period length influences the intensity of the smoothing. Shorter periods (such as 10 days) will mean that the indicator follows the price changes quite closely.\nThe SMA has a few disadvantages, which is why several adaptations of this indicator have been developed in the last few years. One of the biggest disadvantages is the fact that the indicator tends to lag, and the equal weighting for all data inputs across time intervals.\nYou can find more general interpretations and meanings here: \nMoving Averages\n.\n\n\nFurther information\n\n\nhttp://www.forex-trading-online.de/indikatoren/simple-moving-average-sma\n\n\nhttp://vtadwiki.vtad.de/index.php/SMA#Average-Off-Berechnungsverfahren_.28MMA.29\n\n\nUsage\n\n\nSMA(int period)\nSMA(IDataSeries InSeries, int period)\nSMA(int period)[int barsAgo]\nSMA(IDataSeries InSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nSMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nCalculation\n\n\nValue.\nSet\n((last + InSeries[0] - InSeries[Period]) / Math.\nMin\n(ProcessingBarIndex, Period));\n\n\nExample\n\n\n//Output of the SMA value\nPrint(\"The current SMA value is \" + SMA(14)[0]);\n\n\n\n\nSMA MTF (MultiTimeFrame)\n\n\nDescription\n\n\nThe SMA MTF \u2013 as is true for the other multi-timeframe indicator variations \u2013 allows traders to display the SMA of a specific timeframe on a chart of a different timeframe.\n\n\nSee \nBollingerMTF\n, \nEmaMTF\n.\n\n\nVisualization\n\n\nThe image shows a 5-minute chart with an SMA (14) calculated on 4-hour bars\n\n\n\n\nSMMA - Smoothed Moving Average\n\n\nDescription\n\n\nThe Smoothed Moving Average is combined from both Simple Moving Average and the Exponential Moving Average. Generally speaking, it is only used for higher period amounts/inputs. It normally has roughly half of the value of an EMA, meaning that an SMMA(20) is closer to an EMA(40).\n\n\nInterpretation\n\n\nFor more general information about moving averages, please see \nMoving Averages\n.\n\n\nThe SMMA is often used with the \nSuperTrend\n indicator.\n\n\nFurther information\n\n\nhttp://www2.wealth-lab.com/wiki/SMMA.ashx\n\n\nUsage\n\n\nSMMA(int period)\nSMMA(IDataSeries inSeries, int period)\nSMMA(int period)[int barsAgo]\nSMMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nSMMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the SMMA\nPrint(\"The current SMMA value is \" + SMMA(14)[0]);\n\n\n\n\nTEMA - Triple Exponential Moving Average\n\n\nDescription\n\n\nThe TEMA is combined from a single, a double and a triple EMA. This combo improves the delay between the indicator and price movements. The Triple Exponential Moving Average is quite efficient at smoothing price changes.\n\n\nYou can find more information about moving averages here: \nMoving Averages\n.\n\n\nUsage\n\n\nTEMA(int period)\nTEMA(IDataSeries inSeries, int period)\nTEMA(int period)[int barsAgo]\nTEMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nTEMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the Triple Exponential Moving Average\nPrint(\"The current TEMA value is \" + TEMA(14)[0]);\n\n\n\n\nTMA - Triangular Moving Average\n\n\nDescription\n\n\nThis specifically weighted average has an extra smoothing component. The weightings are not linear, but instead take on a triangular pattern. To demonstrate, the weighting for a 7-period average would be 1,2,3,4,3,2,1. More weight is given to the median value of the time series, and the newest and oldest data is given less weight.\n\n\nUsage\n\n\nTMA(int period)\nTMA(IDataSeries inSeries, int period)\nTMA(int period)[int barsAgo]\nTMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nTMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the TMA\nPrint(\"The current value for the TMA is \" + TMA(14)[0]);\n\n\n\n\nTRIX - Triple Exponential Moving Average\n\n\nDescription\n\n\nJack Hutson developed this TRIX indicator, which is a 1-day rate-of-change indicator. What this means is that day 2 is divided by day 1, day 3 by day 2 and so on and so forth, and this is then applied to a triple exponential moving average of the closing prices. This results in a zero line fluctuating oscillator which is used as trend indicator thanks to its stability.\n\n\nInterpretation\n\n\nA buy signal is created when the TRIX indicator crosses the zero line from bottom to top. A sell signal is generated when the zero line is broken in a downwards direction.\n\n\nUsage\n\n\nTRIX(int period, int signalPeriod)\nTRIX(IDataSeries inSeries, int period, int signalPeriod)\nTRIX(int period, int signalPeriod)[int barsAgo]\nTRIX(IDataSeries inSeries, int period, int signalPeriod)[int barsAgo]\n\n//For the signal line\nTRIX(int period, int signalPeriod).Signal[int barsAgo]\nTRIX(IDataSeries inSeries, int period, int signalPeriod).Signal[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nTRIX\n(14, 3)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nsignal period Number of bars included in the signal line calculation\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the TRIX EMA\nPrint(\"The current TRIX value is \" + TRIX(14, 3)[0]);\n\n//Output for the TRIX signal line\nPrint(\"The current TRIX value is \" + TRIX(14, 3).Signal[0]);\n\n\n\n\nT3 - Triple Exponential Moving Average\n\n\nDescription\n\n\nThe Triple Exponential Moving Average T3 indicator (also dubbed the T3MA) is calculated by taking the weighted sums of a simple, a double, and a triple EMA. This produces a smooth, soft indicator line. The parameter tCount allows the trader to set the number of reiterations. The calculation is the same as the calculation for the DEMA, with the slight difference that here, a volume factor is also added. It accepts values between 0 and 1 (default: 0.7).\n\n\nUsage\n\n\nT3(int period, int tCount, double vFactor)\nT3(IDataSeries inSeries, int period, int tCount, double vFactor)\nT3(int period, int tCount, double vFactor)[int barsAgo]\nT3(IDataSeries inSeries, int period, int tCount, double vFactor)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nT3\n(14,3,0.7)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\ntCount Number of iterations for the smoothing\n\n\nvFactor Volume factor (multiplier)\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the value for the T3 indicator\nPrint(\"The current T3 value is \" + T3(14, 3, 0.7)[0]);\n\n\n\n\nVMA - Variable Moving Average\n\n\nDescription\n\n\nThis variation of an EMA automatically smoothes any fluctuations in the market, and its sensitivity grows as more weight is placed on more recent data.\n\n\nThe VMA attempts to get rid of the disadvantages of other moving averages by automatically regulating the smoothing constant. This is why the VMA can be implemented for most of the market conditions, and is in a few cases actually better than other averages.\n\n\nCaution\n\nThe VMA is not to be confused with the Volume Moving Average (VolMA)!\n\n\nUsage\n\n\nVMA(int period, int volatilityPeriod)\nVMA(IDataSeries inSeries, int period, int volatilityPeriod)\nVMA(int period, int volatilityPeriod)[int barsAgo]\nVMA(IDataSeries inSeries, int period, int volatilityPeriod)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nVMA\n(9,9)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nvolatility period Number of bars included in the calculation for the signal line\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output the VMA value\nPrint(\"The current VMA value is \" + VMA(9, 9)[0]);\n\n\n\n\nVWMA - Volume Weighted Moving Average\n\n\nDescription\n\n\nVWMA is a non-cumulated smoothed average that is weighted based on the various volumes for the periods.\n\n\nUsage\n\n\nVWMA(int period)\nVWMA(IDataSeries inSeries, int period)\nVWMA(int period)[int barsAgo]\nVWMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nVWMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the VWMA\nPrint(\"The current VWMA value is \" + VWMA(14)[0]);\n\n\n\n\nWMA - Weighted Moving Average\n\n\nDescription\n\n\nThe Weighted Moving Average is the most well-known of the weighted averages, and is implemented to identify and quickly react to price changes. Current prices are given higher weighting than older ones. In addition, bad signals in sideways markets are minimized. The WMA smoothes the price changes and makes more efficient trade identification possible.\n\n\nFurther information\n\n\nhttp://www.tradesignalonline.com/de/lexicon/view.aspx?id=Moving+Average+Weighted+%28WMA%29\n\n\nUsage\n\n\nWMA(int period)\nWMA(IDataSeries inSeries, int period)\nWMA(int period)[int barsAgo]\nWMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nWMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the WMA\nPrint(\"The current value of the WMA is \" + WMA(14)[0]);\n\n\n\n\nZLEMA - Zero Lag Exponential Moving Average\n\n\nDescription\n\n\nThe Zero Lag Exponential Moving Average is another variation of the EMA. Zero lag in this context signifies no delay, which means that the indicator adapts to the price changes more closely. The indicator does so by removing older price data and decreasing the cumulative effect in order to minimize the lag.\n\n\nFurther information\n\n\nFMLabs: \nhttp://www.fmlabs.com/reference/default.htm?url=ZeroLagExpMA.htm\n\n\nUsage\n\n\nZLEMA(int period)\nZLEMA(IDataSeries inSeries, int period)\nZLEMA(int period)[int barsAgo]\nZLEMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nZLEMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the Zero Lag Exponential Moving Average\nPrint(\"The current ZLEMA value is \" + ZLEMA(14)[0]);\n\n\n\n\nnBarsUp\n\n\nDescription\n\n\nThe nBarsUp indicator looks for a specified number of rising closing prices. Other conditions can also be added to the search, for example:\nConstantly rising bars, i.e. close < open (red candles)\nConstantly rising highs\nConstantly rising lows\n\n\nUsage\n\n\nNBarsUp(int barCount, bool BarUp, bool higherHigh, bool higherLow)\nNBarsUp(IDataSeries inSeries, int barCount, bool BarUp, bool higherHigh, bool higherLow)\nNBarsUp(int barCount, int barCount, bool BarUp, bool higherHigh, bool higherLow)[int barsAgo]\nNBarsUp(IDataSeries inSeries, int barCount, bool BarUp, bool higherHigh, bool higherLow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nNBarsUp\n(...)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\n1 \u2013 The condition applies\n0 \u2013 The condition does not apply\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nbarCount Number of successively rising closing prices\n\n\nbarUp Additional condition (true): each close must be higher than the open (green bar)\n\n\nhigherHigh Additional condition (true): continuously rising highs\n\n\nhigherLow Additional condition (true): continuously rising lows\n\n\nVisualization\n\n\n\n\nExample\n\n\n// Look for 3 successively rising closing prices\nif (NBarsUp(3, true, true, true)[0] == 1)\nPrint(\"3 successively higher closing prices have occurred.\");\n\n\n\n\nnBarsDown\n\n\nDescription\n\n\nThe nBarsDown indicator looks for a specified number of falling closing prices.\n\n\nThe following conditions can also be included in the search:\n-   Constantly falling bars\n-   Constantly falling highs\n-   Constantly falling lows\n\n\nUsage\n\n\nNBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(IDataSeries inSeries, int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]\nNBarsDown(IDataSeries inSeries, bool barCount, int BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nNBarsDown\n(...)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\n1 \u2013 The condition applies\n0 \u2013 The condition does not apply\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nbarCount Required number of successively lower closing prices\n\n\nbarDown Additional condition (true): each close must be lower than the open\n\n\nlowerHigh Additional condition (true): continuously falling highs\n\n\nlowerLow Additional condition (true); continuously falling lows\n\n\nVisualization\n\n\n\n\nExample\n\n\nNBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(IDataSeries inSeries, int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]\nNBarsDown(IDataSeries inSeries, bool barCount, int BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]\n\n\n\n\nOnBalanceVolume (OBV)\n\n\nDescription\n\n\nThis indicator displays the buy or sell pressure. For each day with a positive close, the volume is added cumulatively, and it is subtracted for days with a close that is smaller than the open.\n\n\nInterpretation\n\n\nGranville theorized that volume precedes price. OBV rises when volume on up days outpaces volume on down days. OBV falls when volume on down days is stronger. A rising OBV reflects positive volume pressure that can lead to higher prices. Conversely, falling OBV reflects negative volume pressure that can foreshadow lower prices. Granville noted in his research that OBV would often move before price. Expect prices to move higher if OBV is rising while prices are either flat or moving down. Expect prices to move lower if OBV is falling while prices are either flat or moving up.\n\n\nThe absolute value of OBV is not important. Chartists should instead focus on the characteristics of the OBV line. First define the trend for OBV. Second, determine if the current trend matches the trend for the underlying security. Third, look for potential support or resistance levels. Once broken, the trend for OBV will change and these breaks can be used to generate signals. Also notice that OBV is based on closing prices. Therefore, closing prices should be considered when looking for divergences or support/resistance breaks. And finally, volume spikes can sometimes throw off the indicator by causing a sharp move that will require a settling period. (Source: Stockcharts.com)\n\n\nUsage\n\n\nOBV()\nOBV(IDataSeries inSeries)\nOBV()[int barsAgo]\nOBV(IDataSeries inSeries)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nOBV\n()[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output the value for the On Balance Volume (OBV)\nPrint(\"The current value for the OBV is \" + OBV()[0]);\n\n\n\n\nOutsideBars\n\n\nDescription\n\n\nThe Outside Bars indicator is in fact an outdated version of the \nInsideBarsMT\n.\n\n\nP123\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe goal of the P123 indicator is to automatically detect a 1-2-3 pattern.\n\n\nThe following features make it stand out:\n\n\nInnovative recognition of 4 different trend sizes\n\n\nIt recognizes points 1, 2, and 3 at the bar\n\n\nRecognition of a trend continuation in the same direction as a trend break\n\n\nCompletely automatic adjustment of the search algorithm for all possible market conditions (no additional settings/inputs required)\n\n\nAdaptive workflow, adjusting to any volatility fluctuations\n\n\nClear overview while simultaneously displaying the various trend sizes\n\n\nCan be implemented within the Condition Escort and AgenaScript\n\n\nThe trend sizes are defined as follows:\n\n\nT0 = large trend\n\n\nT1 = medium-sized trend\n\n\nT2 = small trend\n\n\nT3 = smallest trend size\n\n\nThe smallest trend size (T3) cannot be detected on all trading instruments. Point 2 is often situated at the high of a bar, and point 3 at the low of the same bar. Depending on the timeframe and fluctuation range, T0 and T1 can be fused into one.\n\n\nThe indicator determines the selected timeframe of the chart, and then labels all trends and trend sizes accordingly. When there is low volatility, trend recognition is more sensitive, and the vice versa for higher volatility. The P123\u2019s adaptive methods make for a balanced recognition of trend sizes.\n\n\nImportant tip:\n\n\nIn some cases, the large trend (T0) cannot be seen with the naked eye, which may be due to the fact that not enough candles are visible within the chart. A minimum of 500 candles should be loaded to ensure this is not the case.\n\n\nInterpretation\n\n\nTrading signals often form at points 2 & 3: at point 3 as entry signals into a correction phase within a confirmed trend, and at point 2 as a sub-trend in the trend direction of the superior trade. The definition of a trend at points 1 to 3 can be read in \"\nDas gro\u00dfe Buch der Markttechnik\n\" by Michael Voigt (German only).\n\n\nVisualization in the chart\n\n\nThe parameter input settings define which trend sizes are shown in the chart and whether or not they are connected by a line.\n\n\nFor the default settings, the trend T2 is enabled by default.\n\n\nThe depiction in the chart may change with the changing market movements. If the market moves below the last point 3 and breaks the uptrend, the point is marked with a \u201c3?\u201d. The newly created low becomes the new point 2 and the last point 2 becomes point 1.\n\n\n\n\nThe parameter settings are not relevant for the display in the chart and are primarily used for the Condition Escort.\n\n\nThe depiction in the chart is primarily influenced by the settings \u201cDisplay 123\u201d and \u201cDisplay Lines\u201d.\n\n\n\n\nThe settings highlighted in yellow have no influence on the chart. No changes need to be made.\n\n\nUsage in AgenaScript\n\n\nWhen using P123 in AgenaScript, multiple public variables are available.\n\n\nA notation such as [barsAgo] is not available for this. Parameter occurrences are used in the following manner:\n\n\nP123\n(\nint\n trendSize). ... <<a public variable, see below>>\n\n\nP123\n(\nint\n trendSize, \nint\n occurrence). ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrend Direction\n\n\n1 = uptrend -1 = downtrend 0 = no trend\n\n\n\n\n\n\nIsTrendValid\n\n\ntrue = confirmed trend with a point sequence of at least 1 - 2 - 3 - 2\n\n\n\n\n\n\nfalse = no confirmed trend (phases 1 and 2)\n\n\n\n\n\n\n\n\nLastPoint\n\n\nlast point of a trend, 1, 2 or 3\n\n\n\n\n\n\nLastPointPrice\n\n\noutputs the price value of the last market point\n\n\n\n\n\n\nLastPointDateTime\n\n\noutputs the date and time of the last market point\n\n\n\n\n\n\nP1Price\n\n\noutputs the value of the last point 1\n\n\n\n\n\n\nP1DateTime\n\n\noutputs the value and date/time of the last point 1\n\n\n\n\n\n\nP2Price\n\n\noutputs the value of the last point 2\n\n\n\n\n\n\nP2DateTime\n\n\noutputs the time and date of point 2\n\n\n\n\n\n\nTempP3Price\n\n\nputputs the value of the temporary point \u201c3?\u201d\n\n\n\n\n\n\nTempP3DateTime\n\n\noutputs the time and date of the temporary point \u201c3?\u201d\n\n\n\n\n\n\nValidP3Price\n\n\noutputs the value of the last point 3. This is used as a stop placement. When this point is breached, a trend change is confirmed\n\n\n\n\n\n\nValidP3DateTime\n\n\noutputs the date and time for the last valid point 3\n\n\n\n\n\n\n\n\nParameters\n\n\ntrendsize: trend size from 0 .. 3\n\n\noccurrence the occurrences of the youngest to the oldest point\n\n\nExample\n\n\nprivate void PrintOutTrendProperties(int trendSize)\n{\n  // Reverse order of prints fills output window in correct order\n  Print(\"\");\n  Print(\"valid P3 date: \" + P123(trendSize).ValidP3DateTime);\n  Print(\"valid P3 price: \" + P123(trendSize).ValidP3Price);\n  Print(\"temp P3 date: \" + P123(trendSize).TempP3DateTime);\n  Print(\"temp P3 price: \" + P123(trendSize).TempP3Price);\n  Print(\"P2 date: \" + P123(trendSize).P2DateTime);\n  Print(\"P2 price: \" + P123(trendSize).P2Price);\n  Print(\"P1 date: \" + P123(trendSize).P1DateTime);\n  Print(\"P1 price: \" + P123(trendSize).P1Price);\n  Print(\"last point date: \" + P123(trendSize).LastPointDateTime);\n  Print(\"last point price: \" + P123(trendSize).LastPointPrice);\n  Print(\"last point: \" + P123(trendSize).LastPoint);\n  Print(\"is trend valid: \" + P123(trendSize).IsTrendValid);\n  Print(\"trend direction: \" + P123(trendSize).TrendDirection);\n}\n\n\n\n\nUtilization within the Condition Escort\n\n\nAll public variables are available to you inside the Condition Escort as data series; they can be found under \u201eSeries & Output Values\u201c.\nThe name has an underscore (\"_\") suffix in order to differentiate it.\n\n\nThe parameters \u201ctrendSize\u201d and \u201coccurrence\u201d can be found within the Condition Escort.\n\n\nP123Pro\n\n\nThe parameter TrendSize can be found under the parameter settings (see figure). It is only intended to be used within the Condition Escort. This parameter is not relevant for display in the chart. The display is only controlled by the following settings: \"Display 123\" and \"Display Lines\".\n\n\n\n\nYou can see in the respectful description fields for each parameter to which extend the particular parameters may influence the chart or Condition Escort as well as AgenaScript.\n\n\nUsage in the AgenaScript\n\n\nFor the AgenaScript purposes several data series of the same type are doubled. For each of these data series the common notation with ...[barsAgo] can be used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrendDirection\n\n\n1 = Uptrend -1 = Downtrend 0 = no trend defined according to the market technique\n\n\n\n\n\n\nIsP21\n\n\nIf a bar represents an old point 2 and at the same time a new point 1, it will be labelled in the chart as \"(2) 1\". The value of this bar (and all subsequent bars up to the next point 2) will be 1, and 0 otherwise.\n\n\n\n\n\n\nIsTrendValid\n\n\n1 = defines a confirmed trend, i.e. at least a point sequence 1 - 2 - 3 - 2. 0 = there is no confirmed trend yet. (Phase 1 and 2 according to market technique)\n\n\n\n\n\n\nLastPoint\n\n\nProvides the latest point of the trend, i.e. 1, 2, or 3\n\n\n\n\n\n\nLastPointPrice\n\n\nProvides the corresponding market value of the latest point according to the market technique\n\n\n\n\n\n\nLastPointDateTime\n\n\nProvides the corresponding date and time related to the latest point according to the market technique\n\n\n\n\n\n\nLastPointExtInfo\n\n\nProvides the corresponding label of the latest point according to the market technique. The labelling should be additionally defined in Parameter tab. The slope is a chart-only feature therefore it is neither in Conditions, nor in the AgenaScript available.\n\n\n\n\n\n\nP1Price\n\n\nProvides the market value of the latest point 1\n\n\n\n\n\n\nP1DateTime\n\n\nProvides the date and time of the latest point 2\n\n\n\n\n\n\nPriorP2Price\n\n\nefert die Datums- und Zeitangabe des vorletzten Punkt 2\n\n\n\n\n\n\nTempP3Price\n\n\nProvides the date and time of the second last point 2\n\n\n\n\n\n\nTempP3DateTime\n\n\nProvides the date and time of the last preliminary point 3\n\n\n\n\n\n\nValidP3Price\n\n\nProvides the market value of the last valid point 3. This market value defines the stop movement according to the market techniques. When this point is crossed, there is a trend break from the market technique perspective.\n\n\n\n\n\n\nValidP3DateTime\n\n\nProvides the date and time of the last valid point 3\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntrendsize\n\n\nTrend size of 0 .. 3\n\n\n\n\n\n\nbreakageP2\n\n\nShows an arrow in the chart, when a break of P2 occurs or has been already completed. The figure is expressed as a percentage between -100 and +100. -20 alerts e.g. 20% before the P2 will be reached\n\n\n\n\n\n\nextInfo\n\n\nSelection of a labelling\n\n\n\n\n\n\np2Distance\n\n\nUncertainty:\n this is a factor (between 0 and 1) that defines, how far has to be the P2 from the \"old\" valid P2 in order to be treated as valid. The previous movement is decisive in this case.\n\n\n\n\n\n\np3Distance\n\n\nUncertainty:\n this is a factor (between 0 and 1) that defines, how far has to be the P3 from the \"old\" valid P2 in order to be treated as valid. The previous movement is decisive in this case..\n\n\n\n\n\n\np3BreakageDistance\n\n\nUncertainty:\n this is a factor (between 0 and 1) that defines when a trend brake is valid. The previous movement is decisive in this case. So, for instance, the breakout of the latest P3 (with one tick only) will not be considered as the breakout anymore.\n\n\n\n\n\n\n\n\nExamples\n\n\nprivate void PrintOutTrendProperties(int trendSize)\nprivate void PrintOutTrendProperties(int trendSize)\n{\n    // revers order of prints fills output window in correct order\n    Print(\"\");\n    Print(\"IsP21: \" +  P123Pro(trendSize).IsP21[0]);\n    Print(\"valid P3 date: \" +  P123Pro(trendSize).ValidP3DateTime[0]);\n    Print(\"valid P3 price: \" +  P123Pro(trendSize).ValidP3Price[0]);\n    Print(\"temp P3 date: \" +  P123Pro(trendSize).TempP3DateTime[0]);\n    Print(\"temp P3 price: \" +  P123Pro(trendSize).TempP3Price[0]);\n    Print(\"P2 date: \" +  P123Pro(trendSize).P2DateTime[0]);\n    Print(\"P2 price: \" +  P123Pro(trendSize).P2Price[0]);\n    Print(\"P1 date: \" +  P123Pro(trendSize).P1DateTime[0]);\n    Print(\"P1 price: \" +  P123Pro(trendSize).P1Price[0]);\n    Print(\"last point date: \" +  P123Pro(trendSize).LastPointDateTime[0]);\n    Print(\"last point price: \" +  P123Pro(trendSize).LastPointPrice[0]);\n    Print(\"last point: \" +  P123Pro(trendSize).LastPoint[0]);\n    Print(\"Is trend valid: \" +  P123Pro(trendSize).IsTrendValid[0]);\n    Print(\"Trend direction: \" +  P123Pro(trendSize).TrendDirection[0]);\n    Print(\"P2Breakout: \" +  P123Pro(trendSize).P2Breakout[0]);\n    Print(\"Extended Information: \" +  P123Pro(trendSize).LastPointExtInfo[0]);\n}\n\n\n\n\nUsage in the Condition Escort\n\n\nAll data series (excluding the DateTime series) are available in the Condition Escort under the \"Series & Output Values\".\n\n\nLogical variables (true and false) are replaced by the numbers 1 and 0. The \"TrendSize\" parameter is available in the Condition Escort as well. The description you will find below.\n\n\nExamples\n\n\nInquiry whether the currently active in the chart middle trend is a downtrend: \nP123Pro(Close, 1).TrendDirection[0] - Inh. TimeFrame   ==   1\n\n\nInquiry whether the latest point of the currently active in the chart smallest trend is a Point2: \nP123Pro(Close, 3).LastPoint[0] - Inh. TimeFrame   ==   2\n\n\nInquiry whether the latest bar under the valid point 3 (not the 3?) of the small trend has been closed: \nP123Pro(Close, 2).isTrendValid[0] - Inh. TimeFrame   ==   1 \nUND (also neue Zeile)\nClose[0] - Inh. TimeFrame   <   P123Pro(Close, 2).ValidP3Price[0] - Inh. TimeFrame \n\n\nParabolic SAR\n\n\nDescription\n\n\nWelles Wilder came up with the Parabolic SAR, which denotes a price and time-based trading system. Wilder named this the \"Parabolic Time/Price System.\" SAR signifies \"stop and reverse,\" which is the name of the actual indicator used in his system, where \nSAR trails price as the trend extends over time\n. When prices are rising, the indicator is below them, and when prices are falling, it is above them. Therefore the indicator stops and reverses when the price trend reverses and breaks either above or below the indicator.\n\n\nWilder used his new book, New Concepts in Technical Trading Systems, to introduce the Parabolic Time/Price System in 1978. The book also discusses RSI, Average True Range, and the Directional Movement Concept (ADX). Although they were created before the computer age, Wilder's indicators function equally well today and have a high reputation.\n\n\nSAR follows the price, and can be considered a trend-following indicator. If a downtrend reverses and starts up, SAR follows the prices just like a trailing stop. This stop continues to rise so long as the uptrend remains intact, which means that the SAR never decreases in an uptrend and is always protecting profits as prices move forwards. Once the price stops rising and reverses below SAR, a downtrend starts and SAR is above the price. SAR follows prices lower like a trailing stop, as mentioned before. The stop continuously falls as long as the downtrend continues to exist. Due to the fact that SAR never rises in a downtrend, it always protects profits on short positions.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Parabolic_SAR\n\n\nWikipedia: \nhttp://en.wikipedia.org/wiki/Parabolic_SAR\n\n\nUsage\n\n\nParabolicSAR(double acceleration, double accelerationStep, double accelerationMax)\nParabolicSAR(IDataSeries inSeries, double acceleration, double accelerationStep, double accelerationMax)\nParabolicSAR(double acceleration, double accelerationStep, double accelerationMax)[int barsAgo]\nParabolicSAR(IDataSeries inSeries, double acceleration, double accelerationStep, double accelerationMax)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nParabolicSAR\n(...)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nacceleration\n\n\nAcceleration\n\n\n\n\n\n\naccelerationStep\n\n\nIncrement of the acceleration\n\n\n\n\n\n\naccelerationMax\n\n\nMaximum acceleration\n\n\n\n\n\n\nInSeries\n\n\nInput data series for the indicator\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the value for the PSAR\nPrint(\"The current value for the Parabolic SAR is \" + ParabolicSAR(0.02, 0.2, 0.02)[0]);\n\n\n\n\nPercentage Price Oscillator (PPO)\n\n\nDescription\n\n\nThe Percentage Price Oscillator displays the percentage difference between two moving averages. It is classed as a momentum indicator and is similar to the MACD in its construction.\n\n\nInterpretation\n\n\nThe PPO can be used for divergence analysis. The divergences have the advantage of having a higher percentual hit rate. On the downside, they often appear too early and thus are hard for newer traders to assess properly.\n\n\nUsage\n\n\nPPO(int fast, int slow, int smooth)\nPPO(IDataSeries inSeries, int fast, int slow, int smooth)\nPPO(int fast, int slow, int smooth)[int barsAgo]\nPPO(IDataSeries inSeries, int fast, int slow, int smooth)[int barsAgo]\n\n//For the smoothed value\nPPO(int fast, int slow, int smooth).Smoothed[int barsAgo]\nPPO(IDataSeries inSeries, int fast, int slow, int smooth).Smoothed[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nPPO\n(12,26,9)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nfast Number of bars for the calculation of the fast EMA\n\n\nslow Number of bars for the calculation of the slow EMA\n\n\nsmooth Number of bars for the calculation of the EMA signal line\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the PPO\nPrint(\"The current value for the PPO is \" + PPO(12, 26, 9)[0]);\n\n//Output for the value of the PPO smoothed\nPrint(\"The current value for the PPO is \" + PPO(12, 26, 9).Smoothed[0]);\n\n\n\n\nPercentEnvelopes\n\n\nDescription\n\n\nThe Percent Envelopes indicator draws an upper and a lower band around a predefined value with a distance of a specified percentage value. The trader can specify which data series the entry value should be (highs, lows, closing price, another indicator etc.).\n\n\nIt is possible to use an SMA as the entry value. In this case, the upper and lower bands will be displayed with a distance of 1.5%.\n\n\nInterpretation\n\n\nSimilarly to the Bollinger Bands, the Percent Envelope indicator can be used to make buy or sell decisions and to determine whether the price is under- or overvalued.\n\n\nThe Percent Envelope should never be used to make decisions based solely on the output, but should be used in conjunction with other indicators to confirm signals.\n\n\nUsage\n\n\nPercentEnvelopes(double percent)\nPercentEnvelopes(IDataSeries inSeries, double percent)\n\n//For the upper band\nPercentEnvelopes(double percent).UpperPercentBand[int barsAgo]\nPercentEnvelopes(IDataSeries inSeries, double percent).UpperPercentBand[int barsAgo]\n\n//For the lower band\nPercentEnvelopes(double percent).LowerPercentBand[int barsAgo]\nPercentEnvelopes(IDataSeries inSeries, double percent).LowerPercentBand[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nPercentEnvelopes\n(2)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\npercent Difference in % for the bands (from the input value)\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the upper band\nPrint(\"Value of the upper percent band is: \" + PercentEnvelopes(3).UpperPercentBand[0]);\n\n//Output for the lower band\nPrint(\"Value of the lower percent band is: \" + PercentEnvelopes(3).LowerPercentBand[0]);\n\n\n\n\nPivot Points\n\n\nDescription\n\n\nThis indicator, based on the price zone approach invented by Dr. Bruce Gould, has been honed over the years. In the beginning, the price zones were calculated using the price developments of the last 2-3 years. Nowadays, however, the practical concept of pivot points is taken from the calculation of price zones in the daily chart, using the previous day\u2019s periods as the basis. The goal hereby is to determine price levels that one could use as potential resistance zones (R1..R3) or support zones (S1..S3). The following methods can be used to calculate the indicator: Classic, Floor, Woodie, Camarilla, Fibonacci. The Classic and Floor methods are often wrongly named within literature, which is why in AgenaTrader you will find that the Classic method is labeled as \u201cFloor\u201d and vice versa. The indicator displays the pivot points for intraday charts, and the parameter \u201cShowPrices\u201d allows you to display the price on the levels. The parameter \u201cDaysBack\u201d allows you to set the number of periods in the past that should be used for the calculation. The line coloring can be defined manually\n\n\nInterpretation\n\n\nTraders prefer to sell above the resistance lines 1 & 2 (e.g. to build up short positions), and to start building up tactical long positions at the support lines.\n\n\nFurther information\n\n\nhttp://www.finanznachrichten.de/nachrichten-2008-01/9833653-was-sind-pivot-punkte-und-wie-kann-ich-sie-handeln-005.htm\n\n\nhttp://www.aktienboard.com/forum/f38/7-kapitel-pivot-points-t36428/\n\n\nhttp://www.forexschule.com/schule/wie-man-mit-hilfe-von-pivot-punkten-handelt-50\n\n\nUsage\n\n\nPivotPoints()\nPivotPoints(PivotPointsMode mode)\nPivotPoints(PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)\nPivotPoints(IDataSeries inSeries, PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)\nPivotPoints()[barsAgo]\nPivotPoints(PivotPointsMode mode)[barsAgo]\nPivotPoints(PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)[barsAgo]\nPivotPoints(IDataSeries inSeries, PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)[barsAgo]\n\n\n\n\nReturn value\n\n\nThis class has the following public methods (as data series), which all return double values:\n\n\nPP, S1, S2, S3, R1, R2 ,R3\n\n\nExample:\n\n\nPivotPoints().PP[int barsAgo]\nPivotPoints(PivotPointsMode.Classic).S3[int barsAgo]\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInSeries\n\n\nInput data series for the indicator\n\n\n\n\n\n\nPivotPointsMode\n\n\nCalculatory method\n\n\n\n\n\n\nPivotPointsMode.Classic\n\n\n\n\n\n\n\n\nPivotPointsMode.Floor\n\n\n\n\n\n\n\n\nPivotPointsMode.Woodie\n\n\n\n\n\n\n\n\nPivotPointsMode.Camarilla\n\n\n\n\n\n\n\n\nPivotPointsMode.Fibonacci\n\n\n\n\n\n\n\n\nDefault: floor\n\n\n\n\n\n\n\n\nLineWidth\n\n\nDefault: 1\n\n\n\n\n\n\nShowPrices\n\n\nShows prices next to the lines\n\n\n\n\n\n\nDefault: false\n\n\n\n\n\n\n\n\nDaysBack\n\n\nThe number of historical periods to be included in the display of the pivot lines\n\n\n\n\n\n\nDefault: 0\n\n\n\n\n\n\n\n\nRColor\n\n\nResistance line color\n\n\n\n\n\n\nPPColor\n\n\nPivot line color\n\n\n\n\n\n\nSColor\n\n\nSupport line color\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output current pivot point\nPrint(\"The floor pivot point is located at: \" + PivotPoints()[0]);\n//Output first support (S1)\nPrint(\"The first pivot support (S1) is at: \" + PivotPoints().S1[0]);\n\n\n\n\nCalculation\n\n\nH=yesterday\u2019s high, L=yesterday\u2019s low, O=yesterday\u2019s open, C=yesterday\u2019s close\n\n\nRange = H-L\n\n\nClassic\n\n\npp = (H + L + C)/3\n\n\nr1 = 2*pp - L\n\n\ns1 = 2*pp - H\n\n\nr2 = pp - s1 + r1\n\n\ns2 = pp - r1 + s1\n\n\nr3 = H + 2*(pp - L)\n\n\ns3 = L - 2*(H - pp)\n\n\nFloor\n\n\npp = (H + L + C)/3\n\n\nr1 = 2*pp - L\n\n\ns1 = 2*pp - H\n\n\nr2 = pp + Range\n\n\ns2 = pp - Range\n\n\nr3 = pp + 2*Range\n\n\ns3 = pp - 2*Range\n\n\nWoodie\n\n\npp = (H + L + 2*C)/4\n\n\nr1 = 2*pp - L\n\n\ns1 = 2*pp - H\n\n\nr2 = pp + H - L\n\n\ns2 = pp - H + L\n\n\nr3 = 0.0\n\n\ns3 = 0.0\n\n\nCamarilla\n\n\npp = (H + L + C)/3\n\n\nr1 = C + Range * 1.1 / 12\n\n\ns1 = C - Range * 1.1 / 12\n\n\nr2 = C + Range * 1.1 / 6\n\n\ns2 = C - Range * 1.1 / 6\n\n\nr3 = C + Range * 1.1 / 4\n\n\ns3 = C - Range * 1.1 / 4\n\n\nFibonacci\n\n\npp = (H + L + C)/3\n\n\nr1 = pp + 0.382 * Range\n\n\ns1 = pp - 0.382 * Range\n\n\nr2 = pp + 0.618 * Range\n\n\ns2 = pp - 0.618 * Range\n\n\nr3 = pp + 0.764 * Range\n\n\ns3 = pp - 0.764 * Range\n\n\nPolarized Fractal Efficiency (PFE)\n\n\nDescription\n\n\nHans Hannula developed the PFE, which is categorized as a momentum indicator. It uses the methods of fractal geometry and chaos theory to determine the price efficiency of the movements.\n\n\nInterpretation\n\n\nWhen the PFE zigzags around the zero line, no trend is present. If the PFE is equally formed and running above the zero line, the market is in an uptrend. The higher the value, the stronger the uptrend.\n\n\nUsage\n\n\nPFE(int period)\nPFE(IDataSeries inSeries, int period)\nPFE(int period)[int barsAgo]\nPFE(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nPFE\n(20)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the Polarized Fractal Efficiency (PFE)\nPrint(\"The current value for the PFE is: \" + PFE(20)[0]);\n\n\n\n\nPrice Oscillator\n\n\nDescription\n\n\nThis indicator is based on the difference between two moving averages. The difference is measured in absolute values, not in percentages.\n\n\nUsage\n\n\nPriceOscillator(int fast, int slow, int smooth)\nPriceOscillator(IDataSeries inSeries, int fast, int slow, int smooth)\nPriceOscillator(int fast, int slow, int smooth)[int barsAgo]\nPriceOscillator(IDataSeries inSeries, int fast, int slow, int smooth)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nPriceOscillator\n(12,26,9)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nfast Number of bars used for the calculation of the fast EMA\n\n\nslow Number of bars used for the calculation of the slow EMA\n\n\nsmooth Number of bars used for the calculation of the EMA signal line\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the price oscillator\nPrint(\"The current value for the PPO is \" + PriceOscillator(12, 26, 9)[0]);\n//Output for the value of the smooth price oscillator\nPrint(\"The current value for the smooth is \" + PriceOscillator(12, 26, 9).Smoothed[0]);\n\n\n\n\nRainbow\n\n\nDescription\n\n\nThe rainbow indicator is represented by the set of the moving average indicator lines. Each of these lines is placed closer or further from the chart depending on the time period taken into the account for calculation of moving averages.\n\n\nIntroduction\n\n\nThe rainbow indicator has some advantages comparing to the single moving average lines because it shows better, where the trend reversal occurs. When divergence in all lines is substantial - this is a signal of a strong up- or downtrend movement.\nBy default red lines are the closest to the chart and represent the moving average line with the smallest time period.  Yellow lines indicate short-term trends. Blue display the area for short-term traders\u2019 activity. Green is typify for medium-term trends. Pink lines can be usefull for traders who hold positions for a long period.\n\n\nReturn value\n\n\nColors:\n\n\nYellow \u0415\u041c\u0410: 2,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15;\nBlue \u0415\u041c\u0410: 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41;\nGreen \u0415\u041c\u0410: 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74;\nRed \u0415\u041c\u0410: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122;\nPink \u0415\u041c\u0410: 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200.\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMA Type\n\n\nAllows to select between the types of the moving average lines that shape a rainbow indicator. Default setting is the EMA (exponential moving average) but it is possible to choose a simple (SMA), hull (HMA) and weighted (WMA) moving average lines\n\n\n\n\n\n\nLow MA Period\n\n\nShows the smallest amount of time periods for which the moving average will be calculated. For example, the setting \u201c2\u201d for the daily chart indicates the two latest daily closing prices.\n\n\n\n\n\n\nHigh MA Period\n\n\nShows the largest amount of time periods for which the moving average will be calculated.\n\n\n\n\n\n\nStep\n\n\nDefines the amount of moving average lines shown on a chart within the rainbow indicator. The smaller is this number the larger amount of lines will be plotted. In our example, step 2 would mean that the indicator will contain 80 EMA lines: EMA(2), EMA(4), EMA(6) and so on.\n\n\n\n\n\n\n\n\nVisualisation\n\n\n\n\nRange\n\n\nDescription\n\n\nRange delivers the span/difference between the high and low in ticks for each bar. The range is always greater than or equal to 0.\n\n\nUsage\n\n\nRange()\nRange(IDataSeries inSeries)\nRange()[int barsAgo]\nRange(IDataSeries inSeries)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nRange\n()[\nint\n barsAgo] ), the range value for the referenced bar will be outputted.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the range\nPrint(\"The current bar has a range of: \" + Range()[0]);\n\n//Identical output\nPrint(\"The current bar has a range of: \" + High[0] - Low[0]);\n\n\n\n\nRange Indicator (RIND)\n\n\nDescription\n\n\nJack Weinberg created the Range Indicator (RIND), which was first published in 1954. The RIND compares the intraday span (range) between the high and low to the span (range) between the current closing price and the closing price from the day before.\n\n\nInterpretation\n\n\nWhen the span between the current close and the previous days close is bigger than the intraday span between high and low, the indicator will display a high value. This signals a potential trend change...\n\n\nFurther information\n\n\nhttp://www.fmlabs.com/reference/default.htm?url=RangeIndicator.htm\n\n\nUsage\n\n\nRIND(int periodQ, int smooth)\nRIND(IDataSeries inSeries, int periodQ, int smooth)\nRIND(int periodQ, int smooth)[int barsAgo]\nRIND(IDataSeries inSeries, int periodQ, int smooth)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nRIND\n(3,10)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiodQ Number of bars used for the short-term stochastic\n\n\nsmooth Number of bars used for smoothing the indicator (using an EMA)\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output\nPrint(\"The current value for the PFE is: \" + RIND(3, 10)[0]);\n\n\n\n\nRate of Change (ROC)\n\n\nDescription\n\n\nThe Rate of Change Indicator is a simple yet effective momentum oscillator. It measures the relative percentage change of the prices from one period to the next.\nThe calculation looks at the current price and compares it to the price of n periods ago.\n\n\nInterpretation\n\n\nAs long as the ROC is above 0, the uptrend is intact.\nAs long as the ROC is below 0, the downtrend is intact.\nDivergences between the indicator and the price development can hint to a trend change.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/RoC\n\n\nUsage\n\n\nROC(int period)\nROC(IDataSeries inSeries, int period)\nROC(int period)[int barsAgo]\nROC(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nROC\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nRelative Currency Strength (RCS)\n\n\nDescription\n\n\nThe Relative Currency Strength indicator is a tool used for technical analysis for the Forex\n(foreign exchange) market. This indicator calculates the current and historical strength or\nweakness of a currency. The RCS can be used in all timeframes; the interpretation of the\nindicator remains the same.\n\n\nThe basic idea of the RCS is based on finding the strongest and weakest currency in the\npresent moment in a historical context. When you have all currencies displayed\nsimultaneously, you can seek out the strongest and weakest currency in that moment. The\nstrongest currency is the one whose line is currently the highest in comparison to the other\nlines; vice versa, you will find the weakest currency to be the lowest line at that moment. The\ncurrency pair that results from this is a potential trade candidate.\n\n\nIf the RCS is showing that at the moment, the euro is the strongest (overbought) and the US\ndollar is the weakest (oversold) currency relative to the other major currencies, then a short\nentry in the EURUSD Forex pair makes sense.\n\n\nThe logic behind this states that the EURUSD will fall either when the euro shows weakness\nor the US dollar displays strength. Since the euro is overbought, its performance will tend to\nweaken; in addition, the dollar is oversold, which means we can predict rising strength on the\npart of the USD. By finding the strongest and weakest currency, one trades the currency pair\nthat currently contains the highest probability of a value adjustment\n\n\nParameters\n\n\n\n\n\n\nMoving Average Type: [SMA/EMA] \u2013 calculation of the Relative Strength based on an SMA (Simple Moving Average) or EMA (Exponential Moving Average).\n\n\n\n\n\n\nSlow Period: input parameter for the sensitivity of the calculation. Higher values mean that a slower average is used for the calculation. Please leave this parameter on the standard setting (10) unless you are 100% sure what you are changing with this, since the analysis of the RCS can be distorted by deviating values. A higher period simply outputs fewer signals, which, however, present higher potential in return.\n\n\n\n\n\n\nFast Period: see Slow Period.\n\n\n\n\n\n\n\u2013 11. Set the currencies that you wish to have displayed in the chart to \u201cTrue\u201d.\n\n\n\n\n\n\nSignals\n\n\nExtreme points in the valuation of 2 currencies\n\n\n\nFor this signal, just display the two currencies included in the respective currency pair from\nthe RCS. In the example above, the EURUSD is loaded in the chart and the RCS is showing\nthe USD (green) and the euro (blue).\nAt the red horizontal lines, there is a strong overvaluation of the euro in comparison to the\ndollar. In these situations, the euro shows enormous strength, and the dollar great\nweakness. These tendencies cannot be maintained in the long run, since in the course of\nthings, both currencies gravitate toward their fair value. This is why this overvaluation of the\neuro is followed by a weakening of the EURUSD ratio, that is to say the EURUSD currency\nprice falls.\nThis interpretation is possible for every Forex pair.\n\n\nIntersecting of the currency lines\n\n\nThe overlapping of two currency lines can also be used as a signal. In the example, a long\nsignal (blue) forms when the USD intersects the CHF line from bottom to top. A short signal\nis formed when the CHF intersects the USD line from top to bottom.\n\n\n\n\nDivergences between chart and RCS\n\n\nA divergence is formed when, for example, the chart forms new highs that are no longer confirmed by the strength of the RCG. In the example, the USDCHF forms new highs after a strong upward movement, which, however, are no longer confirmed by the USD strength of the RCS. After the divergence occurs, the USDCHF cannot continue its upward movement and transitions into a sideways phase. A divergence, therefore, can be used as an early indicator, for example to \u201cforesee\u201d the end of a longer movement.\n\n\n\n\nDisplay of the current performance\n\n\nIn the right-hand side of the indicator window, you have a display showing how the\ncurrencies are currently developing. The values shown are the absolute changes of the\nindividual currency in the RCS graph of the previous period compared to the current period.\nFor example, a change in the USD from 0.0700 (previous period) to 0.0800 (current period)\nis outputted as +100 USD. This display serves to provide a global overview of how the Forex\nmajors are currently developing relative to each other.\n\n\n\n\nRelative Performance\n\n\nDescription\n\n\nCalculates the price ratio between current and selected symbols.\n\n\nFurther information\n\n\nhttp://stockcharts.com/articles/mailbag/2012/01/how-can-i-chart-relative-performance-qqq-underperforms-spy-.html?st=relative+performance\n\n\nhttp://www.wikinvest.com/wiki/Relative_performance\n\n\nUsage\n\n\nRelativePerformance (Instrument)\nRelativePerformance (Instrument)[int barsAgo]\n\n\n\n\n\nReturn value\n\n\ndouble\n\n\nParameters\n\n\nIInstrument \n\n\nVisualization\n\n\n\n\nRelative Spread Strength (RSS)\n\n\nDescription\n\n\nThe Relative Spread Strength Indicator was developed in 2006. It uses the difference of two SMAs to calculates the value of the RSI.\n\n\nInterpretation\n\n\nValues above 70 and below 30 mean that the price has the potential of turning. Trades should not be entered into at these points. When it comes to extreme values, you might want to check smaller timeframes for clearer trading signals.\n\n\nIn the long-term analysis, the following methodology should be applied:\n\n\n\n\nbelow 30: long entry\n\n\n\n\nabove 70: for more than 5 days: exit long\n\n\n\n\n\n\nabove 95: short entry\n\n\n\n\nbelow 30: for more than 5 days: exit short\n\n\n\n\nUsage\n\n\nRSS(int eMA1, int eMA2, int length)\nRSS(IDataSeries inSeries, int eMA1, int eMA2, int length)\nRSS(int eMA1, int eMA2, int length)[int barsAgo]\nRSS(IDataSeries inSeries, int eMA1, int eMA2, int length)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nRSS\n(10,40,5)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nlength Number of bars used in the calculation\n\n\neMA1 Number of periods for the first EMA\n\n\neMA2 Number of periods for the second EMA\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the RSS\nPrint(\"The current RSS is \" + RSS (10, 40, 5)[0]);\n\n\n\n\nRelative Strength Index (RSI)\n\n\nDescription\n\n\nJ. Welles Wilder, the creator of several indicators, also developed the RSI, which is one of the most popular, useful momentum oscillators. It compares the size of the most recent profits with the size of the most recent losses, which means that it assesses the relationships between the up and down closing prices. The values are shown between 0 and 100.\n\n\nInterpretation\n\n\nTraditionally, and according to Wilder, RSI is considered overbought when above 70 and oversold when below 30. Signals can also be generated by searching for divergences, failure swings and centerline crossovers. RSI can also be used to identify the general trend. These traditional levels can also be adjusted to better fit the security or analytical requirements. Raising overbought to 80 or lowering oversold to 20 will reduce the number of overbought/oversold readings. Short-term traders sometimes use 2-period RSI to look for overbought readings above 80 and oversold readings below 20.\n\n\nFurther information\n\n\nhttp://technische-analyse.eu/index.php?title=RSI\n\n\nUsage\n\n\nRSI(int period, int smooth)\nRSI(IDataSeries inSeries, int period, int smooth)\nRSI(int period, int smooth)[int barsAgo]\nRSI(IDataSeries inSeries, int period, int smooth)[int barsAgo]\n\n//For the average value\nRSI(int period, int smooth).Avg[int barsAgo]\nRSI(IDataSeries inSeries, int period, int smooth).Avg[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nRSI\n(14,3)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nsmooth Number of periods for the smoothing\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the RSI\nPrint(\"The current value for the RSI is: \" + RSI(14, 3)[0]);\n\n//Output for the average line\nPrint(\"The current value for the AVG line is: \" + RSI(14, 3).Avg[0]);\n\n\n\n\nRelative Strength Levy (RSL)\n\n\nDescription\n\n\nThe concept of the Relative Strength according to R.A. Levy is that the past developments play a very important role in the strength that will be seen in the future. The current performance is compared to the past performance.\n\n\nThe calculation involves taking the weekly closes (or daily closes) and dividing them by the arithmetic mean of the closing prices for the examined period. The result is then balanced around the 10 marker, and an ordered list is created where the value of the highest RSL fills the first place.\n\n\nUsage\n\n\nRSL(int period)\nRSLDataSeries inSeries, int period)\nRSLnt period)[int barsAgo]\nRSL(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nRSL\n(27)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//RSL value output\nPrint(\"The Relative Strength as calculated by Levy is \" + RSL(27)[0]);\n\n\n\n\nRelative Volatility Index (RVI)\n\n\nDescription\n\n\nThe Relative Volatility Index (RVI) has many similarities to the RSI indicator. Donald Dorsey developed the RVI, which uses the standard deviation instead of the daily price span. To determine the underlying volatility of the instrument, the RVI uses the standard deviation over a period of 10. The RSI indicator is then used on the results, which normalizes them. What comes from this is displayed on a scale of 1 to 100.\n\n\nInterpretation\n\n\nValues above 50 assume an increase in volatility. Values below 50 imply a drop in volatility. Dorsey recommends using the indicator as a filter for other indicators.\n\n\nFurther information\n\n\nhttp://vtadwiki.vtad.de/index.php/Relative_Volatility_Index_%28RVI%29\n\n\nUsage\n\n\nRVI(int period)\nRVI(IDataSeries inSeries, int period)\nRVI(int period)[int barsAgo]\nRVI(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nRVI\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the RVI value\nPrint(\"The current value for the RVI is: \" + RVI(14)[0]);\n\n\n\n\nReversalBars\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe Reversal Bars indicator helps the trader find reversal bars within a chart.\nThe indicator has a plot, and outputs the value 1 for long reversal bars, -1 for short reversal bars and 0 when there are none present. Traders can make several adjustments such as colors, arrows that are shown, etc.\n\n\nInterpretation\n\n\nThe interpretation of reversal bars is described in M. Voight\u2019s book.\n\n\nUsage\n\n\nReversalbars()\nReversalbars(IDataSeries inSeries)\nReversalbars()[int barsAgo]\nReversalbars(IDataSeries inSeries)[int barsAgo]\nReversalbars(int tolerance)\nReversalbars(IDataSeries inSeries, int tolreance)\nReversalbars(int tolerance)[int barsAgo]\nReversalbars(IDataSeries inSeries, int tolerance)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\n1 = long reversal bar\n\n\n-1 = short reversal bar\n\n\n0 = no reversal bar\n\n\nWhen using this method with an index (e.g. \nReversalbars\n()[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\ntolerance See the following description below\n\n\nVisualization\n\n\n\n\nThe tolerance parameter\n\n\nThe reversal bars must exceed their previous bars by at least 1 tick. The tolerance parameter allows you to define/add a certain number of ticks; the parameter is set to 0 by default, but in a sideways market this will lead to a relatively large number of reversal bars being marked.\n\n\n\n\nExample\n\n\n// Set CalculateOnClosedBar = true !!\nif (Reversalbars()[0] == 1.0)\nPrint(\"The last bar is a long reversal bar.\");\n\n\n\n\nR-Squared\n\n\nDescription\n\n\nThis indicator belongs to the linear regression series. R-Squared is the correlation coefficient that specifies the quality of the linear regression line.\n\n\nIt is the calculation that gives R-Squared its name \u2013 the value is the square of the correlation coefficient, which in mathematics is prefixed with the Greek letter Rho (P).\n\n\nSee \nLinear Regression\n, \nLinRegSlope\n, \nLinRegIntercept\n.\n\n\nInterpretation\n\n\nThe value of the oscillator fluctuates between 0 and 1. By default, the upper boundary line is located at 0.75, and the lower border is at 0.2.\nIf the prices are in a sideways movement, the data is scattered around the regression line. R-Squared will have a value of 0 in the aforementioned situation.\nIn a strong trend phase, the prices will remain within a tight range for an extended period of time; if these are located close to the regression line then the R-Squared indicator will have a value of 1. Stanley Kroll and Tuchar Chande used the correlation coefficient as a trend filter in their book \u201c\nThe new technical trader\n\u201d.\n\n\nFurther information\n\n\nhttp://www.blastchart.com/Community/IndicatorGuide/Indicators/LinearRegressionRSquared.aspx\n\n\nUsage\n\n\nRSquared(int period)\nRSquared(IDataSeries inSeries, int period)\nRSquared(int period)[int barsAgo]\nRSquared(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nRSquared\n(8)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of R-Squared\nPrint(\"The current value of R-Squared is: \" + RSquared(8)[0]);\n\n\n\n\nStandardDeviation(StdDev)\n\n\nDescription\n\n\nThe Standard Deviation  (StdDev) is a tool used in statistics and probability calculation. It measures the dispersion of the values of a random variable around its median value. The Standard Deviation is used for the calculation of many indicators, such as, for example, the Bollinger Bands.\n\n\nInterpretation\n\n\nA lower standard deviation implies that the data points are located very close to their median value. The trading application assumes that prices will return to their median value.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Standard_Abweichung\n\n\nUsage\n\n\nStdDev (int period)\nStdDev (IDataSeries inSeries, int period)\nStdDev (int period)[int barsAgo]\nStdDev (IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nStdDev\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the StdDev\nPrint(\"The current value for the standard deviation is: \" + StdDev(14)[0]);\n\n\n\n\nStandard Error (StdError)\n\n\nDescription\n\n\nJon Anderson came up with the Standard Error Bands, which are similar to the Bollinger Bands, but with a different calculation. An upper and a lower boundary around a middle line create the bands \u2013 this is also known as the linear regression. The lower standard error band results from the subtraction of two standard errors from the final value of the regression line. Because individual closing prices can have a huge influence on the values of the bands, it is necessary to use a Simple Moving Average to smooth the data.\n\n\nInterpretation\n\n\nOne of the applications of the standard error bands is the tightening of the bands when prices rise/fall. If the bands tighten, it signifies that a trend is currently in place. A strong trend will continue to tighten the bands.\n\n\nFurther information\n\n\nhttp://www.forexrealm.com/technical-analysis/technical-indicators/standard-error-bands.html\n\n\nUsage\n\n\nStdError(int period)\nStdError(IDataSeries inSeries, int period)\nStdError(int period)[int barsAgo]\nStdError(IDataSeries inSeries, int period)[int barsAgo]\n\n//Upper band\nStdError(int period).Upper[int barsAgo]\nStdError(IDataSeries inSeries, int period).Upper[int barsAgo]\n\n//Lower band\nStdError(int period).Lower[int barsAgo]\nStdError(IDataSeries inSeries, int period).Lower[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nStdError\n(21)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the values of the middle line\nPrint(\"The middle line is currently at: \" + StdError(21)[0]);\n\n//Output for the lower band\nPrint(\"The lower band of the standard error is currently at: \" + StdError(21).Lower[0]);\n\n//output for the upper band\nPrint(\"The upper band of the standard error is currently at: \" + StdError(21).Upper[0]);\n\n\n\n\nStochastics\n\n\nDescription\n\n\nThe stochastic indicator was developed by George C. Lane in the 1950s. It belongs to the class \u201cmomentum indicators\u201d (oscillators) and represents the current closing price in relation to a high or low area over a defined number of periods.\nThe stochastic indicator is based on the observation that in an uptrend, the closing price is close to the daily high, while in a downtrend, the closing price is closer to the daily low.\nThe stochastic indicator consists of two exponential Average Lines (%K and %D), both of which range between 0 and 100.\nThere are two types of stochastic: the classic slow stochastic and the fast stochastic.\n\n\nFast stochastic:\n\nThe %D line is the smoothing average of the %K line\n\n\nSlow stochastic:\n\nThe %D is the basis on which the smoothing average is calculated. The slow stochastic smoothes the fast stochastic, thus stabilizing the oscillator.\n\n\nInterpretation\n\n\nThe closing prices found in the upper area imply an accumulation (buying pressure); the lower area represents selling pressure.\nThe stochastic indicator is a classic oscillator, and is primarily used in sideways markets in order to determine the reversal points. Days with a stable trend will not provide the indicator with any relevant or valuable results/information.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Stochastik\n\n\nUsage\n\n\nStochastics(int periodD, int periodK, int smooth)\nStochastics(IDataSeries inSeries, int periodD, int periodK, int smooth)\n\n//For the %D line\nStochastics(int periodD, int periodK, int smooth).D[int barsAgo]\nStochastics(IDataSeries inSeries, int periodD, int periodK, int smooth).D[int barsAgo]\n\n//For the %K line\nStochastics(int periodD, int periodK, int smooth).K[int barsAgo]\nStochastics(IDataSeries inSeries, int periodD, int periodK, int smooth).K[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nStochastics\n(7,14,3)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiodD Number of periods to be used for the %K smoothing\n\n\nperiodK Number of bars included in the %K calculation\n\n\nsmooth Number of periods for the smoothing of %D\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the %K line\nPrint(\"The stochastic line %K is currently at: \" + Stochastics(3, 14, 7).K[0]);\n\n//Output for the %D line\nPrint(\"The stochastic line %D is currently at: \" + Stochastics(3, 14, 7).D[0]);\n\n\n\n\nStochastics Fast\n\n\nDescription\n\n\nSee \nstochastics\n.\n\n\nInterpretation\n\n\nClosing prices that are constantly in the upper area indicate accumulation (i.e. buying pressure), whilst the distribution (i.e. selling pressure) is shown by an indicator value in the lower area.\n\n\nFurther information\n\n\nVTAD: \nhttp://vtadwiki.vtad.de/index.php/Stochastik\n\n\nCharttec: \nhttp://www.charttec.de/html/indikator_stochastics.php\n\n\nUsage\n\n\nStochasticsFast(int periodD, int periodK)\nStochasticsFast(IDataSeries inSeries, int periodD, int periodK)\n\n//For the %D line\nStochasticsFast(int periodD, int periodK).D[int barsAgo]\nStochasticsFast(IDataSeries inSeries, int periodD, int periodK).D[int barsAgo]\n\n//For the %K line\nStochasticsFast(int periodD, int periodK).K[int barsAgo]\nStochasticsFast(IDataSeries inSeries, int periodD, int periodK).K[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nStochasticsFast\n(7,14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiodD Number of periods for the smoothing of %K\n\n\nperiodK Number of periods included in the calculation of %K\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the %K line of the fast stochastic\nPrint(\"The stochastic line %K is currently at: \" + StochasticsFast(3, 14).K[0]);\n\n//Output %D line\nPrint(\"The stochastic line %D is currently at: \" + StochasticsFast(3, 14).D[0]);\n\n\n\n\nStochastics RSI (StochRSI)\n\n\nDescription\n\n\nStochastics RSI is a calculation of the stochastic based on the RSI indicator.\n\n\nInterpretation\n\n\nThe indicator provides fast and precise extreme values/points in the price movements. The StochRSI can be used as a trend filter in higher timeframes as well as a tool for better entry timing.\n\n\nFurther information\n\n\nhttp://www.investopedia.com/terms/s/stochrsi.asp#axzz263tizhIG\n\n\nUsage\n\n\nStochRSI(int period)\nStochRSI(IDataSeries inSeries, int period)\nStochRSI(int period)[int barsAgo]\nStochRSI(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nStochRSI\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the StochRSI\nPrint(\"The current value for the StochRSI is: \" + StochRSI(14)[0]);\n\n\n\n\nSummation (SUM)\n\n\nDescription\n\n\nSummation is the sum over a predefined number of periods.\n\n\nUsage\n\n\nSUM(int period)\nSUM(IDataSeries inSeries, int period)\nSUM(int period)[int barsAgo]\nSUM(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nSUM\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n// Sum of the volume for the last 10 trading days\nPrint(SUM(Volume,10)[0]);\n\n\n\n\nSuperTrend\n\n\nDescription\n\n\nThe SuperTrend indicator was invented by a French trader. SuperTrend is similar to the Parabolic Stop and Reverse System (Parabolic SAR), and is based on the median values of the candles. It measures volatility as a span between high and low, not taking potential price gaps into account. The indicator, which originates from a starting value, continues to proceed in one direction until the market changes direction, combined with rising volatility. This causes the indicator to adjust its starting value to match that of the counter-direction. The indicator is programmed in such a way that nothing but the trend direction can bring about a change. Dropping volatility combined with movements against the trend direction cause the indicator to move horizontally.\n\n\nInterpretation\n\n\nThere are multiple interpretations and applications for the SuperTrend. Forex traders prefer to trade the crosses directly. This way, the system will continuously be inside the market and only needs to be complemented by a stop and further trading logic settings.\nAnalytically speaking, the SuperTrend indicator is only able to provide information about the current trend. If the market is above the indicator, then an uptrend exists, otherwise a downtrend is in force.\nThe indicator can be used as an exit for additional trading systems, meaning that an open position can be closed if a trend change occurs.\n\n\nUsage\n\n\nSuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)\nSuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)[int barsAgo]\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)[int barsAgo]\n\n//For the values of the uptrend:\nSuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).UpTrend[int barsAgo]\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).UpTrend[int barsAgo]\n\n//For the values of the downtrend:\nSuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).DownTrend[int barsAgo]\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).DownTrend[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nSuperTrend\n(...).UpTrend[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInSeries\n\n\nInput data series for the indicator\n\n\n\n\n\n\nmaType\n\n\nFor the calculation of the MA, the following methods can be used:\n\n\n\n\n\n\nSuperTrendMAType.HMA\n\n\n\n\n\n\n\n\nSuperTrendMAType.SMA\n\n\n\n\n\n\n\n\nSuperTrendMAType.SMMA\n\n\n\n\n\n\n\n\nSuperTrendMAType.TEMA\n\n\n\n\n\n\n\n\nSuperTrendMAType.TMA\n\n\n\n\n\n\n\n\nSuperTrendMAType.VMA\n\n\n\n\n\n\n\n\nSuperTrendMAType.VWMA\n\n\n\n\n\n\n\n\nSuperTrendMAType.WMA\n\n\n\n\n\n\n\n\n\n\nAlso see: \nHMA\n, \nSMA\n, \nSMMA\n, \nTEMA\n, \nTMA\n, \nVMA\n, \nVWMA\n, \nWMA\n.\nDefault:\n              HMA  |\n| multiplier | This is a multiplier for the internal calculation of the offset. This is only used when the method is set to ATR and DualThrust.\n(In the adaptive mode, the multiplier uses the Homodyne Discriminator)\nDefault: 2.618      |\n| Period     | Number of bars used for the calculation of the moving average\nDefault: 14    |\n| smooth     | Values for additional smoothing\nIf no smoothing is necessary, this value can be set to 1\nDefault: 14     |\n| stMode     | The following methods can be chosen:\nSuperTrendMode.ATR, SuperTrendMode.DualThrust,  SuperTrendMode.Adaptive\nThe Period Parameter will have a huge influence when the DualThrustMode is selected. The smaller the period, the tighter the indicator will follow price developments.\nDefault: SuperTrendMode.ATR     |\n\n\nVisualization\n\n\n\n\nExample\n\n\nif (Close[0] > SuperTrend(SuperTrendMAType.HMA, SuperTrendMode.ATR, 14, 2.618, 14).UpTrend[0])\n  Print(\"The market is in an uptrend.\");\nif (Close[0] < SuperTrend(SuperTrendMAType.HMA, SuperTrendMode.ATR, 14, 2.618, 14).DownTrend[0])\n  Print(\"The market is in a downtrend.\");\n\n\n\n\nSupportResistanceAreas\n\n\nDescription\n\n\nThis indicator draws support and resistance areas in the chart. There are 4 different types of possible supports and resistances, which are differentiated by various colors.\n\n\nSupport due to a lower high (ColorLowerHigh)\n\n\nSupport due to a lower low (ColorLowerLow)\n\n\nResistance due to a higher high (ColorHigherHigh)\n\n\nResistance due to a higher low (ColorHigherLow)\n\n\nInterpretation\n\n\nS/R zones play an important role in technical analysis. Clearly defined and identifiable support areas provide favorable entry opportunities, while resistance areas provide target zones to exit those trades.\nOnce broken, these areas tend to reverse their function, meaning that a broken support zone becomes a resistance zone.\n\n\nhttp://finanzportal.wiwi.uni-saarland.de/tech/Kapitel5_4.htm\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nATRRangeFactor\n\n\nSettings for the width of the support/resistance area as calculated by the ATR.\n\n\n\n\n\n\nThe smallest configurable value is 0.1; default is 0.3\n\n\n\n\n\n\n\n\nLevels\n\n\nThis setting defines how many S/R zones of the same type are displayed. The default is 3\n\n\n\n\n\n\nOpacity\n\n\nTransparency of the bars to be drawn into the chart; 0 (transparent) \u2013 255 (completely visible).\n\n\n\n\n\n\nDefault is 70\n\n\n\n\n\n\n\n\nSensibilityFactor\n\n\nDefines the sensitivity of the S/R search.\n\n\n\n\n\n\nThe smallest setting is 1; the default is 5\n\n\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nSwing\n\n\nDescription\n\n\nBased on the strength of the swing highs or the swing lows, the swing indicator draws a line at these points. The number of bars to the left and right of the extreme point is the determining factor for the strength. Methods for these indicators can also be implemented for other scripts.\n\n\nInterpretation\n\n\nThe methods for these indicators can be used in scripts to determine the last extreme point and its corresponding price value. The highs and lows of these points may then be used as entry, stop or target markers.\n\n\nUsage\n\n\n//For a high\nSwing(int strength).SwingHighBar(int barsAgo, int instance, int lookBackPeriod)\nSwing(IDataSeries inSeries, int strength).SwingHighBar(int barsAgo, int instance, int lookBackPeriod)\n\n//For a low\nSwing(int strength).SwingLowBar(int barsAgo, int instance, int lookBackPeriod)\nSwing(IDataSeries inSeries, int strength).SwingLowBar(int barsAgo, int instance, int lookBackPeriod)\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nSwing\n(5)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nWhen the current bar is smaller than the parameter strength, or if no swing high/low has been found, the return value is -1.\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbarsAgo\n\n\nStarting point for the search\n\n\n\n\n\n\nInSeries\n\n\nInput data series for the indicator\n\n\n\n\n\n\ninstance\n\n\nThe number of occurrences of extreme points (1 is the last occurrence, 2 is the second last occurrence etc.)\n\n\n\n\n\n\nlength\n\n\nNumber of bars included in the calculation\n\n\n\n\n\n\nlookBackPeriod\n\n\nNumber of bars in the past in which swing points will be searched for (search area)\n\n\n\n\n\n\nstrength\n\n\nNumber of bars to the left and right of the extreme points\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\n// Position and price of the last swing high\nint barsAgo = Swing(5).SwingHighBar(0, 1, 10);\nPrint(\"The last swing high was \" + barsAgo + \" bars ago.\");\nPrint(\"The last swing high was at \" + High[barsAgo]);\n\n\n\n\nTime-Series-Forecast (TSF)\n\n\nDescription\n\n\nThe Time-Series-Forecast is quite similar to a moving average. Here, the trend is established based on a regression equation that uses the smallest square formula. The goal of the TSF is to anticipate future price movements with the help of currently existing data.\n\n\nInterpretation\n\n\nThe TSF reacts faster than the moving averages. These always have time delays when depicting the pre-existing trends. The TSF formula never allows the distance to the current price to become too large, thus permitting sharper trade reversal recognition.\n\n\nAn entry is placed when the price breaks the TSF line from bottom to top.\n\n\nFurther information\n\n\nhttp://en.wikipedia.org/wiki/Time_series\n\n\nUsage\n\n\nTSF(int forecast, int period)\nTSF(IDataSeries inSeries, int forecast, int period)\nTSF(int forecast, int period)[int barsAgo]\nTSF(IDataSeries inSeries, int forecast, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nTSF\n(3,14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\nforecast Number of bars used for the forecast\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output the TSF values\nPrint(\"The current value for the TSF is: \" + TSF(3, 14)[0]);\n\n\n\n\nTools\n\n\nConstant Lines\n\n\nDescription\n\n\nThe Constant Lines tool can draw a maximum of four freely configurable horizontal lines within a chart. In general, it is used to label certain price levels in order to keep an eye on them.\n\n\nUsage\n\n\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value)\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value)[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line1[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line2[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line3[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line4[barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nConstantLines\n(1,2,3,4)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nVisualization\n\n\n\n\nCurrentDayOHL\n\n\nDescription\n\n\nThis function delivers the values for the open, high and low of the current day i.e. session.\n\n\nCurrentDayOHL is intended for use with intraday data series.\n\n\nSee \nPriorDayOHLC\n, \nDayLines\n.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nCurrentDayOHL\n.CurrentOpen(...)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nUsage\n\n\nCurrentDayOHL()\nCurrentDayOHL(IDataSeries inSeries)\n\n//For the open value\nCurrentDayOHL().CurrentOpen[int barsAgo]\nCurrentDayOHL(IDataSeries inSeries).CurrentOpen[int barsAgo]\n\n//For the high value\nCurrentDayOHL().CurrentHigh[int barsAgo]\nCurrentDayOHL(IDataSeries inSeries).CurrentHigh[int barsAgo]\n\n//For the low value\nCurrentDayOHL().CurrentLow[int barsAgo]\nCurrentDayOHL(IDataSeries inSeries).CurrentLow[int barsAgo]\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\nPrint(\"The low of the current session is at \" + CurrentDayOHL().CurrentLow[0]);\n\n\n\n\nDaily Performance\n\n\nDescription\n\n\nThis indicator delivers information concerning the changes in the price movements based on either a past close or a current-day open in comparison to the current price level.\n\n\nThe Daily Performance can be displayed in points, ticks, percent, or a currency value.\n\n\nColors and other settings can be freely adjusted.\n\n\nSee \nMomentum\n, \nROC\n.\n\n\nRegarding usage with a scanner:\n\nTo get a list of your favorite stocks and their daily percentual changes, please set CalculateOnClosedBar to \u201cFalse\u201d, TimeFrame to \u201c1 Day\u201d, Calculation mode to \u201cPercent\u201d and Days ago to \u201c0\u201d.\n\n\n\n\nThe result will look similar to this:\n\n\n\n\nUsage\n\n\nDailyPerformance(DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)\nDailyPerformance(IDataSeries inSeries,DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)\nDailyPerformance(DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)[int barsAgo]\nDailyPerformance(IDataSeries inSeries,DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDailyPerformance\n(...)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nreference Possible values are:\n-   DailyPerformanceReference.Open\n-   DailyPerformanceReference.PreviousClose\n\n\nmode Possible values are:\n-   DailyPerformanceCalculationMode.Points\n-   DailyPerformanceCalculationMode.Ticks\n-   DailyPerformanceCalculationMode.Percent\n-   DailyPerformanceCalculationMode.Currency\n\n\ndaysAgo Number of days in the past\n\n\nVisualization\n\n\n\n\nExample\n\n\n//How many ticks are between today\u2019s open and the current price?\nDailyPerformance(DailyPerformanceReference.Open, DailyPerformanceCalculationMode.Ticks, 1)[0]\n\n//By how much percent did the stock rise/fall since the last closing price?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Percent, 1)[0]\n\n//By how many points/ticks did the future deviate from the start of the trading week to the current value?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Points, 3)[0]\n\n//How many EURO/USD does the performance equal?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Currency, 3)[0]\n\n//How big is the overnight gap in comparison to the opening price?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Points, 1)[0]\n\n\n\n\nDailyQuoteMoves\n\n\nDescription\n\n\nThis indicator shows the daily price moves of the current market, starting at the zero line each day.\nWith this indicator you can see if the Market is currently over/under water based on the perspective of the market open.\ne.g. the FDAX has the character that after reaching the 100, 200, 400 level, the market has a potential to turn.\n\n\nWorks only with intraday charts!\n\n\nUsage\n\n\nDailyQuoteMoves()\nDailyQuoteMoves(IDataSeries inSeries)\nDailyQuoteMoves()[int barsAgo]\nDailyQuoteMoves(IDataSeries inSeries) [int barsAgo]\n\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nDailyQuoteMoves\n(...)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//How many ticks are in between closing price of current bar and opening price of the current day? If this bar is the first of the day, the difference will be shown Open-Close of the bar\nDailyQuoteMoves()[0]\n\n\n\n\n\nDayLines\n\n\nDescription\n\n\nThe DayLines indicator draws lines for the previous day\u2019s high, low, and close. It also draws a line for the current day\u2019s open. These lines often show a reaction to the market.\nEach line can be turned on or off, and the colors and line strengths can be freely set.\n\n\nSee \nCurrentDayOHL\n, \nPriorDayOHLC\n.\n\n\nVisualization\n\n\n\n\nDayLinesAdv\n\n\nDescription\n\n\nDayLinesAdv draws horizontal lines for the previous day\u2019s high, low, and close, as well as the current day\u2019s open.\n\n\nCurrentDayOHL\n, \nPriorDayOHLC\n.\n\n\nDaysBack parameter\n\n\nThe DaysBack parameter sets the number of days in the past for which the lines are to be placed onto the chart.\n\n\nInclude Weekends parameter\n\nThis parameter manages the interaction with weekend price data. If IncludeWeekends = true, the price data for a trading session resulting from the weekend data is added to the last trading session.\n\n\nThis is generally applicable to traders in different time zones. For example, a trader located in Germany will receive EURUSD data that beginning on Sunday evenings in America.\nTo add the couple of hours that are transcribed on Sunday to the previous Friday\u2019s session, you simply need to set IncludeWeekends = true.\nThe first picture shows IncludeWeekends = false:\n\n\n\n\nThe second picture shows IncludeWeekends = true:\n\n\n\n\nShow Prices parameter\n\nIf set to \u201ctrue\u201d, prices are displayed in addition to the line itself.\n\n\n\n\nExtend high lines and Extend low lines parameters.\n\nIf set to \u201ctrue\u201d, the highs and lows that have not yet been \u201ebreached\u201c by the price will be extended onto the right-hand side of the chart using dotted lines.\n\n\n\n\nGetDayBar\n\n\nDescription\n\n\nThe function GetDayBar() outputs all values (open, high, low, close, time, median, typical, volume, and weighted) for a specified past or current day i.e. session. GetDayBar() is not intended to be used inside the chart. For this purpose, DayLinesAdv should be used instead. GetDayBar is mainly used as a high-performance replacement for \nPriorDayOHLC\n.\n\n\nSeveral data feed providers also offer historical data, in which case we recommend that you use GetDayBar. If it is intraday data that is offered, it still works adequately to use \nPriorDayOHLC\n.\n\n\nIf the outputted data varies, the main cause is normally assumed to be the difference between Session Begin and Session End.\n\n\nParameters\n\n\ndaysAgo Number of days in the past\n(0 for the current value)\n\n\nReturn value\n\n\nDateTime for time\ndouble for all other values\n\n\nFor \ndaysAgo = 0,\n the following applies:\nClose = current price (for CalculateOnClosedBar = false)\nTime = time of the current day\u2019s open\nAll other values are calculated using intraday data.\n\n\nUsage\n\n\nGetDayBar (int daysAgo)\n\n\n\n\nExample\n\n\n[TimeFrameRequirements(\"1 day\")]\npublic class xy : UserIndicator\n{\n  int daysAgo = 5;\n  double historicalClose = Instrument.Round2TickSize(GetDayBar(daysAgo).Close);\n}\n\nprotected override void OnStart()\n{\n  Print(\"The closing price from \" + daysAgo + \" days ago was at \" + historicalClose);\n}\n\n\n\n\nImportant:\n\nThe attribute \nTimeFrameRequirements\n must also always be used for the class doing the calling up (in the above example, class xy) if the indicator uses \nMultibars\n.\n\n\nInfo\n\n\nDescription\n\n\nInfo is not an indicator in the classic sense of the word, but is actually more similar to a tool. Depending on the underlying instrument, the background of the chart may show additional information.\n\n\nVisualization\n\n\n\n\nMaximum (MAX)\n\n\nDescription\n\n\nMax (MAX) delivers the highest value for a predefined number of periods.\n\n\nUsage\n\n\nMAX(int period)\nMAX (IDataSeries inSeries, int period)\nMAX (int period)[int barsAgo]\nMAX (IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nMAX\n(Close, 10)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n// Output of the highest value of the last 20 periods\n// The output is identical to high [GetSerieHighestValue(High,20)]\nPrint(\"The highest value of the last 20 periods is \" + MAX(High, 20)[0]);\n\n\n\n\nMinimum (MIN)\n\n\nDescription\n\n\nMinimum (MIN) outputs the lowest value for a predefined number of periods.\n\n\nUsage\n\n\nMIN (int period)\nMIN (IDataSeries inSeries, int period)\nMIN (int period)[int barsAgo]\nMIN (IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nMIN\n(Close, 10)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n// Outputs the lowest value for the last 20 periods\nPrint(\"The lowest value of the last 20 periods is \" + MIN(Low, 20)[0]);\n\n\n\n\nMTFBoxes\n\n\nDescription\n\n\nWhat MTFBoxes does is to draw a colored area behind the bars that signify a candle from a higher timeframe. This therefore makes it possible to depict an hourly candle inside a 5-minute chart. The area would contain all 5-minute bars that are located within said hourly candle.\n\n\nThe area turns greener if the candle of the higher timeframe is rising. A Doji would be shown in grey.\n\n\nParameters\n\n\nTimeFrame Timeframe of the \u201cvirtual\u201d candle (second, minute, hour, day, week, month)\nTimeFrameValue Value of the timeframe (number)\n\n\nVisualization\n\n\n\n\nPriceLine\n\n\nDescription\n\n\nPriceLine is not so much an indicator, but more of a tool.\nIt places a horizontal line on top of the current market price within the chart.\nThe colors and line widths are freely configurable.\n\n\nVisualization\n\n\n\n\nPriorDayOHLC\n\n\nDescription\n\n\nPriorDayOHLC shows the values for yesterday\u2019s (i.e. the previous session\u2019s) open, high, low, and close. PriorDayOHLC works best when used together with the intraday data series.\n\n\nPriorDayOHLCext\n\nPriorDayOHLCext For people in different time zones, PriorDayOHLCext makes it possible to set the IncludeWeekend parameter to \u201ctrue\u201d, which is helpful because all data originating from a Saturday or Sunday is treated as if it comes from the previous Friday\u2019s session.\n\n\nSee \nCurrentDayOHL\n, \nDayLines\n.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nPriorDayOHLC\n().PriorHigh[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nUsage\n\n\nPriorDayOHLC()\nPriorDayOHLC(IDataSeries inSeries)\n\n//For the value of open\nPriorDayOHLC().PriorOpen[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorOpen[int barsAgo]\n\n//For the value of high\nPriorDayOHLC().PriorHigh[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorHigh[int barsAgo]\n\n//For the value of low\nPriorDayOHLC().PriorLow[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorLow[int barsAgo]\n\n//For the value of close\nPriorDayOHLC().PriorClose[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorClose[int barsAgo]\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\n// Value from the previous trading day\nPrint(\"Yesterday\u2019s open was \" + PriorDayOHLC().PriorOpen[0]);\nPrint(\"Yesterday\u2019s high was \" + PriorDayOHLC().PriorHigh[0]);\nPrint(\"Yesterday\u2019s low was \" + PriorDayOHLC().PriorLow[0]);\nPrint(\"Yesterday\u2019s close was \" + PriorDayOHLC().PriorClose[0]);\n\n\n\n\nPriorDayOHLCext\n\n\nSee \nPriorDayOHLC\n.\n\n\nSessionBreakLines\n\n\nDescription\n\n\nThe indicator SessionBreakLines draws a vertical line at the first candle of a new trading session.\nWhat is special about this indicator is that you can manually set how the so-called \u201cweekend sessions\u201d should be handled. If the parameter IncludeWeekends is set to \u201ctrue\u201d, then the Sunday sessions will be added to the Friday\u2019s session.\nSee \nPriorDayOHLC\n.\n\n\nVisualization\n\n\n\n\nShowBidAsk\n\n\nDescription\n\n\nThe ShowBidAsk indicator displays the current bid and ask prices as well as the corresponding volume within the lower part of the chart. It also shows changes in volume even if a trade has not occurred.\n\n\nVisualization\n\n\n\n\nTickCounter\n\n\nDescription\n\n\nTickCounter provides information regarding the current number of ticks that are contained within the bar. The indicator can not only count starting from 0, but can also be set to count from a specified number down to 0. TickCounter can display the value either as absolute or as a percentage. It only works with candle charts in which the bars are established based on a fixed number of ticks.\n\n\nWhen programming your own scripts, please use Bars, TicksCountForLastBar or Bars, LastBarCompleteness.\n\n\nVisualization\n\n\n\n\nTrue Strength Index (TSI)\n\n\nDescription\n\n\nThe True Strength Index (TSI) is a momentum indicator. It is used as an indicator for trend direction and for displaying overbought or oversold conditions.\nAs a rule, momentum oscillators preemptively indicate price changes, whereas moving averages generally lag behind the price. The TSI brings together the advantages of these two indicator groups.\n\n\nInterpretation\n\n\nThe TSI line moves between 100 and -100. Most values are between +25 and -25. These trigger lines can be used to anticipate overbought or oversold situations. A rising TSI signals an uptrend, while falling TSI suggests a downtrend.\n\n\nFurther information\n\n\nhttp://en.wikipedia.org/wiki/True_strength_index\n\n\nUsage\n\n\nTSI(int fast, int slow)\nTSI(IDataSeries inSeries, int fast, int slow)\nTSI(int fast, int slow)[int barsAgo]\nTSI(IDataSeries inSeries, int fast, int slow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nTSI\n(3,14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nfast Number of bars included in the calculation of the fast EMA\n\n\nslow Number of bars included in the calculation of the slow EMA\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current value for the True Strength Index (TSI)\nPrint(\"The current value for the TSI is \" + TSI(3, 14)[0]);\n\n\n\n\nUltimate Oscillator\n\n\nDescription\n\n\nLarry Williams developed the Ultimate Oscillator, which was first published in 1985. The Ultimate Oscillator is calculated by means of taking the weighted sum of three oscillators in different timeframes. These three timeframes are the short-term, middle and long-term market cycles. The typical period lengths used are 7, 14 and 28, and the value of the indicator moves between 0 and 100. Values above 70 signify an overbought situation, and values below 30 show that it is oversold.\n\n\nInterpretation\n\n\nWilliams defined the following criteria for a buy signal:\n\n\nA bullish divergence between price and oscillator can be observed, meaning that the market makes a new low but the oscillator remains unchanged.\n\n\nWhile this divergence is forming, the oscillator falls below 30.\n\n\nThe oscillator will then resume its upward move towards the high at which it peaked before the divergence began forming.\n\n\nThe buy signal is created when the price breaches that last high.\n\n\nThe long position is closed if the oscillator rises above 70 or if the oscillator rises above 50 and then falls back below 45.\nA sell signal consists of bearish divergences forming above 70. These positions are closed once the 30 level marker is breached.\n\n\nUsage\n\n\nUltimateOscillator(int fast, int intermediate, int slow)\nUltimateOscillator(IDataSeries inSeries, int fast, int intermediate, int slow)\nUltimateOscillator(int fast, int intermediate, int slow)[int barsAgo]\nUltimateOscillator(IDataSeries inSeries, int fast, int intermediate, int slow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nUltimateOscillator\n (5)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninSeries\n\n\nInput data series for the indicator\n\n\n\n\n\n\nfast\n\n\nNumber of bars for the calculation of the short-term oscillator\n\n\n\n\n\n\nintermediate\n\n\nNumber of bars for the calculation of the intermediate oscillator\n\n\n\n\n\n\nslow\n\n\nNumber of bars for the calculation of the slow indicator\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\n// Output of the values for the UltimateOscillator with settings of 7,14,28\nPrint(\"The current value for the Ultimate Oscillator is \" + UltimateOscillator(7, 14, 28)[0]);\n\n\n\n\nVolume (VOL)\n\n\nDescription\n\n\nThis is the volume for the shares, futures, ETFs and so on that are traded within a specified time period.\n\n\nFurther information\n\n\nhttp://de.wikipedia.org/wiki/Volumenanalyse\n\n\nUsage\n\n\nVOL()\nVOL(IDataSeries inSeries)\nVOL()[int barsAgo]\nVOL(IDataSeries inSeries)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nVOL\n()[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current volume\nPrint(\"The current volume is \" + VOL()[0]);\n\n\n\n\nVolume Moving Average (VOLMA)\n\n\nDescription\n\n\nThe VOLMA calculation is carried out by applying an exponential moving average to the respective volume of each period, that is to say its EMA (volume).\n\n\nCaution:\n\nIn trading literature, the Volume Moving Average is often confused with the abbreviation for the Variable Moving Average (VMA).\n\n\nInterpretation\n\n\nThe VOLMA indicator helps you to find and assess the relative volume of a period.\n\n\nSome simple guidelines should be followed:\n\n\nThe volume should be above the VOLMA at a break\n\n\nAfter a volume spike (high), an exhaustion phase will kick in. The exhaustion can lead to a complete reversal of the price movement. Generally speaking, however, this is simply a resting phase\n\n\nAfter three successive volume spikes, it becomes much less likely that the situation will continue in the same direction\n\n\nHere, you can find more general information about \nMoving Averages\n.\n\n\nFurther information\n\n\nVolumen-Analyse.de: \nhttp://www.volumen-analyse.de\n\n\nUsage\n\n\nVOLMA(int period)\nVOLMA(IDataSeries inSeries, int period)\nVOLMA(int period)[int barsAgo]\nVOLMA(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nVOLMA\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output for the value of the Volume Moving Average (VOLMA)\nPrint(\"The current VOLMA value is \" + VOLMA(14)[0]);\n\n\n\n\nVolume Oscillator\n\n\nDescription\n\n\nThe Volume Oscillator makes use of the difference between the moving averages based on the trading volume, with a similar result to the MACD or to any other oscillator in which moving averages are used for calculation.\n\n\nInterpretation\n\n\nThe Volume Oscillator is used to determine the trend strength. If developments in the price of the share are accompanied by disproportionate volume oscillator values, this should be regarded as highly relevant. In this way, the indicator can be used to filter out false signals.\nValues above zero mean that the shortest moving average of the volume is above the long-term moving average. IsSerieRising prices with a higher short-term volume indicate a bullish scenario.\n\n\nUsage\n\n\nVolumeOscillator(int fast, int slow)\nVolumeOscillator(IDataSeries inSeries, int fast, int slow)\nVolumeOscillator(int fast, int slow)[int barsAgo]\nVolumeOscillator(IDataSeries inSeries, int fast, int slow)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nVolumeOszillator\n(12,26)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nfast Number of bars for the calculation of the fast moving average\n\n\nslow Number of bars for the calculation of the slow moving average\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current value for the Volume Oscillator\nPrint(\"The current value for the Volume Oscillator is: \" + VolumeOszillator(12,26)[0]);\n\n\n\n\nVolume Profile\n\n\nDescription\n\n\nThe VolumeProfile indicator displays the real-time volume profile as a vertical histogram on the chart. In this histogram, every bar depicts the cumulative traded volume for a certain price level. The starting bar for the calculations is labeled with a \u201c#\u201d.\nThese bars inside the histogram have various colors: green indicates executions at or above the ask, which are interpreted as buys. Red means trades at or below the bid, which are interpreted as sells. Grey signifies neutral executions.\nIt is important to note that the Volume Profile indicator only works together with a real-time data feed. After changes have been made in the properties window, the indicator is restarted and all values that have been calculated up to this point are lost.\n\n\nSee: \nVolumeZones\n\n\nInterpretation\n\n\nPrices with especially high trading volume will have a more satiated accumulation and distribution at their respective levels. This leads to price resistance/support zones being formed.\n\n\nVisualization\n\n\n\n\nVolume Rate of Change (VROC)\n\n\nDescription\n\n\nThe Volume Rate of Change (VROC) is almost exactly the same as the ROC indicator, with the exception that instead of price data, volume data (VOL) is used. A smoothing component is also applied.\n\n\nFurther information\n\n\nhttp://www.shareholder24.de/boersensoftware-wiki/pages/viewpage.action?pageId=9207904\n\n\nUsage\n\n\nVROC(int period, int smooth)\nVROC(IDataSeries inSeries, int period, int smooth)\nVROC(int period, int smooth)[int barsAgo]\nVROC(IDataSeries inSeries, int period, int smooth)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nVROC\n(14,3)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nsmooth Number of Bars included in the calculation for the smoothing\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current value for the Volume ROC\nPrint(\"The current value for the Volume ROC is: \" + VROC(14, 3)[0]);\n\n\n\n\nVolumeArea\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nSimilarly, with this indicator you can also have your own volume profiles displayed. Here you can now determine the start and end time completely freely by clicking on your desired position. There are no restrictions as to where the calculation should start and end. In the upper right corner you have the setting options with which you can switch between the profile types (for a description of these, read more under VolumeSessionPro). With a click on the little red \u201c+\u201d under the profile settings, you can add a further volume profile to your chart; you do so by once again determining the start and end time by left-clicking.\n The settings and the display of the indicator are exactly equivalent to the VolumeSessionPro: via ProfileType you select which calculation method should be used; via ValueArea you determine the percentage for what portion of the volume area should be colored with the highest activity. \nThe most effective way of working with the VolumeArea is to place this indicator in the action bar and assign it a hot key. In this way, if necessary, the indicator can be quickly called up and you can specify the desired volume area.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeGraph\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator contains a normal volume histogram, but here, the coloring takes place based on price trends. The VolumeGraph determines short- or long-term price trends; you can set the sensitivity for this using the parameter \u201cSlopeLength\u201d. A high value delivers long-term trends; low values represent short-term price trends. Using the setting \u201cExponential\u201d, you can select whether the calculation for trend determination should be based on an exponential (=True) or linear (=False) algorithm. This is about the fine-tuning, and no large changes should be expected with this parameter. In addition, the volume histogram also contains a moving average, for which you can enter the period using the parameter \u201cAvgLength\u201d.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeKeltnerChannels\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe VolumeKeltnerChannels are a great tool to determine very high or very low volume in comparison to past periods. Beginning with an upper Keltner channel line calculated with volume data, this line is shifted ever further upwards or downwards using special multipliers. Volume that is higher than the highest Keltner channel line can be interpreted as extremely high volume that shows that huge numbers of trades have been carried out in the current price period and that an unusually large number of traders are buying or selling positions at the current price level.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeRiseFall\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe VolumeRiseFall indicator is a normal volume display as volume bars, with, however, a different coloring than normal. A volume bar is drawn in green when the volume of this bar is higher than the volume of the previous bar, meaning that rising volume is present. A volume bar is drawn in gray when the volume of this bar is lower than the volume of the previous bar, thereby showing falling volume.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeSentimentLong\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator detects bullish volume activity based on the analysis of the volume of a period, the price span of a bar and the close of the bar (=VolumeSpreadAnalysis). \n\n\nIt screens for 3 signals (listed are the sub-criteria that must be met for the respective signal):\n\n\n\n\n\n\nSellingClimax (dark green)\n 6.11..1. Lowest low since 50 periods \n 6.11..2. Bar with large range \n 6.11..3. Extremely high volume \n\n\n\n\n\n\nDemandComingIn (lime green) \n 6.11..1. UpBar (current close larger than previous close) \n 6.11..2. Previous Bar: DownBar (close smaller than previous close) \n 6.11..3. Previous Bar: Bar with large range \n 6.11..4. Previous Bar: Above-average high volume\n\n\n\n\n\n\nBagHolding (light green) \n 6.11..1. Lowest low since 50 periods \n 6.11..2. DownBar \n 6.11..3. Bar with small range \n 6.11..4. Above-average high volume \n 6.11..5. Close larger than or equal to the middle of the bar\n\n\n\n\n\n\nThe VolumeSentiments provide the foundation for the calculation of the volume condition; see point 5. When a bullish VolumeSentiment occurs, the bar is colored in the respective color of the signal; you can change this color in the parameter setting\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeSentimentShort\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator is the counterpart to the VolumeSentimentLong and detects bearish volume activity based on the analysis of the volume of a period, the price span of a bar and the close of the bar (=VolumeSpreadAnalysis). \n\n\nIt screens for 3 signals (listed are the sub-criteria that must be met for the respective signal):\n\n\n\n\n\n\nBuyingClimax (dark red) \n 6.12..1. Highest high since 50 periods \n 6.12..2. Bar with large range \n 6.12..3. Extremely high volume \n\n\n\n\n\n\nSupplyComingIn (red) \n 6.12..1. DownBar \n 6.12..2. Previous Bar: UpBar \n 6.12..3. Previous Bar: Bar with large range \n 6.12..4.Previous Bar: Above-average high volume\n\n\n\n\n\n\nEndOfRisingMarket (coral) \n 6.12..1. Highest high since 50 periods \n 6.12..2. UpBar \n 6.12..3. Bar with small range \n 6.12..4.Above-average high volume \n 6.12..5.Close smaller than or equal the middle of the bar\n\n\n\n\n\n\nThe VolumeSentiments provide the foundation for the calculation of the volume conditions; see point 5. When a bearish VolumeSentiment occurs, the bar is colored in the respective color of the signal; you can change this color in the parameter settings.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeSessionPro\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThis indicator is equivalent to the well-known VolumeProfile indicator with a display for a specific time span (session). You can determine the start time and the length of a session however you wish. For each session, the VolumeProfile is then shown. Use this indicator only in timeframes smaller than 1 day; the smaller the timeframe selected, the more detailed the display of the VolumeProfile. The price at which the most volume was traded in the respective session is shown as a red bar. The price area in which, for example, 70% of the trading activity for the respective session took place, is colored light blue. You can determine this percentage yourself as you wish under the parameter \u201cValueArea\u201d. Furthermore, you have four different options for displaying the volume information:\n\n\nFurthermore, you have four different options for displaying the volume information: \n\n\n4.1.1. VOC (Volume on close):\n Loads the entire volume of a bar at the closing price of this bar \u2013 e.g. if a 5-minute bar has a volume of 280 and a range of 1.5 points with a closing price at 1534.25, all 280 volume units are counted at the closing price of 1534.24.\n\n\n4.1.2. TPO (Time price opportunity):\n This method does not take the actual traded volume into account, but instead counts an individual volume unit for each price in the traded range of the bar \u2013 e.g. if a 5-minute bar has its high at 1534 and its low at 1532.5, then one volume unit is counted for each of the following prices: 1532.50, 1532.75, 1533.0, 1533.25, 1533.50, 1533.75, and 1534. \n\n\n4.1.3. VWTPO (Volume weighted time price opportunity):\n This version distributes the traded volume of a bar across its price range \u2013 e.g. if a 5-minute bar exhibits a volume of 280 with a range of 1.5 points, with its high at 1534 and low at 1532.5, then 40 volume units (=280/7) are added to each of the seven prices in this range: 1532.50, 1532.75, 1533.0, 1533.25, 1533.50, 1533.75, and 1534.\n\n\n4.1.4. VTPO (Volume time price opportunity):\n Here, the traded volume is added to each price of the range \u2013 e.g. if a 5-minute bar has 280 volume units, a range of 1.5 points with a high at 1534 and low at 1532.5, then 280 volume units are added to each of the seven prices of the range:: 1532.50, 1532.75, 1533.0, 1533.25, 1533.50, 1533.75, and 1534.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeTickSpeed\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nATTENTION!\n You can only use this indicator in the tick chart! The indicator measures the number of ticks that are traded during a number of seconds defined by the user. You can set the number of seconds under the parameter \u201cPeriod\u201d. A high tick speed can, therefore, be equated with high trading intensity, which can in turn often be observed at turning points in the market. With the parameter \u201cLimitValue\u201d, you can specify from which number of ticks during the selected period the background should be colored in order to display extreme values.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeUDR\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe VolumeUpDownRatio is the relationship between UpVolume and DownVolume, displayed as an oscillator. Volume is classified as UpVolume when the current close of the price candle is located above the close of the prior candle; the opposite applies for DownVolume. Values above 80 are to be graded as a bearish signal; values under 20 as a bullish signal. Besides this, a moving average can be shown, which can serve as an additional signal generator. \n\n\n\n\n\n\nUsing \u201cDrawCandleOutline\u201d, you can have the border of your candles colored accordingly when bullish/bearish extreme values occur.\n\n\n\n\n\n\nPriceWeightChange regulates whether you would like to have the weighted change of the market price flow into the calculation of the indicator.\n\n\n\n\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nVolumeUpDown\n\n\nDescription\n\n\nThis indicator is a variation of the volume indicator, with the slight difference that the volume bars are shown in different colors depending on whether the price movement forms an up or down bar. An up (rising) bar shows the volume in green, while a down (falling) bar shows the volume in red. A Doji, where open = close, shows the volume in blue.\n\n\nUsage\n\n\nVolumeUpDown()\nVolumeUpDown(IDataSeries inSeries)\nVolumeUpDown()[int barsAgo]\nVolumeUpDown(IDataSeries inSeries)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nVolumeUpDown\n()[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameter\n\n\ninSeries Input data series for the indicator\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the current volume\nPrint(\"The current volume is \" + VolumeUpDown()[0]);\n\n\n\n\nVolume Zones\n\n\nDescription\n\n\nThis indicator draws a histogram on the left side of the chart. This histogram contains the historical volume, and inside the histogram, the length of the bars shows the cumulative volume. Traders can configure the price series (open, high, low etc.) with the help of the properties dialog box.\nAn up bar (where the close is above the open) shows the bar in green, and falling bars are displayed in red. The indicator is only designed to be used with historical data. In order to view volume changes in real-time, it is wise to consider using the VolumeProfile.\n\n\nVolumeZoneOscillator\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe VolumeZoneOscillator divides the volume activity into UpVolume and DownVolume, similarly to the VolumeUDR. Volume is ranked as UpVolume when the current closing price is located above the prior closing price; vice versa for DownVolume. The oscillator calculated hereby outputs relative percentage values. An instrument is in a positive trend when the VolumeZoneOscillator rises above a level of 5% and vice versa in a negative trend, when it falls below -5%. Values above 40% show overbought situations, while values above 60% are an indication for an extreme exaggeration in the market. On the other hand, values smaller than -40% are deemed oversold and values smaller than -60% to be classified as enormously oversold and exaggerated.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nWilliams %R\n\n\nDescription\n\n\nLarry Williams developed the Williams %R. It is a momentum indicator, and is the inverse of the Fast Stochastic Oscillator. Williams %R, which is also called simply %R, reflects the level of the close relative to the highest high for the look-back period. The Stochastic Oscillator, on the other hand, reflects the level of the close relative to the lowest low. %R multiplies the raw value by -100 as a means of correcting for the inversion. This means that the Fast Stochastic Oscillator and Williams %R actually produce the exact same lines, with different scaling. The Williams %R fluctuates between 0 and -100. Values between 0 to -20 are deemed overbought, and values from -80 to -100 are seen as oversold. Naturally, signals taken from the Stochastic Oscillator can also be applied to Williams %R.\n\n\nInterpretation\n\n\nAs with the Stochastic Oscillator, Williams %R reflects the level of the close relative to the high-low range over a given period of time. Assume that the highest high equals 110, the lowest low equals 100 and the close equals 108. The high-low range is 10 (110 - 100), which is the denominator in the %R formula. The highest high less the close equals 2 (110 - 108), which is the numerator. 2 divided by 10 equals 0.20. Multiply this number by -100 to get -20 for %R. Williams %R would equal -30 if the close was 103 (0.30 x -100).\n\n\nThe centerline, -50, is an important level to watch. Williams %R moves between 0 and -100, which makes -50 the midpoint. Think of it as the 50 yard line in football. The offense has a higher chance of scoring when it crosses the 50 yard line. The defense has an edge as long as it prevents the offense from crossing the 50 yard line. A Williams %R cross above -50 signals that prices are trading in the upper half of their high-low range for the given look-back period. This suggests that the cup is half full. Conversely, a cross below -50 means prices are trading in the bottom half of the given look-back period. This suggests that the cup is half empty.\n\n\nLow readings (below -80) indicate that the price is near its low for the given time period. High readings (above -20) indicate that the price is near its high for the given time period.\n\n\nFurther information\n\n\nhttp://www.broker-test.de/finanzwissen/technische-analyse/williams-percent-r/\n\n\nUsage\n\n\nWilliamsR(int period)\nWilliamsR(IDataSeries inSeries, int period)\nWilliamsR(int period)[int barsAgo]\nWilliamsR(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nWilliamsR\n(14)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nParameters\n\n\ninSeries Input data series for the indicator\n\n\nperiod Number of bars included in the calculations\n\n\nVisualization\n\n\n\n\nExample\n\n\nWilliamsR(int period)\nWilliamsR(IDataSeries inSeries, int period)\nWilliamsR(int period)[int barsAgo]\nWilliamsR(IDataSeries inSeries, int period)[int barsAgo]\n\n\n\n\nWyckoffWave\n\n\nThe installation of the Technical Analysis Package is required in order to access this indicator.\n\n\nDescription\n\n\nThe WyckoffWave indicator adds the volume for each following bar until a price wave is over / finished. You can set the sensitivity of the price waves. When the  volume of a wave rises to particularly high values, is it very often because a turning point in the chart has been reached. When the volume bars are colored red, we are dealing with a short wave; green volume bars indicate a long wave. \n\n\nUsing the parameter \u201cMedianPeriod\u201d you can select how sensitively the indicator should determine the individual price waves. The smaller the value, the larger the price waves that the indicator calculates. \n\n\nThe parameter Poles serves to fine-tune the display of the volume waves; you can select a parameter between 1-4. Changing this value usually causes only imperceptible changes.\n\n\nParameters\n\n\nto be announced\n\n\nReturn value\n\n\nto be announced\n\n\nUsage\n\n\nto be announced\n\n\nVisualization\n\n\n\n\nExample\n\n\nto be announced\n\n\nZigZag\n\n\nDescription\n\n\nThe ZigZag indicator searched for extreme points in different timeframes. It finds the extreme points by using threshold values that traders themselves define. These specified threshold values determine the extent to which the market direction needs to change before the ZigZag line alters its orientation and forms a further extreme point.\n\n\nInterpretation\n\n\nThe previous extreme values (local highs or lows) are ideally suited for either entries or stop targets.\n\n\nCaution:\n The ZigZag is not an indicator in the common sense. Position and direction of the zigzag can change retrospectively (repainting indicator).\n\n\nFurther information\n\n\nhttp://www.robotrading.de/indikatoren/zig-zag-indikator-zeigt-hoch-und-tief-punkte-im-forex-markt\n\n\nUsage\n\n\n//For the upper extreme value\nZigZag(DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagHigh[int barsAgo]\nZigZag(IDataSeries inSeries, DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagHigh[int barsAgo]\n\n//For the lower extreme value\nZigZag(DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagLow[int barsAgo]\nZigZag(IDataSeries inSeries, DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagLow[int barsAgo]\n\n\n\n\nReturn value\n\n\ndouble\n\n\nWhen using this method with an index (e.g. \nZigZag\n(...)[\nint\n barsAgo] ), the value of the indicator will be issued for the referenced bar.\n\n\nA return value of 0 indicates that no high or low point has been found yet.\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninSeries\n\n\nInput data series for the indicator\n\n\n\n\n\n\ndeviationType\n\n\nThe change in points or percent\n\n\n\n\n\n\nDeviationType.Points and DeviationType.Percent\n\n\n\n\n\n\n\n\ndeviationValue\n\n\nValue of the deviation\n\n\n\n\n\n\nuseHighLow\n\n\nDefines whether the high/low of a bar will be used for extreme values or if you want to use closing prices instead\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nExample\n\n\n//Output of the market value for the last high point\nPrint(\"The last high of the ZigZag indicator was at \" + ZigZag(DeviationType.Percent, 1, true).ZigZagHigh[0]);\n\n// Output of the market value for the last low point\nPrint(\"The last low of the ZigZag indicator was at \" + ZigZag(DeviationType.Percent, 1, true).ZigZagLow[0]);",
            "title": "Indicators & Oscillators"
        },
        {
            "location": "/indicators_oscillators/#indicators-oscillators",
            "text": "Trade like the professionals!  AgenaTrader provides you with a variety of powerful indicators that will assist you with your individual market analysis.  Indicators can be used in\n-   Charts\n-   Condition Escort\n-   AgenaScript  For each indicator you will find a brief description of its interpretation, operation and functionality, a graphical representation on a chart and further technical details for its usage with AgenaScript.",
            "title": "Indicators & Oscillators"
        },
        {
            "location": "/indicators_oscillators/#accumulationdistribution-adl",
            "text": "Description  The Accumulation Distribution LevelLine (ADL) indicator was developed by Marc Chaikin. The ADL is a volume indicator that represents the money flow. The ADL is an improvement of the On-Balance Volume Indicator created by Joe Granville, which was actually one of the very first volume indicators.  Interpretation  There are two interpretations of the ADL:  Confirmation of a trend or   The depiction of  divergence   If the ADL is rising in an uptrend, then money is flowing in the direction of the rising prices, thus the uptrend is confirmed. If the ADL is falling in a downward trend, money is being taken out of the stock, thus confirming the downtrend.  Further information  vtadwiki.vtad.de  Usage  ADL()\nADL(IDataSeries inSeries)\nADL()[int barsAgo]\nADL(IDataSeries inSeries)[int barsAgo]  Return value  double  When using the method with an index (e.g. ADL()[int barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameter  inSeries Input data series for the indicator  Visualization   Example  //Testing the direction of the ADL\nif (IsSerieRising(ADL())\nPrint(\"The ADL indicator is rising.\");",
            "title": "Accumulation/Distribution (ADL)"
        },
        {
            "location": "/indicators_oscillators/#adaptive-price-zone-apz",
            "text": "Description  This is a technical indicator developed by Lee Leibfarth in 2006. The Adaptive Price Zone is a volatility-based indicator shown as a set of bands laid over a price chart. The APZ, which is particularly useful in non-trending, choppy markets, was developed with the aim of helping traders to find potential turning points in the markets. The APZ is based on a short-term, double-smoothed EMA that reacts rapidly to price changes with reduced lag. It works in the following way: the bands create a channel that envelopes the average price and tracks price changes. If the price crosses over the upper band of the zone, this creates an opportunity for the trader to trade a reversal. For the lower band, the reverse is true.  Interpretation  The bigger the price movement, the greater the distance between the upper and lower band will be. The smaller the price movement, the smaller the distance between the bands. More widely spaced bands will indicate increased instability and volatility, whereas closely tuned bands will display reduced volatility. If the price action breaks through the upper or lower band then the APZ will tend to return to its statistical average. This will lead to trading opportunities where the market may try to compensate for imbalances. If the price overshoots the bands for example, as mentioned in the description, then this will present you with a trading opportunity in the opposite direction.  Further information  http://www.investopedia.com/articles/trading/10/adaptive-price-zone-indicator-explained.asp  Usage  APZ(double barPct, int period)\nAPZ(IDataSeries inSeries, double barPct, int period)\nUpper Band\nAPZ(double barPct, int period).Upper[int barsAgo]\nAPZ(IDataSeries inSeries, double barPct, int period).Upper[int barsAgo]\nLower Band\nAPZ(double barPct, int period).Lower[int barsAgo]\nAPZ(IDataSeries inSeries, double barPct, int period).Lower[int barsAgo]  Return value  double  When using the method with an index (e.g.  APZ (2, 20)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  barPct Standard deviation  inSeries Input data series for the indicator  period Number of bars included in the calculation  Visualization   Example  //Output for the current values for the upper and lower band of a 20-period APZ\nPrint(\"Value for the upper APZ band : \" + APZ(2, 20).Upper[0]);\nPrint(\"Value for the lower APZ band: \" + APZ(2, 20).Lower[0]);",
            "title": "Adaptive Price Zone (APZ)"
        },
        {
            "location": "/indicators_oscillators/#aroon",
            "text": "Description  Aroon, an indicator system that determines whether or not a stock is trending and how strong this trend is, was developed by Tushar Chande in 1995. Its name is derived from the Sanskrit \u201cdawn\u2019s early light\u201d. Chande used this name to signify the indicators\u2019 purpose of revealing the start of a new trend. These indicators measure the number of periods since the last time the price recorded an x-day high or low. There are two distinct indicators: the Aroon-Up and Aroon-Down, whereby a 50-day Aroon-Up measures the number of days since a 50-day high, and a 50-day Aroon-Down measures the days since a 50-day low. This makes the Aroon indicators significantly different from the usual momentum oscillators, which concentrate on price in relation to time. What makes Aroon indicators unique is that they focus on time in relation to price. Aroon indicators can be used to detect emerging trends, identify consolidations, anticipate reversals and define correction periods.  Interpretation  The Aroon indicators fluctuate above/below a centerline (50) and are bound between 0 and 100. These three levels are important for interpretation. At its most basic, the bulls have the edge when Aroon-Up is above 50 and Aroon-Down is below 50. This indicates a greater propensity for new x-day highs than lows. The converse is true for a downtrend. The bears have the edge when Aroon-Up is below 50 and Aroon-Down is above 50.  A surge to 100 indicates that a trend may be emerging. This can be confirmed with a decline in the other Aroon indicator. For example, a move to 100 in Aroon-Up combined with a decline below 30 in Aroon-Down shows upside strength. Consistently high readings mean prices are regularly hitting new highs or new lows for the specified period. Prices are moving consistently higher when Aroon-Up remains in the 70-100 range for an extended period. Conversely, consistently low readings indicate that prices are seldom hitting new highs or lows. Prices are NOT moving lower when Aroon-Down remains in the 0-30 range for an extended period. This does not mean prices are moving higher though. For that we need to check Aroon-Up.  Further information  http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:aroon  Usage  Aroon(int period)\nAroon(IDataSeries inSeries, int period)\n//For the upper value\nAroon(int period).Up[int barsAgo]\nAroon(IDataSeries inSeries, int period).Up[int barsAgo]\n//For the lower value\nAroon(int period).Down[int barsAgo]\nAroon(IDataSeries inSeries, int period).Down[int barsAgo]  Return value  double  When using this method with an index (e.g.  Aroon (20)[ int  barsAgo] ) the value of the indicator will be displayed for the last referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars taken into consideration when calculating the values  Visualization   Example  //Output of the current up or down values for the 20 period Aroon\nPrint(\"Current value for Aroon Up is : \" + Aroon(20).Up[0]);\nPrint(\"Current value for Aroon Down is: \" + Aroon(20).Down[0]);",
            "title": "Aroon"
        },
        {
            "location": "/indicators_oscillators/#aroon-oscillator",
            "text": "Description  This oscillator is calculated by subtracting the Aroon-Down from the Aroon-Up. Usually, these two indicators are plotted next to each other for easy comparison, but traders can also view the difference between the two indicators using the Aroon oscillator, which can fluctuate between -100 and +100, with zero as the middle line. When the oscillator is positive, this indicates a bullish trend bias, whilst when the oscillator is negative, this shows a bearish trend bias. Chartists also have the option to extend the bull-bear threshold to spot stronger signals.  Interpretation  The Aroon Oscillator is ideally used as a trend filter and trend strength indicator. It is used analogously to the ADX Indicator.  Usage  AroonOscillator(int period)\nAroonOscillator(IDataSeries inSeries, int period)\nAroonOscillator(int period)[int barsAgo]\nAroonOscillator(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index such as ( AroonOcsillator (20)[ int  barsAgo] ), the value of the indicator will be outputted for the bar that was referenced.  Parameters  inSeries Input data series for the indicator  period Number of bars taken into consideration for the calculations  Visualization   Example  //Output for the current value for a 20 period Aroon Oscillator\nPrint(\"Value for the oscillator is: \" + AroonOscillator(20)[0]);",
            "title": "Aroon Oscillator"
        },
        {
            "location": "/indicators_oscillators/#average-directional-index-adx",
            "text": "Description  The ADX is part of a group of directional movement indicators that make up a trading system developed by Welles Wilder: the Average Directional Index, Minus Directional Indicator (-DI) and Plus Directional Indicator (+DI). Wilder designed ADX with daily prices and commodities in mind; however, these indicators can also be applied to stocks. The Average Directional Index measures the trend strength without taking trend direction into account, while the -DI and +DI complement the ADX by defining the trend direction. When used together, traders can find out both the direction and the strength of the trend.  Wilder talks about the Directional Movement indicators in his 1978 book, New Concepts in Technical Trading Systems, which also features details of Average True Range (ATR), the Parabolic SAR system and the RSI. Although he developed them before the computer age, Wilder\u2019s indicators are extremely detailed in their calculation and are still equally effective today.  Interpretation  The Average Directional Index (ADX) is used to measure the strength or weakness of a trend, not the actual direction. Directional movement is defined by +DI and -DI. In general, the bulls have the edge when +DI is greater than -DI, while the bears have the edge when -DI is greater. Crosses of these directional indicators can be combined with ADX for a complete trading system.  It should be kept in mind that Wilder was a commodity and currency trader. The examples in his books are based on these instruments, not stocks. This does not mean his indicators cannot be used with stocks. Some stocks have price characteristics similar to commodities, which tend to be more volatile with short and strong trends. Stocks with low volatility may not generate signals based on Wilder's parameters. Chartists will likely need to adjust the indicator settings or the signal parameters according to the characteristics of the security.  Further information  http://de.wikipedia.org/wiki/Average_Directional_Movement_Index  Usage  ADX(int period)\nADX(IDataSeries inSeries, int period)\nADX(int period)[int barsAgo]\nADX(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ADX (20)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculation  Visualization   Example  //Output of the current value of a 20 period ADX\nPrint(\"Value of the ADX: \" + ADX(20)[0]);",
            "title": "Average Directional Index (ADX)"
        },
        {
            "location": "/indicators_oscillators/#average-directional-movement-rating-adxr",
            "text": "Description  The ADXR is the ADX indicator plus the ADX from n days ago divided by 2. Written as an equation, it looks like this: (current ADX + ADX n days ago) / 2.  Interpretation  The oscillator moves along a guiding line that typically has a value of 20. When the ADXR rises above 20, a trend exists. If the ADXR is below 20, no trend exists and the market is moving sideways.\nWelles Wilder recommends buying into the market at a value of 25 and higher, and holding the position as long as the value remains above 20.  Usage  ADXR(int interval, int period)\nADXR(IDataSeries inSeries, int interval, int period)\nADXR(int interval, int period)[int barsAgo]\nADXR(IDataSeries inSeries, int interval, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ADXR (10, 14)[ int  barsAgo]), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  interval Interval between the first ADX value and the current ADX value  period Number of bars included in the calculation  Visualization   Example  //Output of the current value of the ADXR\nPrint(\"Value of the ADXR: \" + ADXR(10, 14)[0]);",
            "title": "Average Directional Movement Rating (ADXR)"
        },
        {
            "location": "/indicators_oscillators/#average-true-range-atr",
            "text": "Description & Interpretation  The Average True Range (ATR), which was developed by J. Welles Wilder, is an indicator that measures volatility. As is true for most of his indicators, Wilder designed the ATR with commodities and daily prices in mind. Commodities are often more volatile than stocks, and frequently experience gaps and limit moves, which happen when a commodity opens up or down its maximum allowed move for the session. A volatility formula that was based on the high-low range only would be unable to capture volatility from gap or limit moves. Wilder, therefore, developed the Average True Range to capture this \"missing\" volatility. Keep in mind that ATR does not provide an indication of price direction, but merely volatility.  The ATR is featured in Wilder\u2019s 1978 book, New Concepts in Technical Trading Systems, which also goes into detail about the Parabolic SAR, RSI and the Directional Movement Concept (ADX). Despite having been developed before the computer age, Wilder's indicators are equally functional today and remain extremely popular.  The starting point for Wilder was a concept called  True Range (TR) , which is defined as the greatest of the following:\n-   Method 1: current high minus the current low\n-   Method 2: current high minus the previous close (absolute value)\n-   Method 3: current Low minus the previous close (absolute value)  Absolute values are used for ensuring positive numbers, since Wilder was interested in measuring the distance between two points, not the direction. If the current period's high is above the prior period's high and the low is below the prior period's low, then the current period's high-low range will be used as the True Range. This is an outside day that would use method 1 to calculate the TR, and is quite straightforward. Methods 2 and 3 are used whenever there is a gap or inside day. A gap occurs when the previous close is greater than the current high (indicating a potential gap down or limit move) or the previous close is lower than the current low (indicating a potential gap up or limit move). The image below shows examples of when methods 2 and 3 are appropriate.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Average_True_Range  Usage  ATR(int period)\nATR(IDataSeries inSeries, int period)\nATR(int period)[int barsAgo]\nATR(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ATR (14)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculation  Visualization   Example  //Output of the current value of a 14 period ATR\nPrint(\"The current ATR value is: \" + ATR(14)[0]);",
            "title": "Average True Range (ATR)"
        },
        {
            "location": "/indicators_oscillators/#bbbreakoutspeed",
            "text": "Description  Shows the change in the width of the Bollinger Bands in comparison to the width of the Bollinger Bands of the previous bar.\nNegative (red) means that the Bollinger Bands are drawing together. (Larger than SignalSize -> Short, characterized by a more intense red)\nPositive (green) means that the Bollinger Bands are diverging. (Larger than SignalSize -> Long, characterized by a more intense green)  Usage  BBBreakOutSpeed(double bandsDeviation, int bandsPeriod, int signalsize) \nBBBreakOutSpeed(IDataSeries inSeries, double bandsDeviation, int bandsPeriod, int signalsize) \nBBBreakOutSpeed(double bandsDeviation, int bandsPeriod, int signalsize)[int barsAgo]\nBBBreakOutSpeed(IDataSeries inSeries, double bandsDeviation, int bandsPeriod, int signalsize)[int barsAgo]   Return value  double  When using this method with an index (e.g.  BBBreakOutSpeed (5)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  bandsDeviation Standard deviation for the Bollinger Bands  bandsPeriod Periods for the Bollinger Bands  signalsize The minimum height of the bar in order for it to produce a signal (long, short)  Visualization   Example  //If the width between the Bollinger Bands (standard deviation 2, period 20) has significantly (value > 15) increased in comparison to the previous period, a long position is opened.\n\nif(BBBreakOutSpeed(2, 20, 15).BandWidthEntrySignalBuffer[0] != 0)\n{\n    OpenLong(\"BBBreakOutSpeedLong\");\n}\n//If the width between the Bollinger Bands (standard deviation 2, period 20) has significantly (value > 15) decreased in comparison to the previous period, a short position is opened.\n\nif(BBBreakOutSpeed(2, 20, 15).BandWidthExitSignalBuffer[0] != 0)\n{\n    OpenShort(\"BBBreakOutSpeedShort\");\n}",
            "title": "BBBreakOutSpeed"
        },
        {
            "location": "/indicators_oscillators/#balance-of-power-bop",
            "text": "Description  The developer of the Balance of Power indicator was Igor Livshin, who came up with the BOP in August 2001. The BOP indicator represents the strength of the buyers (bulls) vs. the sellers (bears), and oscillates between -100 and 100. The calculation of the BOP = (close - open) / (high - low).  Interpretation  A directional change of the BOP can be interpreted as a warning signal and will generally be followed by a price change.  Usage  BOP(int smooth)\nBOP(IDataSeries inSeries, int smooth)\nBOP(int smooth)[int barsAgo]\nBOP(IDataSeries inSeries, int smooth)[int barsAgo]  Return value  double  When using this method with an index (e.g.  BOP (5)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  smooth Settings for the smoothing  Visualization   Example  //Output of the value for the BOP with a smoothing of 5 periods\nPrint(\"The Balance of Power value is: \" + BOP(5));",
            "title": "Balance of Power (BOP)"
        },
        {
            "location": "/indicators_oscillators/#bollinger-bands",
            "text": "Description & Interpretation  Bollinger Bands\u00ae, which were developed by John Bollinger, are volatility bands that are placed above and below a moving average. The volatility is based on the standard deviation, which fluctuates as volatility increases and decreases. An increase in volatility causes the bands to automatically widen, and a decrease in volatility causes them to automatically narrow. The Bollinger Bands\u2019 dynamic nature means that they can also be used on different securities with the standard settings. When it comes to signals, Bollinger Bands can be used to identify M-Tops and W-Bottoms, or for determining a trend\u2019s strength.  Bollinger Bands are made up of a middle band with two outer bands.  The middle band is a simple moving average that is normally set to 20 periods. The reason a simple moving average is used is that the standard deviation formula also uses a simple moving average. The look-back period for the standard deviation is the same as for the simple moving average. The outer bands are generally set 2 standard deviations above and below the middle band, but settings can be adjusted to suit the characteristics of specific securities or trading styles. Bollinger recommends making small, incremental adjustments to the standard deviation multiplier. Changing the number of periods for the moving average also has an effect on the number of periods used to calculate the standard deviation, which is why only small adjustments are required for the standard deviation multiplier. An increase in the moving average period would also automatically increase the number of periods used for calculating the standard deviation, as well as warranting an increase in the standard deviation multiplier. With a 20-day SMA and 20-day Standard Deviation, the standard deviation multiplier is set at 2. Bollinger recommends increasing the standard deviation multiplier to 2.1 for a 50-period SMA and decreasing the standard deviation multiplier to 1.9 for a 10-period SMA. Bollinger Bands reflect direction with the 20-period SMA and volatility with the upper/lower bands . This means that they can be used to determine whether prices are relatively high or low. Bollinger maintains that the bands should contain 88-89% of price action, rendering a move outside the bands very significant. Technically, prices are relatively high when above the upper band and relatively low when below the lower band. However, relatively high should not be seen as bearish or as a sell signal. Likewise, relatively low should not be regarded as bullish or as a buy signal, since prices are high or low for a reason. As with other indicators, Bollinger Bands are not designed to be used as a stand-alone tool. Traders should combine Bollinger Bands with basic trend analysis and other indicators to confirm a trend.  The calculation is performed in the following manner:  Upper band = middle band + 2 standard deviations\nMiddle band = average of 20 periods\nLower band = middle period \u2013 2 standard deviations  More information can be found here:  BollingerMTF ,  Bollinger Percent %B ,  Bollinger Bands Width  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Bollinger_B%C3%A4nder  Book \"Technische Indikatoren - simplified\" by Oliver Paesler (German only)  Usage  Bollinger(double numStdDev, int period)\nBollinger(IDataSeries inSeries, double numStdDev, int period)\n//For the upper band\nBollinger(double numStdDev, int period).Upper[int barsAgo]\nBollinger(IDataSeries inSeries, double numStdDev, int period).Upper[int barsAgo]\n//For the lower band\nBollinger(double numStdDev, int period).Lower[int barsAgo]\nBollinger(IDataSeries inSeries, double numStdDev, int period).Lower[int barsAgo]  Return value  double  When using this method with an index (e.g.  Bollinger (2, 20)[ int  barsAgo] ), the value of the indicator will be displayed for the referenced bar.  Parameters  inSeries Input data series for the indicator  numStdDev Standard deviation  period Number of bars included in the calculation  Visualization   Example  //Output of the value for the upper Bollinger Band\nPrint(\"Value of the upper band: \" + Bollinger(2, 20).Upper[0]);\n//Middle band\nPrint(\"Value of the middle band: \" + Bollinger(2, 20)[0]);\n//Lower band\nPrint(\"Value of the lower band: \" + Bollinger(2, 20).Lower[0]);",
            "title": "Bollinger Bands"
        },
        {
            "location": "/indicators_oscillators/#bollinger-percent-b-b",
            "text": "Description  Bollinger %b is an important indicator that is derived from John Bollinger's original Bollinger Bands indicator. %b represents the location of the most recent close price in relation to the Bollinger Bands as well as to what degree it is above or below any of the bands. The Bollinger Percent B equation can be constructed in the following way: Percent B = ((Close - Bollinger Lower Band) / (Bollinger Upper Band - Bollinger Lower Band)) * 100. If the close price is the same as the upper Bollinger Band, %b will be 100 (percent). If the close price is the same as the lower Bollinger Band, %b will be 0.0 (percent). A %b value of 50 indicates that the close price is equal to the middle Bollinger Band. What is more, readings above 100 and below 0 show that the close price is outside of the Bollinger Bands by a corresponding percentage of the Bollinger Bandwidth. A %b value of 125 means that the close price is above the upper Bollinger Band by 25% of the Bandwidth, while a %b value of -25 means that the close price is below the lower Bollinger Band by 25% of the Bandwidth.  See  Bollinger Bands ,  BBWidth  An additional application: normalizing indicators  Bollinger bands, and therefore the %b indicator, can be applied not only to the prices of stocks, futures etc., but also to time series with fundamental data, volume data and other indicators. This is particularly interesting when you need to know whether a value is relatively high or low \u2013 in this case, the %b indicator offers you a different perspective. If you wish to find out whether the volume of a stock is exceedingly high or low, you can simply apply it to the volume data. John Bollinger regards the application of the %b onto other indicators as one of the most important aspects of the indicator. If you wish to normalize an indicator with %b, it is important to first calculate the indicator (e.g. the RSI) with the help of the %b for the calculation of the indicator instead of the price data. The application of the %b essentially works in the same way as the application of Bollinger bands onto the indicator itself. The intersection points between the bands and the indicators will therefore be 1 and 0. In principle, the relative position of the original indicator is displayed in relation to its upper and lower bands. This means that the boundaries of the original indicator will be removed. John Bollinger himself wrote: \u201cYou\u2019re defining a high or low point on a relative basis, this may allow you to gain a deeper insight and understanding not provided by traditional indicators and guidelines.\u201d John Bollinger provides several parameters for the %b calculation, such as 40-day periods and a factor of 2.0 for a 9-day RSI, and a 50-day period with a factor of 2.1 for the calculation of %b.  (Sources: Oliver Paesler: \"Technische Indikatoren - simplified\" and John Bollinger: \"Bollinger B\u00e4nder\")  (Source:  tradesignalonline )  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Bollinger_B%C3%A4nder  Book \"Technische Indikatoren - simplified\" by Oliver Paesler (German only)  Usage  BollingerPercentB(int period, double numStdDev)\nBollingerPercentB(IDataSeries inSeries, int period, double numStdDev)\nBollingerPercentB(int period, double numStdDev) [int barsAgo]\nBollingerPercentB(IDataSeries inSeries, int period, double numStdDev)[int barsAgo]  Return value  double  When using this method with an index (e.g.  BollingerPercentB (20, 2)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculation  numStdDev Standard deviation  Visualization   Example  //Output for the value of Bollinger %B  Print (\"Value of the Bollinger Percent B is: \" +  BollingerPercentB (20, 2)[0]);",
            "title": "Bollinger Percent B (%b)"
        },
        {
            "location": "/indicators_oscillators/#bollinger-band-width-bbwidth",
            "text": "Description  This indicator is derived from Bollinger Bands. John Bollinger refers to Bollinger Band Width as one of two indicators that one can derive from Bollinger Bands; the other indicator is %B.\nThe Band Width measures the percentage difference between the upper and the lower band. It decreases as Bollinger Bands narrow, and increases as they widen. Since Bollinger Bands are based on the standard deviation, falling Band Width reflects decreasing volatility and rising Band Width reflects the opposite.  Interpretation  John Bollinger uses the Band Width to recognize rising and falling trends. Most trends have their origins within sideway market movements that generally have a low volatility. If a breakout is accompanied by a sudden rise in the Band Width, this means that there is definite support for the move.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Bollinger_B%C3%A4nder  Book \"Technische Indikatoren - simplified\" by Oliver Paesler (German only)  Usage  BBWidth(double numStdDev, int period)\nBBWidth(IDataSeries inSeries, double numStdDev, int period)\nBBWidth(double numStdDev, int period)[int barsAgo]\nBBWidth(IDataSeries inSeries, double numStdDev, int period)[int barsAgo]\n\n//For the value of the upper Band Width\nBBWidth(double numStdDev, int period).BandWidth\nBBWidth(IDataSeries inSeries, double numStdDev, int period).BandWidth\nBBWidth(double numStdDev, int period).BandWidth[int barsAgo]\nBBWidth(IDataSeries inSeries, double numStdDev, int period).BandWidth[int barsAgo]\n\n//For the value of the trigger line (threshold)\nBBWidth(double numStdDev, int period).Threshold\nBBWidth(IDataSeries inSeries, double numStdDev, int period).Threshold\nBBWidth(double numStdDev, int period).Threshold[int barsAgo]\nBBWidth(IDataSeries inSeries, double numStdDev, int period).Threshold[int barsAgo]  Return value  double  When using the method with an index (e.g.  BBWidth (2, 20)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculation  numStdDev Standard deviation  Visualization   Example  //Output for the values of Bollinger Band Width\nPrint(\"The value of the Bollinger Band Width is: \" + BBWidth(2, 20).BandWidth[0]);\n//Output for the values for the signal line\nPrint(\"The value of the signal line is: \" + BBWidth(2, 20).Threshold[0]);",
            "title": "Bollinger Band Width (BBWidth)"
        },
        {
            "location": "/indicators_oscillators/#bollinger-mtf-multitimeframe",
            "text": "Description  The Bollinger MTF is the multi-timeframe version of the Bollinger Bands, and its main use is in intraday trading. Multi-timeframe means that the indicator is calculated in a separate timeframe than that which is displayed in the chart. With the standard Bollinger band indicator, displaying an hourly Bollinger band in a 5-minute timeframe would not be possible \u2013 this is the point at which the MTF becomes useful. BollingerMTF can only be used for display in the chart and cannot be applied/implemented in AgenaScript.  Visualization  The image shows a 5-minute chart with a 60-minute Bollinger band",
            "title": "Bollinger MTF (MultiTimeFrame)"
        },
        {
            "location": "/indicators_oscillators/#buysellpressure",
            "text": "Description  The BuySellPressure indicator displays the buy or sell pressure for the current bar. Furthermore, these trades are classified as \"buy\" or \u201csell\u201d. For this classification, a \"buy\" is assumed any time the transaction has occurred at or above the ask. Inside trades are not taken into account.  Caution:\nThis is a real-time indicator. It will only work on and with real-time data and cannot therefore be used for historical information.  When the properties dialog for the indicator is open and changes are made, then the indicator must be reloaded. Doing so will delete all previously accumulated data.  See  BuySellVolume .  Usage  BuySellPressure()\nBuySellPressure(IDataSeries inSeries)\n\n//For the values of buy pressure\nBuySellPressure().BuyPressure[int barsAgo]\nBuySellPressure(IDataSeries inSeries).BuyPressure[int barsAgo]\n\n//For the values of sell Pressure\nBuySellPressure().SellPressure[int barsAgo]\nBuySellPressure(IDataSeries inSeries).SellPressure[int barsAgo]  Return value  double  When using this method with an index (e.g.  BuySellPressure ().BuyPressure[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Caution:  If BuySellPressure is used with EoD data, the value 50 will always be outputted. \n-   BuySellPressure().SellPressure[0] = 50\n-   BuySellPressure().SellPressure[0] = 50  Parameters  inSeries Input data series for the indicator  Visualization   Example  protected override void OnInit()\n{\n  BuySellPressure().CalculateOnClosedBar = false;\n}\n\nprotected override void OnCalculate()\n{\n  if (Close[0] > DonchianChannel(20).Upper[5])\n  {\n    if (IsHistoricalMode || BuySellPressure().BuyPressure[0] > 70)\n    OpenLong();\n  }\n}",
            "title": "BuySellPressure"
        },
        {
            "location": "/indicators_oscillators/#buysellvolume",
            "text": "Description  This indicator shows us the current buy or sell pressure based on the volume. For this, trades are classified as \"buy\" or \"sell\", whereby for the classification, a \"buy\" is assumed any time the transaction is executed at or above the ask. A transaction at or below the bid is considered a \"sell\".  Caution: This is a real-time indicator and will not work with historical data.  Similar conditions as with the  BuySellPressure  apply.  Usage  BuySellVolume BuySellVolume()\nBuySellVolume BuySellVolume(IDataSeries inSeries)  Return value  double  When using this method with an index (e.g.  BuySellVolume ().BuyVolume[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameter  inSeries Input data series for the indicator  Visualization   Example  //Output for the BuySellVolume\nPrint(\"The BuySellVolume is: \" + BuySellVolume()[0]);",
            "title": "BuySellVolume"
        },
        {
            "location": "/indicators_oscillators/#candlestickpattern",
            "text": "Description  The CandleStickPattern indicator looks for specific candlestick formations.  Further information  Explanations of the formations and their interpretations can be found here:  http://en.wikipedia.org/wiki/Candlestick_pattern  Usage  CandleStickPattern(ChartPattern pattern, int trendStrength)\nCandleStickPattern(IDataSeries inSeries, ChartPattern pattern, int trendStrength)\nCandleStickPattern(ChartPattern pattern, int trendStrength)[int barsAgo]\nCandleStickPattern(IDataSeries inSeries, ChartPattern pattern, int trendStrength)[int barsAgo]  Return value  double  0 \u2013 Pattern not existent\n1 \u2013 Pattern existent  When using this method with an index (e.g.  CandleStickPattern (...)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters           InSeries  Input data series for the indicator        pattern  Possible values are:    ChartPattern.BearishBeltHold     ChartPattern.BearishEngulfing     ChartPattern.BearishHarami     ChartPattern.BearishHaramiCross     ChartPattern.BullishBeltHold     ChartPattern.BullishEngulfing     ChartPattern.BullishHarami     ChartPattern.BullishHaramiCross     ChartPattern.DarkCloudCover     ChartPattern.Doji     ChartPattern.DownsideTasukiGap     ChartPattern.EveningStar     ChartPattern.FallingThreeMethods     ChartPattern.Hammer     ChartPattern.HangingMan     ChartPattern.InvertedHammer     ChartPattern.MorningStart     ChartPattern.PiercingLine     ChartPattern.RisingThreeMethods     ChartPattern.ShootingStar     ChartPattern.StickSandwich     ChartPattern.ThreeBlackCrows     ChartPattern.ThreeWhiteSoldiers     ChartPattern.UpsideGapTwoCrows     ChartPattern.UpsideTasukiGap     trendStrength  Signifies the number of bars to the left and right of the swing high or swing low that are used to identify a trend. The value 0 turns off the search, meaning that the only thing searched for is chart patterns.     Visualization   Example  if (CandelStickPattern(ChartPattern.ShootingStar, 5)[0] == 1)\nPrint(\"Pattern ShootingStar found!\");",
            "title": "CandleStickPattern"
        },
        {
            "location": "/indicators_oscillators/#chaikinmoneyflow-cmf",
            "text": "Description  Marc Chaikin was the one to develop the Chaikin Money Flow Index, which is a volume indicator that tries to find an answer to the following question: Where is the money flowing into? Into the stock = accumulation, and out of the stock = distribution. Clearly, this applies not only to stocks/shares but also to other instruments. With this, Chaikin attempts to expand on and improve the On-Balance Volume that was developed by Granville. Using the CMF, the position of the closing price within the trading range is placed in relation to the volume. What this essentially means is that the trading volume is multiplied by the price. The trading volume displays the amount of money that has \u201cflowed\u201d into the stock or has been \u201cremoved\u201d from the stock; the indicator simply displays whether it has been accumulated (buying pressure) or removed (distribution).  Interpretation  The CMF oscillates around the zero line and is shown in a separate window with an open scale. Should the CMF be located above the zero line, then it can be interpreted as accumulation. If higher highs are being created, then the buying pressure is increasing. The reverse is true for the selling pressure. The Chaikin Money Flow should always be used in combination with other methods of technical analysis.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Chaikin_Money_Flow  Usage  ChaikinMoneyFlow(int period)\nChaikinMoneyFlow(IDataSeries inSeries, int period)\nChaikinMoneyFlow(int period)[int barsAgo]\nChaikinMoneyFlow(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ChaikinMoneyFlow (21)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculation  Visualization   Example  //Output for the Money Flow value\nPrint(\"The Chaikin Money Flow value is: \" + ChaikinMoneyFlow(21)[0]);",
            "title": "ChaikinMoneyFlow (CMF)"
        },
        {
            "location": "/indicators_oscillators/#chaikin-oscillator",
            "text": "Description  The Chaikin Oscillator is a volume indicator that lets the trader know whether new highs are also accompanied by new volumes. This oscillator is a simple MACD that is applied to the accumulation/distribution line. Hereby, the difference between a 3-day exponential moving average and a 10-day exponential smoothed average for the accumulation/distribution line is calculated.  Interpretation  The interpretation of the Chaikin Oscillator is similar to the principle of the accumulation/distribution. All an oscillator does is show the changes in liquidity for the instrument.  Usage  ChaikinOscillator(int fast, int slow)\nChaikinOscillator(IDataSeries inSeries, int fast, int slow)\nChaikinOscillator(int fast, int slow)[int barsAgo]\nChaikinOscillator(IDataSeries inSeries, int fast, int slow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ChaikinOscillator (3, 10)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  fast Number of bars included in the calculation for the fast EMA  slow Number of bars included in the calculation for the slow EMA  Visualization   Example  //Output for the oscillator for the fast and slow values of 3 and 10\nPrint(\"The Chaikin Oscillator value is: \" + ChaikinOscillator(3, 10)[0]);",
            "title": "Chaikin Oscillator"
        },
        {
            "location": "/indicators_oscillators/#chaikinvolatility-cvl",
            "text": "Description  The Chaikin Volatility Indicator is one of a few indicators that are designed to try and measure price movement fluctuations. Chaikin takes the daily price range (daily high minus daily low) as the fundamental measure of volatility. With this indicator, a widening range is, by implication, associated with a higher volatility.  Interpretation  The indicator oscillates around the zero line and fluctuates between a scale of +100 to -100. It can be used on a daily chart as well as on a weekly or monthly chart. All values above the zero line represent rising volatility, and the gradient of the rise implies the seriousness of potential floors forming. The Chaikin Volatility is not specifically used to define exact signals, but is considered as more of an assisting tool in the trading system.  Usage  ChaikinVolatility(int fast, int slow)\nChaikinVolatility(IDataSeries inSeries, int fast, int slow)\nChaikinVolatility(int fast, int slow)[int barsAgo]\nChaikinVolatility(IDataSeries inSeries, int fast, int slow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ChaikinVolatility (14)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Chaikin output for a period of 14\nPrint(\"The value of the Chaikin Volatility is: \" + ChaikinVolatility(14)[0]);",
            "title": "ChaikinVolatility (CVL)"
        },
        {
            "location": "/indicators_oscillators/#chande-momentum-oscillator-cmo",
            "text": "Description  The CMO is one of several indicators created by the technical analyst Tushar Chande; it is a technical momentum indicator. This indicator arises from calculating the difference between the total of all recent gains and the total of all recent losses, and then dividing this result by the total of all price movement over the given period. This oscillator shares similarities with other momentum indicators such as the Relative Strength Index and the Stochastic Oscillator, because it is also range-bound (+100 and -100).  Interpretation  The security is deemed overbought when the momentum oscillator is above +50 and oversold when it is below -50. Many technical traders add a nine-period moving average to this oscillator to act as a signal line. Bullish signals are generated when the oscillator crosses above the signal, and bearish signals are generated when the oscillator crosses down through the signal.  Further information  http://www.boersenwissen.de/content/content_bin/cont_bin18.html  Usage  CMO(int period)\nCMO(IDataSeries inSeries, int period)\nCMO(int period)[int barsAgo]\nCMO(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  CMO (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the value of the Chande Momentum Oscillator\nPrint(\"The current value for the Chande Momentum Oscillator is: \" + CMO(14)[0]);",
            "title": "Chande Momentum Oscillator (CMO)"
        },
        {
            "location": "/indicators_oscillators/#climactic-distance",
            "text": "Description  The Climactic Distance indicator was invented and developed by Gilbert Kreuzthaler, CEO of Include IT GmbH and founder of AgenaTrader.com. This indicator is used in the Location Point Trading system. It calculates the median course of the current and historical candle at a distance to the simple moving average (SMA) of the last 20 periods. Additionally, it also measures the average course deviation within the last 80 periods. If the median course exceeds the top or bottom course deviation, the market is deemed climactic, and this influences the trading decisions made in Location Point Trading.  Calcualtion  Black line in the middle: SMA 20\nGreen moving line: Median Kurs\nRed upper and lower line: Average course deviation oft he last 80 periods.  More information  https://www.facebook.com/Location-Point-Trading-344217482287592/?fref=ts  Usage  ClimacticDistance(int sMAPeriod, int thresholdPercent)\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent)\nClimacticDistance(int period, int tresholdPercent, Color climacticColor)\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor)\n//Upper band\nClimacticDistance(int sMAPeriod, int thresholdPercent).Upper[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).Upper[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).Upper[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).Upper[int barsAgo]\n//Lower band\nClimacticDistance(int sMAPeriod, int thresholdPercent).Lower[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).Lower[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).Lower[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).Lower[int barsAgo]\n\n//MovingAverage\nClimacticDistance(int sMAPeriod, int thresholdPercent).MovingAverage[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).MovingAverage[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).MovingAverage[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).MovingAverage[int barsAgo]\n//Distance\nClimacticDistance(int sMAPeriod, int thresholdPercent).Distance[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent).Distance[int barsAgo]\nClimacticDistance(int period, int tresholdPercent, Color climacticColor).Distance[int barsAgo]\nClimacticDistance(IDataSeries InSeries, int sMAPeriod, int thresholdPercent, Color climacticColor).Distance[int barsAgo]  Return value  double  Parameters  Int  Visualization  Image  Example  //Output of the value for the Upper climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).Upper[0]);\n//Output of the value for the Lower climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).Lower[0]);\n//Output of the value for the Distance climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).Distance[0]);\n//Output of the value for the Moving Average climactic distance line\nPrint(\u201cValue of the upper band: \u201c + ClimacticDistnance(20, 80).MovingAverage[0]);",
            "title": "Climactic Distance"
        },
        {
            "location": "/indicators_oscillators/#commodity-channel-index-cci",
            "text": "Description  The Commodity Channel Index (CCI), which was created by Donald Lambert and actually featured in Commodities magazine in 1980, is a versatile indicator that can be used for identifying a new trend or as a warning of extreme conditions. Lambert originally developed the CCI as a means to identify cyclical turns in commodities \u2013 however, the indicator can also successfully be applied to ETFs, indices, stocks and various other securities. In general, what CCI does is to measure the current price level relative to an average price level over a specified period of time. When prices are well above their average, CCI is relatively high. When prices are far below their average, CCI is relatively low. This is how CCI can be used for identifying overbought and oversold levels.  Interpretation  CCI measures the difference between a securitys price change and its average price change. High positive readings indicate that prices are well above their average, which is a show of strength. Low negative readings indicate that prices are well below their average, which is a show of weakness.  The Commodity Channel Index (CCI) can be used as either a coincident or leading indicator. As a coincident indicator, surges above +100 reflect strong price action that can signal the start of an uptrend. Plunges below -100 reflect weak price action that can signal the start of a downtrend.  As a\u00a0 leading indicator ,  momentum oscillators , chartists can look for overbought or oversold conditions that may foreshadow a mean reversion. Similarly, bullish and bearish divergences can be used to detect early momentum shifts and anticipate trend reversals.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Commodity_Channel_Index  Usage  CCI(int period)\nCCI(IDataSeries inSeries, int period)\nCCI(int period)[int barsAgo]\nCCI(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  CCI (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the CCI value calculated using 14 periods\nPrint(\"The value of the Commodity Channel Index is: \" + CCI(14));",
            "title": "Commodity Channel Index (CCI)"
        },
        {
            "location": "/indicators_oscillators/#cotaggregatedindexpositiondisaggregated",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator also works in the same way as the COTAggregatedIndexPositionLegacy; for interpretation and more detailed information, please read more under   COTAggregatedIndexPositionLegacy . The difference here, in turn, consists in the usage of the detailed disaggregated data for calculating the indicator.  For the COTAggregatedIndexPositionDisaggregated, the following parameters are available:   AddIndices:   DowJones:  select [True] if the positions of the DowJones should be added to the overall result.   Nasdaq100:  select [True] if the positions of the Nasdaq100 should be added to the overall result.   Russell2000:  select [True] if the positions of the Russell2000 should be added to the overall  result.    SP500:   select [True] if the positions of the SP500 should be added to the overall result.    Categories: Financial   Here you can only select the categories of the Financials, since this indicator addresses 4 financial markets. However, you can load the indicator in Financials AND Commodities.   Select [True] for the categories for which the positions for the selected markets should be added up and displayed.    Data base:    ReportType:  see  COTReportLegacy  \u2013 CotType    Display:   LongPosition:  select [True] to display the long positions of the desired market participants   ShortPosition:  select [True] to display the short positions of the desired market participants   NetPosition:  select [True] to display the net positions of the desired market participants   Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTAggregatedIndexPositionDisaggregated"
        },
        {
            "location": "/indicators_oscillators/#cotcommercialindex",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The CommercialIndex is a very telling COT indicator. It puts two of the most important COT-parameters in relation to each other \u2013 the net position of the commercials to the open interest. These values are normalized and subsequently outputted. A high value of the CommercialIndex shows strong buying behavior of the commercials, whereas a low value shows strong sell pressure from the commercials. The parameters are similarly structured as with the COTReport.   The following parameters are available for the COTCommercialIndex:   CotType : see  COTReportLegacy  \u2013 CotType  ReportType:  see  COTReportLegacy  \u2013 ReportType  StochasticPeriod:  see  COTReportLegacy   \u2013 ComparativePeriod  OpenInterestType:  Here you can choose between [Native/Stochastic], which determines whether absolute values or the stochastic values of the positions of the commercials should be used for the calculation. The default setting is \u201cNative\u201d; do not change this if you wish to keep the informative value of the indicator.   Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTCommercialIndex"
        },
        {
            "location": "/indicators_oscillators/#cotopeninterestdisaggregated",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator corresponds to the mode of operation of the COTOpenInterestLegacy, instead using, however, the more finely broken down data of the disaggregated reports. For the functionality and interpretation of the open interest, please read more under see  COTOpenInterestLegacy .\n The calculation also occurs analogously to the legacy reports, and since for each long contract, there must also be a market participant on the short side, two calculation methods are possible (here for commodity futures):  1) Producer[Long] + SwapDealer[Long] + SwapDealer[Spread] + ManagedMoney[Long] + ManagedMoney[Spread] + OtherReportables[Long] + OtherReportables[Spread] + NonReportable[Long] = OpenInterest   2) Producer[Short] + SwapDealer[Short] + SwapDealer[Spread] + ManagedMoney[Short] + ManagedMoney[Spread] + OtherReportables[Short] + OtherReportables[Spread] + NonReportable[Short] = OpenInterest  The following parameters are available for the COTOpenInterestDisaggregated:   Categories: Commodity    OpenInterest_Comm:  (=total OpenInterest for Commodities)   [Absolute]: outputs the OpenInterest as an absolute number  [Stochastic]: OpenInterest as an oscillator with values between 0-100   [None]: no output for the OpenInterest.    %ofOIProd Long/Short/Spread:  (=Percent of OpenInterest for Producer Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed. This here is the percentage that the positions of the producers have of the overall OpenInterest. A value of 0.5, for example, means that the producers have built up long positions in the size of 50% of the entire OpenInterest.  %ofOISwapDealer Long/Short/Spread:  (=Percent of OpenInterest for SwapDealers Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed.  %ofOIManagedMoney Long/Short/Spread : (=Percent of OpenInterest for ManagedMoney Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed.   %ofOIComOther Long/Short/Spread:  (=Percent of OpenInterest for Other Traders in Commodities Long/Short/Spread \u2013 Position) \u2013 select [True] if this value should be displayed.   %ofOIComNonreportables Long/Short/Spread : (=Percent of OpenInterest for NonReportables in Commodites Long/Short/Spread \u2013 Position) select [True] if this value should be displayed.  Categories: Financial  All parameters work analogously to the settings under \u201cCategories: Commodity\u201d; the only difference lies in the division into various groups of market participants  Data base:    CotType:   COTReportLegacy  - CotType   ReportType:   COTReportLegacy  - ReportType   StochasticPeriod:   COTReportLegacy  \u2013 ComparativePeriod   Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTOpenInterestDisaggregated"
        },
        {
            "location": "/indicators_oscillators/#cotopeninterestlegacy",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The open interest specifies the number of all currently held contracts; a high open interest, therefore, indicates that the market participants have great interest in this value; vice versa, low open interest shows that a value has only few held contracts and therefore little activity from the market participants. \nThere are two options for calculating the OpenInterest:  1) Commercial[Long] + NonCommercial[Long] + NonCommercial[Spread] + NonReportable[Long] = OpenInterest\n 2) Commercial[Short] + NonCommercial[Short] + NonCommercial[Spread] + NonReportable[Short] = OpenInterest  Since for every long contract, there is also a market participant on the short side, both calculation methods yield exactly the same value. Additional info: with the CFTC, the open interest is not calculated; the CFTC can simply see the open interest by counting all contracts that are open in the market. With known open interest, the NonReportable positions are then calculated, since the following equation must be valid: TotalReportable + NonReportable = OpenInterest. TotalReportable and OpenInterest are known, allowing the NonReportables to be calculated.  The following parameters are available for the OpenInterestLegacy:    CotType:   COTReportLegacy  \u2013 CotType    ReportType:   COTReportLegacy  \u2013 ReportType    StochasticPeriod:   COTReportLegacy \u2013 ComparativePeriod     IsNative:  outputs the OpenInterest as an absolute number, just as it is read out from the CFTC reports    IsStochastic:  the OpenInterest is outputted and calculated as an oscillator with values between 0-100. With the StochasticPeriod, you can set with which period the Stochastic should be calculated.    IsCommercialLong/IsCommercialShort:  select [True] if you would like to have the data for the NonCommercials displayed. The outputted values are percentages; if, for example, you set IsCommercialLong=True, the percentage of long positions of the Commercials that make up the total OpenInterest is outputted. A value of 0.5, for example, means that the OpenInterest consists of 50% long positions of the Commercials, which can be considered a very large long position of the Commercials.    IsNonCommercialLong/IsNonCommercialShort:  if you select [True], the percentage of NonCommercial long positions i.e. NonCommercial short positions that make up the total OpenInterest is outputted.    IsNonReportableLong/IsNonReportableShort:  if you select [True], the percentage of NonReportable long positions i.e. NonReportable short positions that make up the total OpenInterest it outputted.    IsTotalReportableLong/IsTotalReportableShort:  if you select [True], the percentage of TotalReportable long positions i.e. TotalReportable short positions that make up the total OpenInterest is outputted. (TotalReportable = Commercials+NonCommercials).    Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTOpenInterestLegacy"
        },
        {
            "location": "/indicators_oscillators/#cotreportdisaggregated",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The COTReportDisaggregated accesses the detailed disaggregated reports of the CFTC, which have been published since 2009 and can be regarded as a further development of the legacy reports. The necessity for improvement has resulted in the drastically changing and constantly developing market environment since the introduction of the COT reports in 1986. \nThe market participants are now divided more subtly and are organized into 5 categories. These 5 categories vary according to whether we are dealing with a commodity future or a financial future.  The market participants are now divided more subtly and are organized into 5 categories. These 5 categories vary according to whether we are dealing with a commodity future or a financial future.  The  commodity futures  are divided into the following groups:    Producer/Merchant/Processor/User   SwapDealers o ManagedMoney   Other Reportables   Nonreportables   You can find more information about the classification of the commodities  HERE   For the  financial futures , there are the following groups:    Dealer/Intermediary   AssetManager/Institutional   Leveraged Funds   Other Reportables   Nonreportabes  You can find more information about the classification of the financials  HERE   The following parameters are available for the COTReportDisaggregated:   Categories Commodity/Categories Financial:     Select [True] for the groups that you would like to have displayed in the chart. If you have opened a commodity chart, only settings made under \u201cCategories Commodity\u201d will be taken into account, and vice versa if you have opened a financial chart.    Database:   CotType:   COTReportLegacy  \u2013 CotType  IndexType:   COTReportLegacy  \u2013 IndexType  ReportType:   COTReportLegacy  \u2013 ReportType   StochasticPeriod:   COTReportLegacy \u2013 ComparativePeriod     Display:     LongPosition:  select [True] to display the long positions of the desired market participants   ShortPosition:  select [True] to display the short positions of the desired market participants   NetPosition:  select [True] to display the net positions of the desired market participants   Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTReportDisaggregated"
        },
        {
            "location": "/indicators_oscillators/#cotreportlegacy",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator is the core element of the COT analysis, with which one can directly display the pure data that the indicator reads from the reports published weekly by the CFTC (www.cftc.gov/CommitmentsofTraders). \nThe published reports can be viewed by every market participant. The legacy data is published in the so called short reports you can find on the CFTC-website. The following parameters are available in the COTReportLegacy:    Comparative Period:  with this setting, you can enter a comparative period with which the stochastic display is calculated (=StochasticPeriod). The system only triggers this parameter when \u201cIndexType = Stochastic\u201d is set.    CotType:  under [All/Other/Old], select which contracts should be used for the display; more details are available  HERE    IndexType:  choose between [Absolute/Stochastic] as to how the values should be outputted.   Absolute = the values are outputted in whole numbers, just as they are read out from the reports.    Stochastic = the values are outputted and calculated as an oscillator with values between 0-100. With the ComparativePeriod, you can set with which period the Stochastic should be calculated.    ReportType:  under this parameter, you select whether the data from the reports should be read out only for futures, or for futures + options.    ReturnType:     Net: outputs the net position (=LongContracts \u2013 ShortContracts) of the selected market participants  Long/Short: outputs the long i.e. short contracts of the selected market participants   OI: outputs the total OpenInterest of this instrument; for a more precise and advanced display of the OpenInterest, please use the indicator OpenInterestLegacy    ShowCommercials:  select [True] if you would like to have the data for the Commercials displayed. For detailed information on the definition of which market participants are classified as Commercials, please have a look  HERE    ShowNonCommercials:  select [True] if you would like to have the data for the NonCommercials displayed. For detailed information on the definition of which market participants are classified as NonCommercials please have a look at the link provided above.    ShowNonReportables:  select [True] if you would like to have the data for the NonReportables displayed. For detailed information on the definition of which market participants are classified as NonCommercials please have a look at the link provided above.    Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTReportLegacy"
        },
        {
            "location": "/indicators_oscillators/#cotstockdummy",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator attempts to simulate the behavior of the commercials in stock markets using a special algorithm. The values are outputted as Stochastic, meaning that they oscillate between values of 0-100. The interpretation of this indicator is analogous to\nthe interpretation of the commercial data in the standard COT indicators. The output of this indicator should be confirmed with other indicators; you must be aware that we are not talking about real COT data from market participants, but about calculations from the price data. As for the COT data, an analysis in the weekly chart is also recommended for the COTStockDummy.  The following parameters are available for the COTStockDummy:   ComparativePeriod:  input period for the stochastic calculation  Stochastic:  [True] outputs normalized values (values between 0-100)  Period:  this is a period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the default setting.   Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTStockDummy"
        },
        {
            "location": "/indicators_oscillators/#cotlargetraderactivity",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The COTLargeTraderActivity indicator, like the COTStockDummy, is based not on real COT data, but instead on algorithmically calculated outputs. This indicator attempts to simulate the behavior of the large traders in markets for which no COT data is available. Here, the interpretation takes place analogously to the analysis of the NonCommercials in the standard COT indicators.As with the COTStockDummy, we point out that other indicators should be consulted, since we are not dealing with real COT data.  The following parameters are available for the COTLargeTraderActivity:   Period:  this is a period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the default setting.   Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "COTLargeTraderActivity"
        },
        {
            "location": "/indicators_oscillators/#darvas-boxes",
            "text": "Description  Former ballroom dancer Nicolas Darvas developed the Darvas boxes as a trading strategy in 1956. Darvas' trading technique consisted of buying into stocks that were trading at new 52-week highs, with accordingly high volumes. When a stock price rises above the previous 52-week high, but then proceeds to fall back to a price not far from that high, a Darvas box is formed. If the price falls too far, this can signify a false breakout. Otherwise, however, the lower price is used as the bottom of the box and the higher price as the top.\nA box is made up of an upper boundary (top) and a lower boundary (floor). Each new box is created based on a previous box, depicting a \u201cstair\u201d formation.\nIf a new high is not formed after three consecutive days, then the high is labeled as the upper boundary. Following this, the floor is specified based on the lowest price.  Interpretation  This system is similar to a trend-following channel breakout system. As soon as one of these boxes breaks out, a new buy or sell signal is generated.  Explanation  The initial box top is the high of day 1. First, you should find a new high that must be higher than the high of day 1. It does not matter when the high is located - even if it is after 5 days. However, if the bottom is detected, the box has been completed.\nTo detect the bottom, the low must be after the day 2 since the last day\u2019s box top was detected, and should be lower than the low of the original day 1 low.  The bottom is usually detected last, and a new high may not be detected until the bottom is locked in. The Darvas box has then been completed.  If the price breaks out of the bottom or top, a new box will be started. The bottom stop loss box has been drawn as the last price percentage.  We should take the first day\u2019s high value as the top border. The next day, we check if the high of the day is higher than the previous border top. In the case that it is higher -> top border = high. In the case that the top is going up for the last 3 steps, and the next is then lower, it will be a box top. Start looking for the bottom border. It is identical to the top (search for a trend low after which the daily low would be higher than the previous. In this case, the previous low would be the box bottom). Now we have a Darvas corridor. If one of the next bar\u2019s high values is higher than the top box or lower than the bottom box -> box is closed (a new box will be started when the price breaks out of the top or bottom of the box).  Buy Signal   Sell Signal   Further information  Here you can read about a trading system based on the Darvas boxes. (German only) http://www.eusdoni.de/index.php?option=com_content&view=article&catid=13:eusdoni-version-3&id=42:darvas-boxen  Usage  Darvas()\nDarvas(IDataSeries inSeries)\n\n//For the upper Box boundary\nDarvas().Upper[int barsAgo]\nDarvas(IDataSeries inSeries).Upper[int barsAgo]\n\n//Returns the lower value\nDarvas().Lower[int barsAgo]\nDarvas(IDataSeries inSeries).Lower[int barsAgo]  Return value  double  When using this method with an index (e.g.  Darvas ()[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameter  inSeries Input data series for the indicator  Visualization   Example  //Output for the values for the upper markings (box top)\nPrint(\"The upper boundary for the Darvas box is: \" + Darvas().Upper[0]);\n//Lower markings\nPrint(\"The lower boundary for the Darvas box is: \" + Darvas().Lower[0]);",
            "title": "Darvas Boxes"
        },
        {
            "location": "/indicators_oscillators/#directional-movement-dm",
            "text": "Description  The Directional Movement indicator is almost identical to the ADX, with the only difference that the +DM and -DM values are also calculated. These values are then later on used for the DMI.  Interpretation  The Directional Movement indicator is positive when the difference between the highs is at its largest.  Further information  See: Directional Movement Index ( DMI )  Usage  DM(int period)\nDM(IDataSeries inSeries, int period)\nDM(int period)[int barsAgo]\nDM(IDataSeries inSeries, int period)[int barsAgo]\n//For the value of +DM\nDM(int period).DiPlus[int barsAgo]\nDM(IDataSeries inSeries, int period).DiPlus[int barsAgo]\n//For the value of -DM\nDM(int period).DiMinus[int barsAgo]\nDM(IDataSeries inSeries, int period).DiMinus[int barsAgo]  Return value  double  When using this method with an index (e.g.  DM (14).DiPlus[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output of the DM values\nPrint(\"The current +DM value is: \" + DM(14).DiPlus[0]);\nPrint(\"The current \u2013DM value is: \" + DM(14).DiMinus[0]);",
            "title": "Directional Movement (DM)"
        },
        {
            "location": "/indicators_oscillators/#donchian-channel",
            "text": "Description  The Donchian channel can also be called the \u201c4-week-rule\u201d; this is how it works: when the current price reaches a peak above the high of the past 4 weeks, a new long position is opened. If a short position is open simultaneously, it is closed. This works vice versa with shorts. The  Donchian channel trading system is a purely trend-following system based on the concept \u201cbuy when it is strong, sell when it is weak\u201d. The famous \u201cTurtles\u201d also employed this breakout system. This indicator displays the highs and lows of the last n days as lines above and below the price development. 20 days represent 4 weeks.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Donchian_Channel  Usage  DonchianChannel(int period)\nDonchianChannel(IDataSeries inSeries, int period)\n\n//Upper band\nDonchianChannel(int period).Upper[int barsAgo]\nDonchianChannel(IDataSeries inSeries, int period).Upper[int barsAgo]\n\n//Middle band\nDonchianChannel(int period)[int barsAgo]\nDonchianChannel(IDataSeries inSeries, int period)[int barsAgo]\n\n//Lower band\nDonchianChannel(int period).Lower[int barsAgo]\nDonchianChannel(IDataSeries inSeries, int period).Lower[int barsAgo]  Return value  double  When using this method with an index (e.g.  DonchianChannel (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the values of the Donchian Channel\nPrint(\"The upper band is at: \" + DonchianChannel(14).Upper[0]);\nPrint(\"The middle band is at: \" + DonchianChannel(14)[0]);\nPrint(\"The lower band is at: \" + DonchianChannel(14).Lower[0]);",
            "title": "Donchian Channel"
        },
        {
            "location": "/indicators_oscillators/#directional-movement-index-dmi",
            "text": "Description  Welles Wilder Jr. developed the Directional Movement concept in 1978. His concept includes the following components:  Directional Movement Index (DMI)  Average Directional Movement Index ( ADX )  True Range (TR)  The Directional Movement Index comes before the Average Directional Movement Index. The DMI shows the strengths of the trend-favoring price movements in percentages. Its standard application is the smoothed ADX.  Interpretation  The DMI shows the strength of the trend, but not the trend direction. This means that it is particularly suited as a filter for trading systems employing the Parabolic SAR, for example, in order to filter out sideways phases. When the DMI rises (especially above 25), a trend is displayed; anything below that is recognized as a sideways phase. The +DI and the \u2013DI point towards a trend. An uptrend is classified when the +DI is above the \u2013DI. The further apart they drift, the stronger the trend.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/DMI_-_Directional_Movement_Index  Usage  DMI(int period)\nDMI(IDataSeries inSeries, int period)\nDMI(int period)[int barsAgo]\nDMI(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  DMI (20)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the DMI\nPrint(\"The current DMI value is: \" + DMI(20)[0]);",
            "title": "Directional Movement Index (DMI)"
        },
        {
            "location": "/indicators_oscillators/#double-stochastics-dss",
            "text": "Description  William Blau was the developer of the Double Smoothed Stochastic (DSS), which is a double-smoothed stochastic indicator. After a while, it was improved upon by Walter Bressert as a variation of the double-smoothed stochastic. Smaller changes in the price movements cause this indicator to react more sensitively, and it also produces more signals than the one Blau developed. The Bressert version therefore also illustrates extreme zones more clearly than the Blau version.  Regardless of the various calculation methods used, the DSS always stays within a scale of 0 to 100. The extreme zones in the developed stochastics are the same as for the original stochastics. The upper extreme area is marked at 80, and the lower extreme zone at 20 - these values cannot be changed. For many applications, it is wise to include an additional middle line at 50, and to adapt this to the circumstances as needed.  Interpretation  Values above 80 are seen as overbought, and below 20 as oversold. In addition, signals are produced by the signal line\u2019s behavior and movements into and out of the extreme zones.  Usage  DoubleStochastics(int period)\nDoubleStochastics(int period)[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1)\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1)\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1)[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1)[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2)[int barsAgo]\n\n//For the value of %K\nDoubleStochastics(int period).K[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period).K[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1).K[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1).K[int barsAgo]\nDoubleStochastics(int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2).K[int barsAgo]\nDoubleStochastics(IDataSeries inSeries, int period, DoubleStochasticsMode mode, int EMA-Period1, int EMA-Period2).K[int barsAgo]  Return value  double  When using this method with an index (e.g.  DoubleStochastics (...)[ int  barsAgo] or  DoubleStochastics (...).K[ int  barsAgo]), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations (default: 10)  mode Method of calculation, possible inSeries are Blau, Blau2, Bressert  EMA-Period1 Periods for the EMA  EMA-Period2 Periods for the second EMA  Visualization   Example  //Output for %K\nPrint(\"The value of the DSS Bressert %K is: \" + DoubleStochastics(10, DoubleStochasticsMode.Bressert, 2)[0]);",
            "title": "Double Stochastics (DSS)"
        },
        {
            "location": "/indicators_oscillators/#dynamic-momentum-index-dmindex",
            "text": "Description  The Dynamic Momentum Index, which was developed by Tushar Chande, is a specific variant of the Relative Strength Index. Chande changed the Dynamic Momentum Index in such a way that, based on various factors, the period settings automatically adjust themselves, which he achieved by coupling it to the RSI in order for a volatility component to be present. The definition of this volatility component is based on a 5-day standard deviation of the closing prices. This, in turn, is then compared to the 10-day average of a 5-day standard deviation.  Interpretation  If the DMI is inside the oversold zone, it is reasonable to assume that prices are going to start to fall.  Further and more concise information  VTAD:  http://vtadwiki.vtad.de/index.php/Dynamic_Momentum_Index  Usage  DMIndex(int smooth)\nDMIndex(IDataSeries inSeries, int smooth)\nDMIndex(int smooth)[int barsAgo]\nDMIndex(IDataSeries inSeries, int smooth)[int barsAgo]  Return value  double  When using this method with an index (e.g.  DMIndex (3)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  smooth Smoothing settings  Visualization   Example  //Output of the value for the DMIndex Indicator with a smoothing factor of 3\nPrint(\"The current value for the DMIndex is: \" + DMIndex(3)[0]);",
            "title": "Dynamic Momentum Index (DMIndex)"
        },
        {
            "location": "/indicators_oscillators/#ease-of-movement-eom",
            "text": "Description  Ease of Movement (EMV) is a volume-based oscillator created by Richard Arms that constantly moves above and below the zero line. It is intended to measure the \"ease\" of price movement, as suggested by the name. Arms developed Equivolume charts in order to visually display price ranges and volume. Ease of Movement expands upon Equivolume by quantifying the price/volume relationship and displaying the results in the form of an oscillator. Generally, when the oscillator is in a positive area, prices are advancing with relative ease. On the other hand, when the oscillator is in negative territory, prices are falling with relative ease.  Interpretation  When the EOM is moving away from the zero line (marker) then an impulse has begun in that direction. During a breakout onto the opposite side of the zero line, it is recommended to enter with the trend direction.  Further information  http://www.volumen-analyse.de  Usage  EaseOfMovement(int smoothing, int volDivisor)\nEaseOfMovement(IDataSeries inSeries, int smoothing, int volDivisor)\nEaseOfMovement(int smoothing, int volDivisor)[int barsAgo]\nEaseOfMovement(IDataSeries inSeries, int smoothing, int volDivisor)[int barsAgo]  Return value  double  When using this method with an index (e.g.  EaseOfMovement (14, 10000)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  smoothing Smoothing settings  volDivisor For calculation of the box ratio (see \u201cCalculation\u201d below)  Visualization   Calculation  Midpoint = (High + Low) / 2\nMidpointMove = Midpoint [today] \u2013 Midpoint [yesterday]\nBoxRatio = Volume / (High \u2013 Low)\nEase = MidpointMove / Box Ratio  Example  //Output for the values of the EOM line\nPrint(\"The value for the Ease of Movement is: \" + EaseOfMovement(14, 10000)[0]);",
            "title": "Ease of Movement (EOM)"
        },
        {
            "location": "/indicators_oscillators/#fisher-transform",
            "text": "Description  The physicist John Ehlers created the Fisher Transform in 2002. The intention of the indicator is to show where there are turning points, which can be achieved with the help of the Inverse Fisher Transform. This changes indicators in such a way that the movements are less random, and the signal quality is clearer. The Fisher Transform either stretches or compresses the input values of the function so that the output is very likely to be between -1 and 1. This gives us a clearly identifiable pattern where even indicators such as the RSI become better defined and more precise.  Interpretation  A system using the Fisher Transform can be found here: https://www.prorealtime.com/de/pdf/probacktest.pdf  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Return value  double  When using this method with an index (e.g.  FisherTransform (10)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Usage  FisherTransform(int period)\nFisherTransform(IDataSeries inSeries, int period)\nFisherTransform(int period)[int barsAgo]\nFisherTransform(IDataSeries inSeries, int period)[int barsAgo]  Visualization   Example  //Output values for the Fisher Transform\nPrint(\"The current value for the Fisher Transform is: \" + FisherTransform(10)[0]);",
            "title": "Fisher Transform"
        },
        {
            "location": "/indicators_oscillators/#forecast-oscillator-fosc",
            "text": "Description  The FOSC makes a comparison of the current price against the value returned by the Time Series Forecast study. It is calculated as a percentage ratio of the difference between the close price and the Time Series Forecast value for the previous bar.  When this oscillator displays positive values, it hints that the Time Series Forecast has underestimated the price, whereas negative values suggest that the TSF has overestimated the price. Usually, an SMA also accompanies the Forecast Oscillator line in the search for oscillator reversals.  Further information  FMLabs:  http://www.fmlabs.com/reference/default.htm?url=ForecastOscillator.htm  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Return value  double  When using this method with an index (e.g.  FOSC (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Usage  FOSC(int period)\nFOSC(IDataSeries inSeries, int period)\nFOSC(int period)[int barsAgo]\nFOSC(IDataSeries inSeries, int period)[int barsAgo]  Visualization   Examples  //Output for the Forecast Oscillator\nPrint(\"The current value for the Forecast Oscillator is: \" + FOSC(14)[0]);\n\n//Determining the future market direction\nif (FOSC(14)[0] > 0)\nPrint(\"The FOSC is bigger than zero, which indicates rising price movements.\");",
            "title": "Forecast Oscillator (FOSC)"
        },
        {
            "location": "/indicators_oscillators/#highesthighindex",
            "text": "Description  The Highest High Index prints the index for the bars with the highest high within a specified number of periods. It is slightly different from the GetSerieHighestValue() function in that it can be visualized within the chart.  See  HighestHighPrice() ,  LowestLowPrice() ,  LowestLowIndex ,  GetSerieHighestValue() ,  GetSerieLowestValue() .  Usage  HighestHighIndex(int BarsBack)\nHighestHighIndex(int BarsBack)[int barsAgo]  Return value  double  When using this method with an index (e.g.  HighestHighIndex (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameter  BarsBack Number of periods in which the highest high will be searched for  Visualization   Example  // How many bars back is the bar with the highest high of the last 14 bars located?\nPrint(\"The highest high in the last 14 bars was \" + HighestHighIndex(14)[0] + \" bars ago.\");",
            "title": "HighestHighIndex()"
        },
        {
            "location": "/indicators_oscillators/#highesthighprice",
            "text": "Description  Highest High Price shows the highest high achieved within a predefined number of periods.  Unlike the GetSerieHighestValue(), this indicator can be displayed within the chart.  See  HighestHighIndex() ,  LowestLowPrice() ,  LowestLowIndex ,  GetSerieHighestValue() ,  GetSerieLowestValue() .  Usage  HighestHighPrice(int BarsBack)\nHighestHighPrice(int BarsBack)[int barsAgo]  Return value  double  When using this method with an index (e.g.  HighestHighPrice (14)[ int  barsAgo] ), the value of the indicator will be outputted for the referenced bar.  Parameter  BarsBack Number of periods in which the highest high will be searched for  Visualization   Example  // What was the value of the highest high in the last 14 periods?\nPrint(\"The highest high for the last 14 bars is \" + HighestHighPrice(14)[0]);",
            "title": "HighestHighPrice()"
        },
        {
            "location": "/indicators_oscillators/#ichimokucloud",
            "text": "Description  The Ichimoku Cloud, also called Ichimoku Kinko Hyo, is a very adaptable indicator that defines support and resistance, gauges momentum, identifies trend direction and provides trading signals. Ichimoku Kinko Hyo literally means \"one look equilibrium chart\". With just one look, traders can identify the trend and search for possible signals in that trend. The indicator was developed by the journalist Goichi Hosoda, and published in his 1969 book. Although the Ichimoku Cloud may appear complicated when looked at on the price chart, it is in fact a simple indicator that can be implemented very well \u2013 a tribute to the fact that its inventor was a journalist! What is more, the concepts are easily understandable and the signals well-defined.  1. Tenkan Sen  \u2013 conversion line This is the median value of the 9-period high and the 9-period low. 2. Kinjun Sen  \u2013 the baseline This is the midpoint of the 26-period high and low. 3. Chikou Span  \u2013 lagging span This is the closing price plotted 26 days in the past. 4. Senkou Span A  \u2013 the first leading line This is the midpoint between the conversion line and the baseline. The leading Span A forms one of the two cloud boundaries. It is referred to as leading because it is plotted 26 periods in the future and thus builds the faster cloud boundary. 5. Senkou Span B  \u2013 the second leading line This is the midpoint of the 52-day high-low range projected 26 periods into the future, forming the slower cloud boundary.\nKumo \u2013 cloud The cloud (Kumo) is the area between Senkou Span A and Senkou Span B. This area is highlighted in color, forming a cloud shape.  Caution: \nBecause the cloud is drawn \u201cinto the future\u201d, it is necessary to shift the time axis to the left in order to view it.  Interpretation  Similarly to the smoothing averages, the Ichimoku indicator will create a bullish signal when the Tenkan Sen crosses over the Kinjun Sen from below.  Further information  http://de.wikipedia.org/wiki/Ichimoku  http://www.forexabode.com/technical-analysis/ichimoku-cloud  http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ichimoku_cloud  http://www.forexonlinegeheimnisse.com/ichimoku-kinko-hyo-teil-i#top  (Part 1, German)  http://www.forexonlinegeheimnisse.com/ichimoku-kinko-hyo-teil-ii-das-perfekte-kauf-oder-verkaufssignal#top  (Part 2, German)  Usage  IchimokuCloud(int periodFast, int periodMedium, int periodSlow)\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow)\n\n//TenkanSen\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).TenkanSen[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).TenkanSen[int barsAgo]\n\n//KijunSen\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).KijunSen[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).KijunSen[int barsAgo]\n\n//ChikouSpan\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).ChikouSpan[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).ChikouSpan[int barsAgo]\n\n//SenkouSpanA\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).SenkouSpanA[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).SenkouSpanA[int barsAgo]\n\n//SenkouSpanB\nIchimokuCloud(int periodFast, int periodMedium, int periodSlow).SenkouSpanB[int barsAgo]\nIchimokuCloud(IDataSeries inSeries, int periodFast, int periodMedium, int periodSlow).SenkouSpanB[int barsAgo]  Return value  double  When using this method with an index (e.g.  IchimokuCloud (9,26,52)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  periodFast Period setting for the Tenkan line. Default: 9  periodMedium Period setting for the Kijun line. Default: 29  periodSlow Number of periods used for the calculation of the Chikou line. Default: 52  Visualization",
            "title": "IchimokuCloud"
        },
        {
            "location": "/indicators_oscillators/#insidebarsmt",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  InsideBarsMT displays inside bars as defined by Michael Voigt in his book.\nThe settings can be modified, and additional adjustments are also possible. Furthermore, there are several data series used in stop calculations for self-developed indicators and strategies.  Interpretation  Inside bars are bars whose body (open-close) are located within the high-low span of the previous bar. The previous bar is generally called an outside bar.\nInside bars will sometimes reflect sideways phases, and will also display trend corrections of lower timeframes. When trading inside bars, the stop is placed at the high or low of the previous period. If the high or low of the previous candle is unsuitable, then the high or low of an older candle is used.  Usage  InsideBarsMT().isInsideBar[int barsAgo]\nInsideBarsMT().isOutsideBar[int barsAgo]\nInsideBarsMT().HighBeforeOutsideBar[int barsAgo]\nInsideBarsMT().LowBeforeOutsideBar[int barsAgo]  Settings   InsideBarsMT ().isInsideBar[ int  barsAgo]   Will return \u201ctrue\u201d if the referenced bar is an inside bar, otherwise \u201cfalse\u201d   InsideBarsMT ().isOutsideBar[ int  barsAgo]   Will return \u201ctrue\u201d if the previous bar is an outside bar   InsideBarsMT ().HighBeforeOutsideBar[ int  barsAgo]   Will output the high of the bar preceding the outside bar   InsideBarsMT ().LowBeforeOutsideBar[ int  barsAgo]   Will return the low of the bar preceding the outside bar  Visualization   Tolerance parameter  In the image below you will see a longer \u201cphase\u201d where the market is within an inside bar. The bar marked with the arrow opens the low of the outside bar. If the open of the green candle had been a tick lower, then the marked bar would not be an inside bar and the red bar would clearly not be an outside bar.\nThe tolerance parameter defines the number of ticks by which the inside bars may \u201cbreach\u201d the high-low span of the outside bar and still be recognized as an inside bar.  Tolerance default setting = 0.   Example  double StopPrice;\nprotected override void OnCalculate()\n{\n// Open position when SMAs cross\nif (CrossAbove(SMA(10),SMA(20),1) && Position.PositionType == PositionType.Flat)\nOpenLong();\n// If the current bar is an inside bar, modify the stop\nif (InsideBarsMT().isInsideBar[0])\nStopPrice = InsideBarsMT().LowBeforeOutsideBar[0];\nelse\n// Use different stop method\n}",
            "title": "InsideBarsMT"
        },
        {
            "location": "/indicators_oscillators/#keltner-channel",
            "text": "Description  Keltner Channels are volatility-based envelopes placed above and below an EMA. This indicator shares similarities with Bollinger Bands, where the bands are set using the standard deviation. Here, instead of using the standard deviation, Keltner Channels use the Average True Range (ATR) to set the channel distance. Typically, the channels are set two Average True Range values above and two ATRs below the 20-day EMA. The EMA determines the direction and the Average True Range dictates the channel width. Keltner Channels form a trend-following indicator that is applied with the aim of identifying reversals with channel breakouts and channel direction. The channels can also be used to spot overbought and oversold levels when the trend is flat.\nIn his 1960 book,  How to Make Money in Commodities,  Chester Keltner featured the \"Ten-Day Moving Average Trading Rule,\" credited as the original version of Keltner Channels. This version started off with a 10-day SMA of the typical price {(H+L+C)/3)} as the center line. The 10-day SMA of the high-low range was added and subtracted to set the upper and lower channel lines respectively. Linda Bradford Raschke then brought in the more recent version of Keltner Channels in the 1980s. Similarly to Bollinger Bands, this new version made use of a volatility-based indicator, Average True Range (ATR), to set channel width.\nMiddle line = 20-day exponential moving average\nUpper channel line: 20-day EMA + (2x ATR(10))\nLower channel line: 20-day EMA \u2013 (2xATR(10))  Interpretation  Indicators based on channels, bands and envelopes are designed to encompass most price action. Therefore, moves above or below the channel lines warrant attention because they are relatively rare. Trends often start with strong moves in one direction or another. A surge above the upper channel line shows extraordinary strength, while a plunge below the lower channel line shows extraordinary weakness. Such strong moves can signal the end of one trend and the beginning of another.  With an exponential\u00a0 moving average ,  average \u00a0as their foundation, the Keltner Channels are a trend-following indicator. As with moving averages and trend-following indicators, Keltner Channels lag price action. The direction of the moving average dictates the direction of the channel. In general, a downtrend is present when the channel moves lower, while an uptrend exists when the channel moves higher. The trend is flat when the channel moves sideways.  A channel upturn and break above the upper trend line can signal the start of an uptrend. A channel downturn and break below the lower trend line can signal the start a downtrend. Sometimes a strong trend does not take hold after a channel breakout and prices oscillate between the channel lines. Such trading ranges are marked by a relatively flat moving average. The channel boundaries can then be used to identify overbought and oversold levels for trading purposes.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Keltner_Channel  Usage  KeltnerChannel(double offsetMutiplier, int period)\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period)\n\n//Returns midline value\nKeltnerChannel(double offsetMutiplier, int period)[int barsAgo]\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period)[int barsAgo]\n\n//Returns upper band value\nKeltnerChannel(double offsetMutiplier, int period).Upper[int barsAgo]\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period).Upper[int barsAgo]\n\n//Returns lower band value\nKeltnerChannel(double offsetMutiplier, int period).Lower[int barsAgo]\nKeltnerChannel(IDataSeries inSeries, double offsetMutiplier, int period).Lower[int barsAgo]  Return value  double  When using this method with an index (e.g.  KeltnerChannel (1.5, 15)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  offsetMultiplier Multiplier for the SMA  period Number of bars included in the calculations  Visualization   Calculation  diff. Set (High[0] - Low[0]);  double  middle =  SMA (Typical, Period)[0];  double  offset =  SMA (diff, Period)[0] * offsetMultiplier;  double  upper = middle + offset;  double  lower = middle - offset;  Example  //Current value for the Keltner Channel based on 15 periods\nPrint(\"Current value of the upper Keltner Channel band: \" + KeltnerChannel(1.5, 15).Upper[0]);\nPrint(\"Current value of the middle Keltner Channel band: \" + KeltnerChannel(1.5, 15)[0]);\nPrint(\"Current value of the lower Keltner Channel band: \" + KeltnerChannel(1.5, 15).Lower[0]);",
            "title": "Keltner Channel"
        },
        {
            "location": "/indicators_oscillators/#keyreversalup",
            "text": "Description  The KeyReversalUp indicator searches within a predefined number of periods to find turning points with the following characteristics:\n1   The current close is higher than the previous close\n2   The current low is smaller than or equal to the last low of the last n bars  See  KeyReversalDown ,  KeyReversalUpAtSMA ,  KeyReversalDownAtSMA ,  KeyReversalUpAtEMA ,  KeyReversalDownAtEMA .  Parameters  inSeries Input data series for the indicator\nperiod Number of bars included in the calculations  Return value  double  0 \u2013 No reversal information available\n1 \u2013 Reversal information available  Usage  KeyReversalUp(int period)\nKeyReversalUp(IDataSeries inSeries, int period)\nKeyReversalUp(int period)[int barsAgo]\nKeyReversalUp(IDataSeries inSeries, int period)[int barsAgo]  Example  // Search for an entry opportunity (longs)\nif (KeyReversalUp(10)[0] == 1)\nPrint(\"A long reversal formation has occurred.\");",
            "title": "KeyReversalUp"
        },
        {
            "location": "/indicators_oscillators/#keyreversaldown",
            "text": "Description  KeyReversalDown searches within a predefined number of periods to find turning points with the following characteristics:  1   The current close is lower than the previous close\n2   The current high is higher than or equal to the highest high of the last n bars  See  KeyReversalUp ,  KeyReversalUpAtSMA ,  KeyReversalDownAtSMA ,  KeyReversalUpAtEMA ,  KeyReversalDownAtEMA .  Parameters  inSeries Input data series for the indicator\nperiod Number of bars included in the calculations  Return value  double  0 \u2013 No reversal information available\n1 \u2013 Reversal information available  Usage  KeyReversalDown(int period)\nKeyReversalDown(IDataSeries inSeries, int period)\nKeyReversalDown(int period)[int barsAgo]\nKeyReversalDown(IDataSeries inSeries, int period)[int barsAgo]  Example  // Look for a short entry\nif (KeyReversalDown(10)[0] == 1)\nPrint(\"A short reversal formation has occurred.\");",
            "title": "KeyReversalDown"
        },
        {
            "location": "/indicators_oscillators/#keyreversalupatsma",
            "text": "Description  KeyReversalUpAtSMA searches within a predefined number of periods to find turning points with the following characteristics:  1   The current close is higher than the previous close\n2   The current low is smaller than or equal to the lowest low within n bars\n3   The current low has touched or breached an SMA  See  KeyReversalUp ,  KeyReversalDown ,  KeyReversalDownAtSMA ,  KeyReversalUpAtEMA ,  KeyReversalDownAtEMA .  Parameters  inSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nSMAperiod Number of periods included in the calculation of the SMA  Return value  double  0 \u2013 No reversal information\n1 \u2013 Reversal information found  Usage  KeyReversalUpAtSMA(int period, int SMAperiod)\nKeyReversalUpAtSMA(IDataSeries inSeries, int period, int SMAperiod)\nKeyReversalUpAtSMA(int period, int SMAperiod)[int barsAgo]\nKeyReversalUpAtSMA(IDataSeries inSeries, int period, int SMAperiod)[int barsAgo]  Example  // Look for a long entry\nif (KeyReversalUpAtSMA(10)[0] == 1)\nPrint(\"A long reversal formation has occurred.\");",
            "title": "KeyReversalUpAtSMA"
        },
        {
            "location": "/indicators_oscillators/#keyreversaldownatsma",
            "text": "Description  KeyReversalDownAtSMA searches within a predefined number of periods to find a turning point with the following characteristics:  1   The current close is lower than the previous close\n2   The current high is higher than or equal to the highest high within the last n periods\n3   The current high has touched or breached an SMA  See  KeyReversalUp ,  KeyReversalDown ,  KeyReversalUpAtSMA ,  KeyReversalUpAtEMA ,  KeyReversalDownAtEMA .  Parameters  inSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nSMAperiod Number of periods included in the SMA calculation  Return value  double  0 \u2013 No reversal formation found\n1 \u2013 Reversal formation present  Usage  KeyReversalDownAtSMA(int period, int SMAperiod)\nKeyReversalDownAtSMA(IDataSeries inSeries, int period, int SMAperiod)\nKeyReversalDownAtSMA(int period, int SMAperiod)[int barsAgo]\nKeyReversalDownAtSMA(IDataSeries inSeries, int period, int SMAperiod)[int barsAgo]  Example  // Search for a short entry\nif (KeyReversalDownAtSMA(10)[0] == 1)\nPrint(\"A short reversal formation has occurred.\");",
            "title": "KeyReversalDownAtSMA"
        },
        {
            "location": "/indicators_oscillators/#keyreversalupatema",
            "text": "Description  KeyReversalUpAtEMA searches within a predefined number of periods to find a reversal formation with the following characteristics:  1   The current close is higher than the previous close\n2   The current low is smaller than or equal to the lowest low within the last n bars\n3   The current low has touched or breached an EMA  See  KeyReversalUp ,  KeyReversalDown ,  KeyReversalUpAtSMA ,  KeyReversalDownAtSMA ,  KeyReversalDownAtEMA .  Parameters  inSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nEMAperiod Number of periods included in the EMA calculation  Return value  double  0 \u2013 No reversal information found\n1 \u2013 Reversal information found  Usage  KeyReversalUpAtEMA(int period, int EMAperiod)\nKeyReversalUpAtEMA(IDataSeries inSeries, int period, int EMAperiod)\nKeyReversalUpAtEMA(int period, int EMAperiod)[int barsAgo]\nKeyReversalUpAtEMA(IDataSeries inSeries, int period, int EMAperiod)[int barsAgo]  Example  // Search for a long entry\nif (KeyReversalUpAtEMA(10)[0] == 1)\nPrint(\"A long reversal formation has occurred.\");",
            "title": "KeyReversalUpAtEMA"
        },
        {
            "location": "/indicators_oscillators/#keyreversaldownatema",
            "text": "Description  KeyReversalDownAtEMA searches within a predefined number of periods to find a reversal formation with the following characteristics:  1   The current close is lower than the previous close\n2   The current high is larger than or equal to the highest high of the last n bars\n3   The current high has touched or breached an EMA  See  KeyReversalUp ,  KeyReversalDown ,  KeyReversalUpAtSMA ,  KeyReversalDownAtSMA ,  KeyReversalUpAtEMA .  Parameters  inSeries Input data series for the indicator\nperiod Number of bars included in the calculations\nEMAperiod Number of periods used to calculate the EMA  Return value  double  0 \u2013 No reversal formation found  1 \u2013 Reversal formation found  Usage  KeyReversalDownAtEMA(int period, int EMAperiod)\nKeyReversalDownAtEMA(IDataSeries inSeries, int period, int EMAperiod)\nKeyReversalDownAtEMA(int period, int EMAperiod)[int barsAgo]\nKeyReversalDownAtEMA(IDataSeries inSeries, int period, int EMAperiod)[int barsAgo]  Example  // Search for a short entry\nif (KeyReversalDownAtEMA(10)[0] == 1)\nPrint(\"A short reversal formation has occurred.\");",
            "title": "KeyReversalDownAtEMA"
        },
        {
            "location": "/indicators_oscillators/#klingervolumeoscillator",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The KlingerVolumeOscillator is a technical indicator that was developed by Stephen Klinger in order to determine long-term trends of the money flow. At the same time, the indicator is sensitive enough to also identify short-term fluctuations, thereby giving the trader the possibility to detect even short-term reversals in the market. The indicator compares the influent and effluent volume of an instrument with its price movements, and is outputted as an oscillator. A signal line (13-period moving average) is used for generating signals. Divergences in the KlingerVolumeOscillator in comparison to the price movement can also be used for entry and exit decisions. A bullish signal is formed when the KlingerVolumeOscillator start to rise while the price continues to fall; the opposite goes for a bearish signal.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "KlingerVolumeOscillator"
        },
        {
            "location": "/indicators_oscillators/#linear-regression",
            "text": "Description  Linear Regression is used to determine trends. Here, the prices are set as dependent variables, and time is set as an independent variable. Using the method for determination of the smallest square, a straight line is placed through the price movements in such a way that the distance between the prices and the line deviates as little as possible. Using this method also establishes a trend between two points in time. The regression line can be found in the middle of the price channel, and the indicator provides the end values of multiple linear regression trend lines. Each point along this indicator is therefore an end value of a linear regression trend line. What results is quite similar to a smoothing average, with the difference that the regression line exhibits less lag.  See  R-Squared ,  LinRegSlope ,  LinRegIntercept .  Further information  http://www.vtad.de/sites/files/forschung/vtad_Award_2011_Joachim_Lenz_Veroeffentlichung.pdf  Interpretation  The linear regression indicator is used as a prognosis tool for the future developments of the instrument. If the prices are rising or falling steadily, then it can be expected that they will return to a more realistic/reasonable level. In other words: the indicator shows where the price should be, a deviation from the regression is assumed to be short-lived and to be corrected soon.  Usage  LinReg(int period)\nLinReg(IDataSeries inSeries, int period)\nLinReg(int period)[int barsAgo]\nLinReg(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  LinReg (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Show the current values of the regression line\nPrint(\"The current value for the linear regression is: \" + LinReg(14)[0]);",
            "title": "Linear Regression"
        },
        {
            "location": "/indicators_oscillators/#linregintercept",
            "text": "Description  The Linear Regression Intercept outputs the value of the regression constant, i.e. the mathematical intersection of where the regression line meets the price axis.  A straight line can be accurately determined with the help of the slope and intercept values.  See  Linear Regression ,  R-Squared   LinRegSlope .  Interpretation  The indicator is not used by itself, but is simply a component of trading systems that analyze trade trends with the help of the linear regression.  Usage  LinRegIntercept(int period)\nLinRegIntercept(IDataSeries inSeries, int period)\nLinRegIntercept(int period)[int barsAgo]\nLinRegIntercept(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  LinRegIntercept (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Show current value\nPrint(\"The current value of the regression constant is: \" + LinRegIntercept(14)[0]);",
            "title": "LinRegIntercept"
        },
        {
            "location": "/indicators_oscillators/#linregslope",
            "text": "Description  The Linear Regression Slope outputs the slope of the linear regression line, and is a measurement of the regression line\u2019s \u201celevation\u201d.  See  Linear Regression ,  R-Squared ,  LinRegIntercept .  Interpretation  Simply put: in an uptrend, the elevation is positive and facing upwards. The opposite applies to downtrends.\nThis indicator is not very useful for determining overbought or oversold areas, but can be used to measure the strength of a trend. It should be used in combination with other indicators to identify potential entries.  Usage  LinRegSlope(int period)\nLinRegSlope(IDataSeries inSeries, int period)\nLinRegSlope(int period)[int barsAgo]\nLinRegSlope(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  LinRegSlope (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Current value for the slope:\nPrint(\"The current value for the inclination of the linear regression line is: \" + LinRegSlope(14)[0]);",
            "title": "LinRegSlope"
        },
        {
            "location": "/indicators_oscillators/#lowestlowindex",
            "text": "Description  LowestLowIndex delivers the index of the bar with the lowest low within a predefined number of periods.  Differently to GetSerieLowestValue(), one can display this indicator within a chart.  See  HighestHighPrice() ,  HighestHighIndex() ,  LowestLowPrice() , GetSerieHighestValue() ,  GetSerieLowestValue() .  Usage  LowestLowIndex(int BarsBack)\nLowestLowIndex(int BarsBack)[int barsAgo]  Return value  double  When using this method with an index (e.g.  LowestLowIndex (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameter  BarsBack Number of periods within which the highest high shall be searched for  Visualization   Example  // How many bars back is the lowest low of the last 14 bars located?\nPrint(\"The lowest low of the last 14 bars was \" + LowestLowIndex(14)[0] + \" bars ago.\");",
            "title": "LowestLowIndex()"
        },
        {
            "location": "/indicators_oscillators/#lowestlowprice",
            "text": "Description  LowestLowPrice delivers the value of the lowest low within a predefined number of periods.  Unlike the GetSerieLowestValue(), this indicator can be viewed within the chart.  See  HighestHighPrice() ,  HighestHighIndex() ,  LowestLowIndex , GetSerieHighestValue() ,  GetSerieLowestValue() .  Usage  LowestLowPrice(int BarsBack)\nLowestLowPrice(int BarsBack)[int barsAgo]  Return value  double  When using this method with an index (e.g.  LowestLowPrice (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameter  BarsBack Number of periods within which the low will be searched for  Visualization   Example  // What value did the lowest low of the last 14 periods have?\nPrint(\"The lowest low of the last 14 bars is \" + LowestLowPrice(14)[0]);",
            "title": "LowestLowPrice()"
        },
        {
            "location": "/indicators_oscillators/#macd",
            "text": "Description  The Moving Average Convergence-Divergence (MACD) indicator, developed by Gerald Appel in the late 70s, is one of the simplest, most effective momentum indicators out there. The MACD makes two trend-following indicators, moving averages, average, become a momentum oscillator by subtracting the longer moving average from the shorter moving average. As a result of this, the MACD offers great advantages: trend following and momentum. The MACD moves above and below the zero line as the moving averages converge, cross and diverge again. Signal line crossovers, centerline crossovers and divergences are things that traders can keep an eye out for to generate signals. Since the MACD is unbounded, it is not especially useful for identifying overbought or oversold levels. The MACD line is the 12-day Exponential Moving Average (EMA) minus the 26-day EMA, and closing prices are used for these moving averages. A 9-day EMA of the MACD line is plotted with the indicator acting as a signal line and identifying turns. The MACD histogram shows the difference between the MACD and its 9-day EMA, i.e. the signal line. When the MACD line is above its signal line, the histogram is positive, and vice versa when the MACD line is below its signal line.  The typical settings used with the MACD are the values 12, 26 and 9. However, other values can also be used depending on the trading style and goals in mind.  Interpretation  As its name implies, the MACD is all about the convergence and divergence of the two moving averages. Convergence occurs when the moving averages move towards each other. Divergence occurs when the moving averages move away from each other. The shorter moving average (12-day) is faster and responsible for most MACD movements. The longer moving average (26-day) is slower and less reactive to price changes in the underlying security.  The MACD line oscillates above and below the zero line, which is also known as the centerline. These crossovers signal that the 12-day EMA has crossed the 26-day EMA. The direction, of course, depends on the direction of the moving average cross. Positive MACD indicates that the 12-day EMA is above the 26-day EMA. Positive values increase as the shorter EMA diverges further from the longer EMA.\u00a0This means upside momentum is increasing.\u00a0Negative MACD values indicate that the 12-day EMA is below the 26-day EMA. Negative values increase as the shorter EMA diverges further below the longer EMA.\u00a0This means downside\u00a0 momentum \u00a0is increasing. Signal line crossovers are the most common MACD signals. The signal line is a 9-day EMA of the MACD line. As a moving average of the indicator, it trails the MACD and makes it easier to spot MACD turns. A bullish crossover occurs when the MACD turns up and crosses above the signal line. A bearish crossover occurs when the MACD turns down and crosses below the signal line. Crossovers can last a few days or a few weeks, it all depends on the strength of the move.  Due diligence is required before relying on these common signals. Signal line crossovers at positive or negative extremes should be viewed with caution. Even though the MACD does not have upper and lower limits, chartists can estimate historical extremes with a simple visual assessment. It takes a strong move in the underlying security to push momentum to an extreme. Even though the move may continue, momentum is likely to slow and this will usually produce a signal line crossover at the extremities. Volatility in the underlying security can also increase the number of crossovers.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/MACD  Usage  MACD(int fast, int slow, int smooth)\nMACD(IDataSeries inSeries, int fast, int slow, int smooth)\n\n//For the value of the MACD line\nMACD(int fast, int slow, int smooth)[int barsAgo]\nMACD(IDataSeries inSeries, int fast, int slow, int smooth)[int barsAgo]\n\n//For the value of the signal line\nMACD(int fast, int slow, int smooth).Avg[int barsAgo]\nMACD(IDataSeries inSeries, int fast, int slow, int smooth).Avg[int barsAgo]\n\n//For the difference between the MACD and the signal line\nMACD(int fast, int slow, int smooth).Diff[int barsAgo]\nMACD(IDataSeries inSeries, int fast, int slow, int smooth).Diff[int barsAgo]  Return value  double  When using this method with an index (e.g.  MACD (12,26,9)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  fast Number of periods for the fast EMA calculation  slow Number of periods for the slow EMA calculation  smooth Number of periods for the EMA calculation of the signal line  Visualization   Example  //Show the current values for the MACD\nPrint(\"The current value for the MACD line is: \" + MACD(12,26,9)[0]);\nPrint(\"The current value for the signal line is: \" + MACD(12,26,9).Avg[0]);\nPrint(\"The difference between the MACD and the signal line is: \" + MACD(12,26,9).Diff[0]);",
            "title": "MACD"
        },
        {
            "location": "/indicators_oscillators/#maenvelopes",
            "text": "Description  These Moving Average Envelopes are percentage-based envelopes placed above and below a moving average. The moving average forms the base for this indicator, and can be a either simple or exponential moving average. Each MA envelope is set the same percentage above or below the moving average, thereby creating parallel bands that follow price action. Moving Average Envelopes can be used as a trend-following indicator with a moving average as the base. But this indicator is not limited to just trend following: the envelopes can also be used for spotting overbought and oversold levels when the trend is relatively flat.  Indicators based on channels, bands and envelopes are intended to encompass most price action, which is why moves above or below the envelopes deserve attention. Trends often start with sharp moves in one direction \u2013 a surge above the upper envelope shows extraordinary strength, while a dive below the lower envelope exhibits extraordinary weakness. Strong moves such as these can signal the end of one trend and the start of another.  With a  moving average  as the foundation, Moving Average Envelopes are a trend-following indicator. As with moving averages, the envelopes lag price action. The direction of the moving average dictates the direction of the channel, so generally, when the channel moves lower, a downtrend exists, and when the channel goes higher, an uptrend is present. When the channel moves sideways, this signifies that the trend is flat.  Occasionally, it happens that a strong trend does not establish itself after an envelope break, and prices move into a trading range. Trading ranges such as these are characterized by a relatively flat moving average. These envelopes can then be used to spot overbought and oversold levels. A move above the upper envelope shows an overbought situation; a move below the lower envelope signals an oversold situation.  Usage  MAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period)\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period)\n\n//For the upper band\nMAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period).Upper[int barsAgo]\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period).Upper[int barsAgo]\n\n//For the middle band\nMAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period).Middle[int barsAgo]\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period).Middle[int barsAgo]\n\n//For the lower band\nMAEnvelopes(double envelopePercentage, MAEnvelopesMAType maType, int period).Lower[int barsAgo]\nMAEnvelopes(IDataSeries inSeries, double envelopePercentage, MAEnvelopesMAType maType, int period).Lower[int barsAgo]  Return value  double  When using this method with an index (e.g.  MAEnvelopes (14,SMA,1.5)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  v Input data series for the indicator  period Number of bars included in the calculations  envelopePercentage Distance of the upper and lower bands from the middle line in percent  maType Type of moving average used, possible choices are:\n-   EMA\n-   HMA\n-   SMA (default)\n-   TMA\n-   TEMA\n-   WMA  Visualization   Usage  //Value output for the upper band\nPrint(\"Upper band of the MA Envelope: \" + MAEnvelopes(1.5, MAEnvelopesMAType.SMA, 14).Upper[0]);\n\n//Value output for the middle band\nPrint(\"Middle band of the MA Envelope: \" + MAEnvelopes(1.5, MAEnvelopesMAType.SMA, 14).Middle[0]);\n\n//Value output for the lower band\nPrint(\"Lower band of the MA Envelope: \" + MAEnvelopes(1.5, MAEnvelopesMAType.SMA, 14).Lower[0]);",
            "title": "MAEnvelopes"
        },
        {
            "location": "/indicators_oscillators/#marketphases",
            "text": "The installation of the Dow Theory Standard or Professional Package is required in order to access this indicator.  Description  The Market Phases Indicator is another important component of the Technical Analysis Package, and is based on integrated trend detection for the various relevant trading market phases.  The market phases are defined according to the book series \u201cDer H\u00e4ndler\u201d (\u201cThe Trader\u201d) by Michael Voigt.  Important tip  \nMarketPhases indicators  are very history sensitive and need at least up to 2000 intraday candles to see good results.  Phase 3:  The market is located far away from the movement; a correction is imminent.   Phase 4:  The market is in correction mode. The original trend direction has not yet resumed. During the uptrend, further lows may occur, and in a downtrend, further highs may occur.   Phase 5:  The market is coming out of the correction and will resume its trend direction.   Phase 5+  The market is in Phase 5. In addition, the sub-trend is confirming a 1-2-3 pattern.   Phase 5+ (Prom Queen)  The term Prom Queen is also taken from the book series \u201c Der H\u00e4ndler \u201d. A 5+ trend phase is classified by an uptrend correction move running up to point 2. The correction zone is marked in grey in the following image.   Market phases 1, 2, 6, and 9 are not relevant for successful trading.  Depiction in the chart  No parameters are required.   Usage in AgenaScript  The indicator provides the following values for the market phases:  Phase 3: 3  Phase 4: 4  Phase 5: 5  Phase 5+ 5.1  Prom Queen 5.2  In a downtrend, the values are prefixed with a \u201c-\u201c sign. If the market phase is not defined, then the value 0 is returned.  MarketPhases(int trendSize)[barsAgo]  Parameter  trendsize: trend size from 0 .. 3  Caution:  For a comparison of double values such as:  if  ( MarketPhases (1)[0] == 5.1) ...we recommend that you use the following instead:  bool goLong = Math.Abs(MarketPhases(1)[0] - 5.1) <= Double.Epsilon;  Usage within the Condition Escort  When using market phases within AgenaScript, the indicator provides a data series that has the aforementioned values of +/-3, 4, 5, 5.1, 5.2.  You can use the indicator as a filter by using the signals of other indicators when they are inside the market phases 5.1 or 5.2(long):   Important tip  \nIf you want to use  MarketPhases (also Pro and Advanced version) indicator in conjunction with the scanner, the following settings are required:   Chart settings:  Bars count   Time frame    Scanner column settings:   Bars required  Time frame   These chart and column settings should be identical.      MarketPhases Pro Description  Phase5Level \nHow far the price correction must be to become a valid market phase 5.  Phase4Level \nHow far the price correction must be to become a valid market phase 4.",
            "title": "MarketPhases"
        },
        {
            "location": "/indicators_oscillators/#marketvalue",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator compares the value of a market with the current price of gold or the dollar index. This means that markets are placed in relation to the gold price or the dollar, whereby over- and undervaluation can be determined very well in instruments.   A low MarketValue means that a market is cheap relative to gold/dollar index; vice versa, a higher value means that the market is relatively expensive.   In general, commodities should be compared to the gold price, and financials to the dollar index. However, depending on the market environment, it may be useful to deviate from this rule.  The following parameters are available for the MarketValue:     CompareTo:  select [Gold/Dollar Index] depending on which market the current symbol should be placed in relation to.     EMA1:  this is a period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the default settings. (Default value = 21)     EMA2:  this is an EMA period that is necessary for calculating the data. If you do not have detailed information about how this indicator works, please leave this period on the standard settings. (Default value = 3)    It is not yet possible to use the MarketValue indicator in the ConditionEscort, since a multi-instrument indicator cannot be depicted there. Since the MarketValue requires the price data from the current chart and also from gold i.e. the dollar index, this is a multi-instrument indicator, which, as mentioned, currently cannot be represented in the ConditionEscort.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "MarketValue"
        },
        {
            "location": "/indicators_oscillators/#momentum-mom",
            "text": "Description  Momentum is one of the most popular indicators available, the first choice of many traders. This relatively simple indicator is so popular because it measures the attenuation of the motion without the need for complex formulas. The momentum indicator represents a whole family of indicators that measure a movement\u2019s strength. Other representatives in this case are the RSI or CCI, and so on. In the illustration below, the indicator is a graph that oscillates around a zero point. There is no fixed scale in percentage terms, and the value can be quite far removed from the zero point; this usually happens when the price makes an exceptionally strong leap, which is why the indicator predominantly shows the direction in which the current prices are moving towards.  Interpretation  Entry signals are generated when the indicator crosses the zero line.  See  ROC .  Further information  http://de.wikipedia.org/wiki/Momentum_%28Chartanalyse%29  Usage  Momentum(int period)\nMomentum (IDataSeries inSeries, int period)\nMomentum (int period)[int barsAgo]\nMomentum (IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  Momentum (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output of the values for the momentum indicator.\nPrint(\"The current value for the momentum is \" + Momentum(14)[0]);",
            "title": "Momentum (MOM)"
        },
        {
            "location": "/indicators_oscillators/#money-flow-index-mfi",
            "text": "Description  The MFI is an oscillator that makes use of both volume and price to measure buying and selling pressure. MFI, which was developed by Gene Quong and Avrum Soudack, is also known as volume-weighted  RSI . MFI starts with the typical price for each period. Money flow is then positive when this aforementioned typical price increases (buying pressure) and negative when it decreases (selling pressure). A ratio of positive-negative money flow is then inserted into an RSI formula to come up with an oscillator that fluctuates between 0 and 100. The MFI, which is a momentum oscillator linked to volume, is best used for identifying reversals and price extremes with a variety of different signals.  Interpretation  The MFI is interpreted similarly to the RSI indicator. The MFI\u2019s decisive factor is much stronger than the RSI\u2019s when it comes to trend direction, due to the fact that volume is included in the calculation.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Money_Flow_Index  Usage  MFI(int period)\nMFI(IDataSeries inSeries, int period)\nMFI(int period)[int barsAgo]\nMFI(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  MFI (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Current MFI value\nPrint(\"The current value for the MFI is: \" + MFI(14)[0]);",
            "title": "Money Flow Index (MFI)"
        },
        {
            "location": "/indicators_oscillators/#moving-averages",
            "text": "Variants  DEMA  - Double Exponential Moving Average  EMA  - Exponential Moving Average  HMA  - Hull Moving Average  KAMA  - Kaufman's Adaptive Moving Average  MAMA  - Mesa Adaptive Moving Average  SMA  - Simple Moving Average  TEMA  - Triple Exponential Moving Average  TMA  - Triangular Moving Average  TRIX  - Triple Exponential Moving Average  T3  - Triple Exponential Moving Average  VMA  - Variable Moving Average  VWMA  - Volume Weighted Moving Average  WMA ,  VMA  - Weighted Moving Average  ZLEMA  - Zero Lag Exponential Moving Average  Interpretation  The arithmetic average, also known as the moving average or simple moving average, smoothes the progression of the price for better trend detection. Moving averages are trend-following indicators; they follow the course and do not lead. IsSerieRising averages show uptrends, whereas falling averages display downtrends.\nBy varying the period input, the time delay of the average can be changed. The smaller the period interval, the quicker the reaction time will be, but as a consequence, the smoothing effect will also be diminished. The opposite is true when increasing the period selection. The most popular choices are: 38, 50, 100 and 200 days. The 200-day moving average in particular has a significant importance for institutional traders, since it displays the long-term trend. 200 trading days are equal to a trading year. When the 200 MA is broken, then buy/sell signals are generated.  Applications  Crossing of two averages  The integration of multiple moving averages is used to identify trend sequences and minimize the number of false signals. When two arithmetic averages are used, whereby one is a short-term and the other a long-term, more interesting signals can be generated. One such application can be seen with Richard Donchian\u2019s methodologies, such as using the 5 and 20-day averages.\nThe Double Crossover Method generates signals in the following way:  If the short-term average crosses the long-term average from below, this is called a Golden Cross, and a buy signal is generated. Higher trading volume reinforces the quality of the signal. The long-term average works as a support line in an uptrend.  If the short-term average crosses the long-term average from above, this is called a Death Cross. It generates a sell signal. Higher trading volume reinforces the signal quality. In a downtrend, the long-term average functions as a resistance line.  Crossing of three moving averages  Another method is to use three moving averages (Triple Crossover Method). This method was presented by R.C Allen, who used the 4, 9, and 18-day averages and suggested that a trend change is hinted at when the 4MA crosses the 9MA from bottom to top. An entry is only recommended when all lines are above the 18-day period. An exit is initiated when the 4-day MA moves below the 9-day MA.\n(Source: VTAD)",
            "title": "Moving Averages"
        },
        {
            "location": "/indicators_oscillators/#dema-double-exponential-moving-average",
            "text": "Description  The Double Exponential Moving Average is a technical indicator created by Patrick Mulloy. The calculation hereof is done using a simple as well as a double exponential moving average.  Interpretation  The DEMA is a fast-working moving average that reacts quicker to market changes. The DEMA may be used as a stand-alone indicator or in tandem with other indicators.\nThe general interpretations are the same as for regular moving averages.  Usage  DEMA(int period)\nDEMA(IDataSeries inSeries, int period)\nDEMA(int period)[int barsAgo]\nDEMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  DEMA (20)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Calculation  Value.Set(2 * EMA(InSeries[0], Period)[0] - EMA(EMA(InSeries[0], Period), Period)[0]);  Example  //Output the values for the DEMA\nPrint(\"The current DEMA value is \" + DEMA(20)[0]);",
            "title": "DEMA - Double Exponential Moving Average"
        },
        {
            "location": "/indicators_oscillators/#ema-exponential-moving-average",
            "text": "Description  Exponential moving averages work to reduce lag by weighting recent prices more heavily. The weighting given to the most recent price depends on the number of periods in the moving average. Calculating an exponential moving average involves three steps. 1. Calculate the simple moving average. An exponential moving average (EMA) must start somewhere, therefore a simple moving average is used as the previous period's EMA in the beginning calculation. 2. Calculate the weighting multiplier. 3. Calculate the EMA.  Interpretation  The EMA is used by many traders in the most varying of timeframes. It is especially meaningful within the 15, 60 and 240-minute charts. The EMA 200 line is also especially popular with traders.  If the price rises sharply and moves away quickly from the respective EMA line, it is possible to enter countertrend positions in order to profit from the potential return to the moving average.\nGeneral interpretations of the moving averages also apply to the EMA.  Usage  EMA(int period)\nEMA(IDataSeries inSeries, int period)\nEMA(int period)[int barsAgo]\nEMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  EMA (20)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Calculation  Value.Set(ProcessingBarIndex == 0 ? InSeries[0] : InSeries[0] * (2.0 / (1 + Period)) + (1 - (2.0 / (1 + Period))) * Value[1]);  Example  //Output the value for the EMA\nPrint(\"The current EMA value is \" + EMA(20)[0]);",
            "title": "EMA - Exponential Moving Average"
        },
        {
            "location": "/indicators_oscillators/#ema-mtf-multitimeframe",
            "text": "Description  The EMA MTF indicator is a multi-timeframe version of the standard EMA indicator.\nThis indicator basically allows you to make calculationgs in a different timeframe than that of the current chart.  For more information, see  EMA .  Also see  BollingerMTF ,  SmaMTF .  Visualization  A 5-minute chart with an EMA(20) calculated with hourly bars as the underlying input:",
            "title": "EMA MTF (MultiTimeFrame)"
        },
        {
            "location": "/indicators_oscillators/#hma-hull-moving-average",
            "text": "Description  The Hull Moving Average, invented by Alan Hull, is a fast-working moving average that gets rid of almost all delays/lags (zero lag). The calculation is carried out using several weighted moving averages, thereby partially reducing the smoothing effect. Hull\u2019s methodology uses square roots of the period instead of the actual period itself.  Interpretation  The same interpretations as for the moving averages apply to the HMA, the only major distinction being the reduced lag. See  Moving Averages .  Usage  HMA(int period)\nHMA(IDataSeries InSeries, int period)\nHMA(int period)[int barsAgo]\nHMA(IDataSeries InSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  HMA (21)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Calculation  double value1 = 2 * WMA(InSeries, (int)(Period / 2))[0];\ndouble value2 = WMA(InSeries, Period)[0];\ndiffSeries.Set(value1 - value2);\nValue.Set(WMA(diffSeries, (int) Math.Sqrt(Period))[0]);  Example  //Output the value for the HMA\nPrint(\"The current HMA value is \" + HMA(21)[0]);",
            "title": "HMA - Hull Moving Average"
        },
        {
            "location": "/indicators_oscillators/#kama-kaufmans-adaptive-moving-average",
            "text": "Description  The KAMA is based on an EMA in which a trend efficiency ratio controls the weight of future price changes. This efficiency ratio (the squared efficiency factor) is a measure that can also be used by itself. The trend efficiency is the ratio of the absolute price change from the start to the end of the period, and the total of the absolute daily price changes. At higher trending efficiencies (i.e. straight price movements) without too much variation, the extra price carries a higher weighting, according to a shorter day period setting. Lower trending frequencies carry a smaller weighting.  Interpretation  Kaufman mentions that a rising KAMA value can be interpreted as a buying signal, whilst falling KAMA values assume the prices to be falling.\nKaufman also defines a maximum and minimum value for the calculation of the smoothing components. The efficiency ratio is converted using specified maximum and minimum values, which are applied to newly incoming price changes. Kaufman uses 2 (short period) as a minimum value and 30 (long period) as a maximum value. The number of days for the determination of the efficiency ratio is one of the more important parameters for the KAMA.  For a more general interpretation of moving averages, please see the following chapter:  Moving Averages .  Further information  http://www.investor-verlag.de/boersenwissen/kama/  Usage  KAMA(int fast, int period, int slow)\nKAMA(IDataSeries inSeries, int fast, int period, int slow)\nKAMA(int fast, int period, int slow)[int barsAgo]\nKAMA(IDataSeries inSeries, int fast, int period, int slow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  KAMA (2,10,30)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  fast Short period  slow Long period  Visualization   Example  //Output for the value of the Kaufman Moving Average(KAMA)\nPrint(\"The current value of the KAMA is \" + KAMA(2,10,30)[0]);",
            "title": "KAMA - Kaufman's Adaptive Moving Average"
        },
        {
            "location": "/indicators_oscillators/#mama-mesa-adaptive-moving-average",
            "text": "Description  This automatically adapting moving average has a period length that is determined by means of various complex calculations. This complex indicator has its origins in publications by John Ehlers. Ehlers calculates cycles for the price movements to determine the length and intensity of single trend phases. Working with the length of the cycles, the weighting factor for the moving average can be established in several different ways.  FAMA \nThis indicator is a second line \u2013 the name FAMA can be found in various publications. This line is similar to the underlying exponential moving average and can be used as a trigger line.  Interpretation  For more concise information, we recommend that you read Ehler\u2019s paper.  General information about moving averages can be found here:  Moving Averages .  Further information  http://www.tradesignalonline.com/de/lexicon/view.aspx?id=MAMA+adaptive+Moving+Average  Usage  MAMA(double fastLimit, double slowLimit)\nMAMA(IDataSeries inSeries, double fastLimit, double slowLimit)\nMAMA(double fastLimit, double slowLimit)[int barsAgo]\nMAMA(IDataSeries inSeries, double fastLimit, double slowLimit)[int barsAgo]\n\n//Value of the Following Adaptive Moving Average (FAMA)\nMAMA(double fastLimit, double slowLimit).Fama[int barsAgo]\nMAMA(IDataSeries inSeries, double fastLimit, double slowLimit).Fama[int barsAgo]  Return value  double  When using this method with an index (e.g.  MAMA (0.5,0.05)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  fastLimit Upper limit for the alpha value  slowLimit Lower limit for the alpha value  Visualization   Example  //Output values for (MAMA)\nPrint(\"The current value for the MAMA is \" + MAMA(0.5, 0.05)[0]);\n//Output values for (FAMA)\nPrint(\"The current value for the FAMA is \" + MAMA(0.5, 0.05).Fama[0]);",
            "title": "MAMA - Mesa Adaptive Moving Average"
        },
        {
            "location": "/indicators_oscillators/#sma-simple-moving-average",
            "text": "Description  The SMA is the most well-known average, representing the simplest method of displaying the trend direction in a chart. In mathematical terms, this is the arithmetic mean of a number of individual lengths. It is called \u201cmoving\u201d because to establish an average, the oldest value is always sacrificed to make space for the new incoming price change. Fundamentally speaking, the period length influences the intensity of the smoothing. Shorter periods (such as 10 days) will mean that the indicator follows the price changes quite closely.\nThe SMA has a few disadvantages, which is why several adaptations of this indicator have been developed in the last few years. One of the biggest disadvantages is the fact that the indicator tends to lag, and the equal weighting for all data inputs across time intervals.\nYou can find more general interpretations and meanings here:  Moving Averages .  Further information  http://www.forex-trading-online.de/indikatoren/simple-moving-average-sma  http://vtadwiki.vtad.de/index.php/SMA#Average-Off-Berechnungsverfahren_.28MMA.29  Usage  SMA(int period)\nSMA(IDataSeries InSeries, int period)\nSMA(int period)[int barsAgo]\nSMA(IDataSeries InSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  SMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Calculation  Value. Set ((last + InSeries[0] - InSeries[Period]) / Math. Min (ProcessingBarIndex, Period));  Example  //Output of the SMA value\nPrint(\"The current SMA value is \" + SMA(14)[0]);",
            "title": "SMA - Simple Moving Average"
        },
        {
            "location": "/indicators_oscillators/#sma-mtf-multitimeframe",
            "text": "Description  The SMA MTF \u2013 as is true for the other multi-timeframe indicator variations \u2013 allows traders to display the SMA of a specific timeframe on a chart of a different timeframe.  See  BollingerMTF ,  EmaMTF .  Visualization  The image shows a 5-minute chart with an SMA (14) calculated on 4-hour bars",
            "title": "SMA MTF (MultiTimeFrame)"
        },
        {
            "location": "/indicators_oscillators/#smma-smoothed-moving-average",
            "text": "Description  The Smoothed Moving Average is combined from both Simple Moving Average and the Exponential Moving Average. Generally speaking, it is only used for higher period amounts/inputs. It normally has roughly half of the value of an EMA, meaning that an SMMA(20) is closer to an EMA(40).  Interpretation  For more general information about moving averages, please see  Moving Averages .  The SMMA is often used with the  SuperTrend  indicator.  Further information  http://www2.wealth-lab.com/wiki/SMMA.ashx  Usage  SMMA(int period)\nSMMA(IDataSeries inSeries, int period)\nSMMA(int period)[int barsAgo]\nSMMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  SMMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the value of the SMMA\nPrint(\"The current SMMA value is \" + SMMA(14)[0]);",
            "title": "SMMA - Smoothed Moving Average"
        },
        {
            "location": "/indicators_oscillators/#tema-triple-exponential-moving-average",
            "text": "Description  The TEMA is combined from a single, a double and a triple EMA. This combo improves the delay between the indicator and price movements. The Triple Exponential Moving Average is quite efficient at smoothing price changes.  You can find more information about moving averages here:  Moving Averages .  Usage  TEMA(int period)\nTEMA(IDataSeries inSeries, int period)\nTEMA(int period)[int barsAgo]\nTEMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  TEMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the Triple Exponential Moving Average\nPrint(\"The current TEMA value is \" + TEMA(14)[0]);",
            "title": "TEMA - Triple Exponential Moving Average"
        },
        {
            "location": "/indicators_oscillators/#tma-triangular-moving-average",
            "text": "Description  This specifically weighted average has an extra smoothing component. The weightings are not linear, but instead take on a triangular pattern. To demonstrate, the weighting for a 7-period average would be 1,2,3,4,3,2,1. More weight is given to the median value of the time series, and the newest and oldest data is given less weight.  Usage  TMA(int period)\nTMA(IDataSeries inSeries, int period)\nTMA(int period)[int barsAgo]\nTMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  TMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the value of the TMA\nPrint(\"The current value for the TMA is \" + TMA(14)[0]);",
            "title": "TMA - Triangular Moving Average"
        },
        {
            "location": "/indicators_oscillators/#trix-triple-exponential-moving-average",
            "text": "Description  Jack Hutson developed this TRIX indicator, which is a 1-day rate-of-change indicator. What this means is that day 2 is divided by day 1, day 3 by day 2 and so on and so forth, and this is then applied to a triple exponential moving average of the closing prices. This results in a zero line fluctuating oscillator which is used as trend indicator thanks to its stability.  Interpretation  A buy signal is created when the TRIX indicator crosses the zero line from bottom to top. A sell signal is generated when the zero line is broken in a downwards direction.  Usage  TRIX(int period, int signalPeriod)\nTRIX(IDataSeries inSeries, int period, int signalPeriod)\nTRIX(int period, int signalPeriod)[int barsAgo]\nTRIX(IDataSeries inSeries, int period, int signalPeriod)[int barsAgo]\n\n//For the signal line\nTRIX(int period, int signalPeriod).Signal[int barsAgo]\nTRIX(IDataSeries inSeries, int period, int signalPeriod).Signal[int barsAgo]  Return value  double  When using this method with an index (e.g.  TRIX (14, 3)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  signal period Number of bars included in the signal line calculation  Visualization   Example  //Output for the TRIX EMA\nPrint(\"The current TRIX value is \" + TRIX(14, 3)[0]);\n\n//Output for the TRIX signal line\nPrint(\"The current TRIX value is \" + TRIX(14, 3).Signal[0]);",
            "title": "TRIX - Triple Exponential Moving Average"
        },
        {
            "location": "/indicators_oscillators/#t3-triple-exponential-moving-average",
            "text": "Description  The Triple Exponential Moving Average T3 indicator (also dubbed the T3MA) is calculated by taking the weighted sums of a simple, a double, and a triple EMA. This produces a smooth, soft indicator line. The parameter tCount allows the trader to set the number of reiterations. The calculation is the same as the calculation for the DEMA, with the slight difference that here, a volume factor is also added. It accepts values between 0 and 1 (default: 0.7).  Usage  T3(int period, int tCount, double vFactor)\nT3(IDataSeries inSeries, int period, int tCount, double vFactor)\nT3(int period, int tCount, double vFactor)[int barsAgo]\nT3(IDataSeries inSeries, int period, int tCount, double vFactor)[int barsAgo]  Return value  double  When using this method with an index (e.g.  T3 (14,3,0.7)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  tCount Number of iterations for the smoothing  vFactor Volume factor (multiplier)  Visualization   Example  //Output of the value for the T3 indicator\nPrint(\"The current T3 value is \" + T3(14, 3, 0.7)[0]);",
            "title": "T3 - Triple Exponential Moving Average"
        },
        {
            "location": "/indicators_oscillators/#vma-variable-moving-average",
            "text": "Description  This variation of an EMA automatically smoothes any fluctuations in the market, and its sensitivity grows as more weight is placed on more recent data.  The VMA attempts to get rid of the disadvantages of other moving averages by automatically regulating the smoothing constant. This is why the VMA can be implemented for most of the market conditions, and is in a few cases actually better than other averages.  Caution \nThe VMA is not to be confused with the Volume Moving Average (VolMA)!  Usage  VMA(int period, int volatilityPeriod)\nVMA(IDataSeries inSeries, int period, int volatilityPeriod)\nVMA(int period, int volatilityPeriod)[int barsAgo]\nVMA(IDataSeries inSeries, int period, int volatilityPeriod)[int barsAgo]  Return value  double  When using this method with an index (e.g.  VMA (9,9)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  volatility period Number of bars included in the calculation for the signal line  Visualization   Example  //Output the VMA value\nPrint(\"The current VMA value is \" + VMA(9, 9)[0]);",
            "title": "VMA - Variable Moving Average"
        },
        {
            "location": "/indicators_oscillators/#vwma-volume-weighted-moving-average",
            "text": "Description  VWMA is a non-cumulated smoothed average that is weighted based on the various volumes for the periods.  Usage  VWMA(int period)\nVWMA(IDataSeries inSeries, int period)\nVWMA(int period)[int barsAgo]\nVWMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  VWMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the VWMA\nPrint(\"The current VWMA value is \" + VWMA(14)[0]);",
            "title": "VWMA - Volume Weighted Moving Average"
        },
        {
            "location": "/indicators_oscillators/#wma-weighted-moving-average",
            "text": "Description  The Weighted Moving Average is the most well-known of the weighted averages, and is implemented to identify and quickly react to price changes. Current prices are given higher weighting than older ones. In addition, bad signals in sideways markets are minimized. The WMA smoothes the price changes and makes more efficient trade identification possible.  Further information  http://www.tradesignalonline.com/de/lexicon/view.aspx?id=Moving+Average+Weighted+%28WMA%29  Usage  WMA(int period)\nWMA(IDataSeries inSeries, int period)\nWMA(int period)[int barsAgo]\nWMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  WMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the WMA\nPrint(\"The current value of the WMA is \" + WMA(14)[0]);",
            "title": "WMA - Weighted Moving Average"
        },
        {
            "location": "/indicators_oscillators/#zlema-zero-lag-exponential-moving-average",
            "text": "Description  The Zero Lag Exponential Moving Average is another variation of the EMA. Zero lag in this context signifies no delay, which means that the indicator adapts to the price changes more closely. The indicator does so by removing older price data and decreasing the cumulative effect in order to minimize the lag.  Further information  FMLabs:  http://www.fmlabs.com/reference/default.htm?url=ZeroLagExpMA.htm  Usage  ZLEMA(int period)\nZLEMA(IDataSeries inSeries, int period)\nZLEMA(int period)[int barsAgo]\nZLEMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ZLEMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the value of the Zero Lag Exponential Moving Average\nPrint(\"The current ZLEMA value is \" + ZLEMA(14)[0]);",
            "title": "ZLEMA - Zero Lag Exponential Moving Average"
        },
        {
            "location": "/indicators_oscillators/#nbarsup",
            "text": "Description  The nBarsUp indicator looks for a specified number of rising closing prices. Other conditions can also be added to the search, for example:\nConstantly rising bars, i.e. close < open (red candles)\nConstantly rising highs\nConstantly rising lows  Usage  NBarsUp(int barCount, bool BarUp, bool higherHigh, bool higherLow)\nNBarsUp(IDataSeries inSeries, int barCount, bool BarUp, bool higherHigh, bool higherLow)\nNBarsUp(int barCount, int barCount, bool BarUp, bool higherHigh, bool higherLow)[int barsAgo]\nNBarsUp(IDataSeries inSeries, int barCount, bool BarUp, bool higherHigh, bool higherLow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  NBarsUp (...)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  1 \u2013 The condition applies\n0 \u2013 The condition does not apply  Parameters  inSeries Input data series for the indicator  barCount Number of successively rising closing prices  barUp Additional condition (true): each close must be higher than the open (green bar)  higherHigh Additional condition (true): continuously rising highs  higherLow Additional condition (true): continuously rising lows  Visualization   Example  // Look for 3 successively rising closing prices\nif (NBarsUp(3, true, true, true)[0] == 1)\nPrint(\"3 successively higher closing prices have occurred.\");",
            "title": "nBarsUp"
        },
        {
            "location": "/indicators_oscillators/#nbarsdown",
            "text": "Description  The nBarsDown indicator looks for a specified number of falling closing prices.  The following conditions can also be included in the search:\n-   Constantly falling bars\n-   Constantly falling highs\n-   Constantly falling lows  Usage  NBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(IDataSeries inSeries, int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]\nNBarsDown(IDataSeries inSeries, bool barCount, int BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  NBarsDown (...)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  1 \u2013 The condition applies\n0 \u2013 The condition does not apply  Parameters  inSeries Input data series for the indicator  barCount Required number of successively lower closing prices  barDown Additional condition (true): each close must be lower than the open  lowerHigh Additional condition (true): continuously falling highs  lowerLow Additional condition (true); continuously falling lows  Visualization   Example  NBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(IDataSeries inSeries, int barCount, bool BarDown, bool lowerHigh, bool lowerLow)\nNBarsDown(int barCount, bool BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]\nNBarsDown(IDataSeries inSeries, bool barCount, int BarDown, bool lowerHigh, bool lowerLow)[int barsAgo]",
            "title": "nBarsDown"
        },
        {
            "location": "/indicators_oscillators/#onbalancevolume-obv",
            "text": "Description  This indicator displays the buy or sell pressure. For each day with a positive close, the volume is added cumulatively, and it is subtracted for days with a close that is smaller than the open.  Interpretation  Granville theorized that volume precedes price. OBV rises when volume on up days outpaces volume on down days. OBV falls when volume on down days is stronger. A rising OBV reflects positive volume pressure that can lead to higher prices. Conversely, falling OBV reflects negative volume pressure that can foreshadow lower prices. Granville noted in his research that OBV would often move before price. Expect prices to move higher if OBV is rising while prices are either flat or moving down. Expect prices to move lower if OBV is falling while prices are either flat or moving up.  The absolute value of OBV is not important. Chartists should instead focus on the characteristics of the OBV line. First define the trend for OBV. Second, determine if the current trend matches the trend for the underlying security. Third, look for potential support or resistance levels. Once broken, the trend for OBV will change and these breaks can be used to generate signals. Also notice that OBV is based on closing prices. Therefore, closing prices should be considered when looking for divergences or support/resistance breaks. And finally, volume spikes can sometimes throw off the indicator by causing a sharp move that will require a settling period. (Source: Stockcharts.com)  Usage  OBV()\nOBV(IDataSeries inSeries)\nOBV()[int barsAgo]\nOBV(IDataSeries inSeries)[int barsAgo]  Return value  double  When using this method with an index (e.g.  OBV ()[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameter  inSeries Input data series for the indicator  Visualization   Example  //Output the value for the On Balance Volume (OBV)\nPrint(\"The current value for the OBV is \" + OBV()[0]);",
            "title": "OnBalanceVolume (OBV)"
        },
        {
            "location": "/indicators_oscillators/#outsidebars",
            "text": "Description  The Outside Bars indicator is in fact an outdated version of the  InsideBarsMT .",
            "title": "OutsideBars"
        },
        {
            "location": "/indicators_oscillators/#p123",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The goal of the P123 indicator is to automatically detect a 1-2-3 pattern.  The following features make it stand out:  Innovative recognition of 4 different trend sizes  It recognizes points 1, 2, and 3 at the bar  Recognition of a trend continuation in the same direction as a trend break  Completely automatic adjustment of the search algorithm for all possible market conditions (no additional settings/inputs required)  Adaptive workflow, adjusting to any volatility fluctuations  Clear overview while simultaneously displaying the various trend sizes  Can be implemented within the Condition Escort and AgenaScript  The trend sizes are defined as follows:  T0 = large trend  T1 = medium-sized trend  T2 = small trend  T3 = smallest trend size  The smallest trend size (T3) cannot be detected on all trading instruments. Point 2 is often situated at the high of a bar, and point 3 at the low of the same bar. Depending on the timeframe and fluctuation range, T0 and T1 can be fused into one.  The indicator determines the selected timeframe of the chart, and then labels all trends and trend sizes accordingly. When there is low volatility, trend recognition is more sensitive, and the vice versa for higher volatility. The P123\u2019s adaptive methods make for a balanced recognition of trend sizes.  Important tip:  In some cases, the large trend (T0) cannot be seen with the naked eye, which may be due to the fact that not enough candles are visible within the chart. A minimum of 500 candles should be loaded to ensure this is not the case.  Interpretation  Trading signals often form at points 2 & 3: at point 3 as entry signals into a correction phase within a confirmed trend, and at point 2 as a sub-trend in the trend direction of the superior trade. The definition of a trend at points 1 to 3 can be read in \" Das gro\u00dfe Buch der Markttechnik \" by Michael Voigt (German only).  Visualization in the chart  The parameter input settings define which trend sizes are shown in the chart and whether or not they are connected by a line.  For the default settings, the trend T2 is enabled by default.  The depiction in the chart may change with the changing market movements. If the market moves below the last point 3 and breaks the uptrend, the point is marked with a \u201c3?\u201d. The newly created low becomes the new point 2 and the last point 2 becomes point 1.   The parameter settings are not relevant for the display in the chart and are primarily used for the Condition Escort.  The depiction in the chart is primarily influenced by the settings \u201cDisplay 123\u201d and \u201cDisplay Lines\u201d.   The settings highlighted in yellow have no influence on the chart. No changes need to be made.  Usage in AgenaScript  When using P123 in AgenaScript, multiple public variables are available.  A notation such as [barsAgo] is not available for this. Parameter occurrences are used in the following manner:  P123 ( int  trendSize). ... <<a public variable, see below>>  P123 ( int  trendSize,  int  occurrence). ...           Trend Direction  1 = uptrend -1 = downtrend 0 = no trend    IsTrendValid  true = confirmed trend with a point sequence of at least 1 - 2 - 3 - 2    false = no confirmed trend (phases 1 and 2)     LastPoint  last point of a trend, 1, 2 or 3    LastPointPrice  outputs the price value of the last market point    LastPointDateTime  outputs the date and time of the last market point    P1Price  outputs the value of the last point 1    P1DateTime  outputs the value and date/time of the last point 1    P2Price  outputs the value of the last point 2    P2DateTime  outputs the time and date of point 2    TempP3Price  putputs the value of the temporary point \u201c3?\u201d    TempP3DateTime  outputs the time and date of the temporary point \u201c3?\u201d    ValidP3Price  outputs the value of the last point 3. This is used as a stop placement. When this point is breached, a trend change is confirmed    ValidP3DateTime  outputs the date and time for the last valid point 3     Parameters  trendsize: trend size from 0 .. 3  occurrence the occurrences of the youngest to the oldest point  Example  private void PrintOutTrendProperties(int trendSize)\n{\n  // Reverse order of prints fills output window in correct order\n  Print(\"\");\n  Print(\"valid P3 date: \" + P123(trendSize).ValidP3DateTime);\n  Print(\"valid P3 price: \" + P123(trendSize).ValidP3Price);\n  Print(\"temp P3 date: \" + P123(trendSize).TempP3DateTime);\n  Print(\"temp P3 price: \" + P123(trendSize).TempP3Price);\n  Print(\"P2 date: \" + P123(trendSize).P2DateTime);\n  Print(\"P2 price: \" + P123(trendSize).P2Price);\n  Print(\"P1 date: \" + P123(trendSize).P1DateTime);\n  Print(\"P1 price: \" + P123(trendSize).P1Price);\n  Print(\"last point date: \" + P123(trendSize).LastPointDateTime);\n  Print(\"last point price: \" + P123(trendSize).LastPointPrice);\n  Print(\"last point: \" + P123(trendSize).LastPoint);\n  Print(\"is trend valid: \" + P123(trendSize).IsTrendValid);\n  Print(\"trend direction: \" + P123(trendSize).TrendDirection);\n}  Utilization within the Condition Escort  All public variables are available to you inside the Condition Escort as data series; they can be found under \u201eSeries & Output Values\u201c.\nThe name has an underscore (\"_\") suffix in order to differentiate it.  The parameters \u201ctrendSize\u201d and \u201coccurrence\u201d can be found within the Condition Escort.  P123Pro  The parameter TrendSize can be found under the parameter settings (see figure). It is only intended to be used within the Condition Escort. This parameter is not relevant for display in the chart. The display is only controlled by the following settings: \"Display 123\" and \"Display Lines\".   You can see in the respectful description fields for each parameter to which extend the particular parameters may influence the chart or Condition Escort as well as AgenaScript.  Usage in the AgenaScript  For the AgenaScript purposes several data series of the same type are doubled. For each of these data series the common notation with ...[barsAgo] can be used.           TrendDirection  1 = Uptrend -1 = Downtrend 0 = no trend defined according to the market technique    IsP21  If a bar represents an old point 2 and at the same time a new point 1, it will be labelled in the chart as \"(2) 1\". The value of this bar (and all subsequent bars up to the next point 2) will be 1, and 0 otherwise.    IsTrendValid  1 = defines a confirmed trend, i.e. at least a point sequence 1 - 2 - 3 - 2. 0 = there is no confirmed trend yet. (Phase 1 and 2 according to market technique)    LastPoint  Provides the latest point of the trend, i.e. 1, 2, or 3    LastPointPrice  Provides the corresponding market value of the latest point according to the market technique    LastPointDateTime  Provides the corresponding date and time related to the latest point according to the market technique    LastPointExtInfo  Provides the corresponding label of the latest point according to the market technique. The labelling should be additionally defined in Parameter tab. The slope is a chart-only feature therefore it is neither in Conditions, nor in the AgenaScript available.    P1Price  Provides the market value of the latest point 1    P1DateTime  Provides the date and time of the latest point 2    PriorP2Price  efert die Datums- und Zeitangabe des vorletzten Punkt 2    TempP3Price  Provides the date and time of the second last point 2    TempP3DateTime  Provides the date and time of the last preliminary point 3    ValidP3Price  Provides the market value of the last valid point 3. This market value defines the stop movement according to the market techniques. When this point is crossed, there is a trend break from the market technique perspective.    ValidP3DateTime  Provides the date and time of the last valid point 3     Parameters           trendsize  Trend size of 0 .. 3    breakageP2  Shows an arrow in the chart, when a break of P2 occurs or has been already completed. The figure is expressed as a percentage between -100 and +100. -20 alerts e.g. 20% before the P2 will be reached    extInfo  Selection of a labelling    p2Distance  Uncertainty:  this is a factor (between 0 and 1) that defines, how far has to be the P2 from the \"old\" valid P2 in order to be treated as valid. The previous movement is decisive in this case.    p3Distance  Uncertainty:  this is a factor (between 0 and 1) that defines, how far has to be the P3 from the \"old\" valid P2 in order to be treated as valid. The previous movement is decisive in this case..    p3BreakageDistance  Uncertainty:  this is a factor (between 0 and 1) that defines when a trend brake is valid. The previous movement is decisive in this case. So, for instance, the breakout of the latest P3 (with one tick only) will not be considered as the breakout anymore.     Examples  private void PrintOutTrendProperties(int trendSize)\nprivate void PrintOutTrendProperties(int trendSize)\n{\n    // revers order of prints fills output window in correct order\n    Print(\"\");\n    Print(\"IsP21: \" +  P123Pro(trendSize).IsP21[0]);\n    Print(\"valid P3 date: \" +  P123Pro(trendSize).ValidP3DateTime[0]);\n    Print(\"valid P3 price: \" +  P123Pro(trendSize).ValidP3Price[0]);\n    Print(\"temp P3 date: \" +  P123Pro(trendSize).TempP3DateTime[0]);\n    Print(\"temp P3 price: \" +  P123Pro(trendSize).TempP3Price[0]);\n    Print(\"P2 date: \" +  P123Pro(trendSize).P2DateTime[0]);\n    Print(\"P2 price: \" +  P123Pro(trendSize).P2Price[0]);\n    Print(\"P1 date: \" +  P123Pro(trendSize).P1DateTime[0]);\n    Print(\"P1 price: \" +  P123Pro(trendSize).P1Price[0]);\n    Print(\"last point date: \" +  P123Pro(trendSize).LastPointDateTime[0]);\n    Print(\"last point price: \" +  P123Pro(trendSize).LastPointPrice[0]);\n    Print(\"last point: \" +  P123Pro(trendSize).LastPoint[0]);\n    Print(\"Is trend valid: \" +  P123Pro(trendSize).IsTrendValid[0]);\n    Print(\"Trend direction: \" +  P123Pro(trendSize).TrendDirection[0]);\n    Print(\"P2Breakout: \" +  P123Pro(trendSize).P2Breakout[0]);\n    Print(\"Extended Information: \" +  P123Pro(trendSize).LastPointExtInfo[0]);\n}  Usage in the Condition Escort  All data series (excluding the DateTime series) are available in the Condition Escort under the \"Series & Output Values\".  Logical variables (true and false) are replaced by the numbers 1 and 0. The \"TrendSize\" parameter is available in the Condition Escort as well. The description you will find below.  Examples  Inquiry whether the currently active in the chart middle trend is a downtrend: \nP123Pro(Close, 1).TrendDirection[0] - Inh. TimeFrame   ==   1  Inquiry whether the latest point of the currently active in the chart smallest trend is a Point2: \nP123Pro(Close, 3).LastPoint[0] - Inh. TimeFrame   ==   2  Inquiry whether the latest bar under the valid point 3 (not the 3?) of the small trend has been closed: \nP123Pro(Close, 2).isTrendValid[0] - Inh. TimeFrame   ==   1 \nUND (also neue Zeile)\nClose[0] - Inh. TimeFrame   <   P123Pro(Close, 2).ValidP3Price[0] - Inh. TimeFrame",
            "title": "P123"
        },
        {
            "location": "/indicators_oscillators/#parabolic-sar",
            "text": "Description  Welles Wilder came up with the Parabolic SAR, which denotes a price and time-based trading system. Wilder named this the \"Parabolic Time/Price System.\" SAR signifies \"stop and reverse,\" which is the name of the actual indicator used in his system, where  SAR trails price as the trend extends over time . When prices are rising, the indicator is below them, and when prices are falling, it is above them. Therefore the indicator stops and reverses when the price trend reverses and breaks either above or below the indicator.  Wilder used his new book, New Concepts in Technical Trading Systems, to introduce the Parabolic Time/Price System in 1978. The book also discusses RSI, Average True Range, and the Directional Movement Concept (ADX). Although they were created before the computer age, Wilder's indicators function equally well today and have a high reputation.  SAR follows the price, and can be considered a trend-following indicator. If a downtrend reverses and starts up, SAR follows the prices just like a trailing stop. This stop continues to rise so long as the uptrend remains intact, which means that the SAR never decreases in an uptrend and is always protecting profits as prices move forwards. Once the price stops rising and reverses below SAR, a downtrend starts and SAR is above the price. SAR follows prices lower like a trailing stop, as mentioned before. The stop continuously falls as long as the downtrend continues to exist. Due to the fact that SAR never rises in a downtrend, it always protects profits on short positions.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Parabolic_SAR  Wikipedia:  http://en.wikipedia.org/wiki/Parabolic_SAR  Usage  ParabolicSAR(double acceleration, double accelerationStep, double accelerationMax)\nParabolicSAR(IDataSeries inSeries, double acceleration, double accelerationStep, double accelerationMax)\nParabolicSAR(double acceleration, double accelerationStep, double accelerationMax)[int barsAgo]\nParabolicSAR(IDataSeries inSeries, double acceleration, double accelerationStep, double accelerationMax)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ParabolicSAR (...)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters           acceleration  Acceleration    accelerationStep  Increment of the acceleration    accelerationMax  Maximum acceleration    InSeries  Input data series for the indicator     Visualization   Example  //Output of the value for the PSAR\nPrint(\"The current value for the Parabolic SAR is \" + ParabolicSAR(0.02, 0.2, 0.02)[0]);",
            "title": "Parabolic SAR"
        },
        {
            "location": "/indicators_oscillators/#percentage-price-oscillator-ppo",
            "text": "Description  The Percentage Price Oscillator displays the percentage difference between two moving averages. It is classed as a momentum indicator and is similar to the MACD in its construction.  Interpretation  The PPO can be used for divergence analysis. The divergences have the advantage of having a higher percentual hit rate. On the downside, they often appear too early and thus are hard for newer traders to assess properly.  Usage  PPO(int fast, int slow, int smooth)\nPPO(IDataSeries inSeries, int fast, int slow, int smooth)\nPPO(int fast, int slow, int smooth)[int barsAgo]\nPPO(IDataSeries inSeries, int fast, int slow, int smooth)[int barsAgo]\n\n//For the smoothed value\nPPO(int fast, int slow, int smooth).Smoothed[int barsAgo]\nPPO(IDataSeries inSeries, int fast, int slow, int smooth).Smoothed[int barsAgo]  Return value  double  When using this method with an index (e.g.  PPO (12,26,9)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  fast Number of bars for the calculation of the fast EMA  slow Number of bars for the calculation of the slow EMA  smooth Number of bars for the calculation of the EMA signal line  Visualization   Example  //Output for the PPO\nPrint(\"The current value for the PPO is \" + PPO(12, 26, 9)[0]);\n\n//Output for the value of the PPO smoothed\nPrint(\"The current value for the PPO is \" + PPO(12, 26, 9).Smoothed[0]);",
            "title": "Percentage Price Oscillator (PPO)"
        },
        {
            "location": "/indicators_oscillators/#percentenvelopes",
            "text": "Description  The Percent Envelopes indicator draws an upper and a lower band around a predefined value with a distance of a specified percentage value. The trader can specify which data series the entry value should be (highs, lows, closing price, another indicator etc.).  It is possible to use an SMA as the entry value. In this case, the upper and lower bands will be displayed with a distance of 1.5%.  Interpretation  Similarly to the Bollinger Bands, the Percent Envelope indicator can be used to make buy or sell decisions and to determine whether the price is under- or overvalued.  The Percent Envelope should never be used to make decisions based solely on the output, but should be used in conjunction with other indicators to confirm signals.  Usage  PercentEnvelopes(double percent)\nPercentEnvelopes(IDataSeries inSeries, double percent)\n\n//For the upper band\nPercentEnvelopes(double percent).UpperPercentBand[int barsAgo]\nPercentEnvelopes(IDataSeries inSeries, double percent).UpperPercentBand[int barsAgo]\n\n//For the lower band\nPercentEnvelopes(double percent).LowerPercentBand[int barsAgo]\nPercentEnvelopes(IDataSeries inSeries, double percent).LowerPercentBand[int barsAgo]  Return value  double  When using this method with an index (e.g.  PercentEnvelopes (2)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  percent Difference in % for the bands (from the input value)  Visualization   Example  //Output for the upper band\nPrint(\"Value of the upper percent band is: \" + PercentEnvelopes(3).UpperPercentBand[0]);\n\n//Output for the lower band\nPrint(\"Value of the lower percent band is: \" + PercentEnvelopes(3).LowerPercentBand[0]);",
            "title": "PercentEnvelopes"
        },
        {
            "location": "/indicators_oscillators/#pivot-points",
            "text": "Description  This indicator, based on the price zone approach invented by Dr. Bruce Gould, has been honed over the years. In the beginning, the price zones were calculated using the price developments of the last 2-3 years. Nowadays, however, the practical concept of pivot points is taken from the calculation of price zones in the daily chart, using the previous day\u2019s periods as the basis. The goal hereby is to determine price levels that one could use as potential resistance zones (R1..R3) or support zones (S1..S3). The following methods can be used to calculate the indicator: Classic, Floor, Woodie, Camarilla, Fibonacci. The Classic and Floor methods are often wrongly named within literature, which is why in AgenaTrader you will find that the Classic method is labeled as \u201cFloor\u201d and vice versa. The indicator displays the pivot points for intraday charts, and the parameter \u201cShowPrices\u201d allows you to display the price on the levels. The parameter \u201cDaysBack\u201d allows you to set the number of periods in the past that should be used for the calculation. The line coloring can be defined manually  Interpretation  Traders prefer to sell above the resistance lines 1 & 2 (e.g. to build up short positions), and to start building up tactical long positions at the support lines.  Further information  http://www.finanznachrichten.de/nachrichten-2008-01/9833653-was-sind-pivot-punkte-und-wie-kann-ich-sie-handeln-005.htm  http://www.aktienboard.com/forum/f38/7-kapitel-pivot-points-t36428/  http://www.forexschule.com/schule/wie-man-mit-hilfe-von-pivot-punkten-handelt-50  Usage  PivotPoints()\nPivotPoints(PivotPointsMode mode)\nPivotPoints(PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)\nPivotPoints(IDataSeries inSeries, PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)\nPivotPoints()[barsAgo]\nPivotPoints(PivotPointsMode mode)[barsAgo]\nPivotPoints(PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)[barsAgo]\nPivotPoints(IDataSeries inSeries, PivotPointsMode mode, int LineWidth, bool ShowPrices, int DaysBack, Color RColor, Color PPColor, Color SColor)[barsAgo]  Return value  This class has the following public methods (as data series), which all return double values:  PP, S1, S2, S3, R1, R2 ,R3  Example:  PivotPoints().PP[int barsAgo]\nPivotPoints(PivotPointsMode.Classic).S3[int barsAgo]  Parameters           InSeries  Input data series for the indicator    PivotPointsMode  Calculatory method    PivotPointsMode.Classic     PivotPointsMode.Floor     PivotPointsMode.Woodie     PivotPointsMode.Camarilla     PivotPointsMode.Fibonacci     Default: floor     LineWidth  Default: 1    ShowPrices  Shows prices next to the lines    Default: false     DaysBack  The number of historical periods to be included in the display of the pivot lines    Default: 0     RColor  Resistance line color    PPColor  Pivot line color    SColor  Support line color     Visualization   Example  //Output current pivot point\nPrint(\"The floor pivot point is located at: \" + PivotPoints()[0]);\n//Output first support (S1)\nPrint(\"The first pivot support (S1) is at: \" + PivotPoints().S1[0]);  Calculation  H=yesterday\u2019s high, L=yesterday\u2019s low, O=yesterday\u2019s open, C=yesterday\u2019s close  Range = H-L  Classic  pp = (H + L + C)/3  r1 = 2*pp - L  s1 = 2*pp - H  r2 = pp - s1 + r1  s2 = pp - r1 + s1  r3 = H + 2*(pp - L)  s3 = L - 2*(H - pp)  Floor  pp = (H + L + C)/3  r1 = 2*pp - L  s1 = 2*pp - H  r2 = pp + Range  s2 = pp - Range  r3 = pp + 2*Range  s3 = pp - 2*Range  Woodie  pp = (H + L + 2*C)/4  r1 = 2*pp - L  s1 = 2*pp - H  r2 = pp + H - L  s2 = pp - H + L  r3 = 0.0  s3 = 0.0  Camarilla  pp = (H + L + C)/3  r1 = C + Range * 1.1 / 12  s1 = C - Range * 1.1 / 12  r2 = C + Range * 1.1 / 6  s2 = C - Range * 1.1 / 6  r3 = C + Range * 1.1 / 4  s3 = C - Range * 1.1 / 4  Fibonacci  pp = (H + L + C)/3  r1 = pp + 0.382 * Range  s1 = pp - 0.382 * Range  r2 = pp + 0.618 * Range  s2 = pp - 0.618 * Range  r3 = pp + 0.764 * Range  s3 = pp - 0.764 * Range",
            "title": "Pivot Points"
        },
        {
            "location": "/indicators_oscillators/#polarized-fractal-efficiency-pfe",
            "text": "Description  Hans Hannula developed the PFE, which is categorized as a momentum indicator. It uses the methods of fractal geometry and chaos theory to determine the price efficiency of the movements.  Interpretation  When the PFE zigzags around the zero line, no trend is present. If the PFE is equally formed and running above the zero line, the market is in an uptrend. The higher the value, the stronger the uptrend.  Usage  PFE(int period)\nPFE(IDataSeries inSeries, int period)\nPFE(int period)[int barsAgo]\nPFE(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  PFE (20)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the value of the Polarized Fractal Efficiency (PFE)\nPrint(\"The current value for the PFE is: \" + PFE(20)[0]);",
            "title": "Polarized Fractal Efficiency (PFE)"
        },
        {
            "location": "/indicators_oscillators/#price-oscillator",
            "text": "Description  This indicator is based on the difference between two moving averages. The difference is measured in absolute values, not in percentages.  Usage  PriceOscillator(int fast, int slow, int smooth)\nPriceOscillator(IDataSeries inSeries, int fast, int slow, int smooth)\nPriceOscillator(int fast, int slow, int smooth)[int barsAgo]\nPriceOscillator(IDataSeries inSeries, int fast, int slow, int smooth)[int barsAgo]  Return value  double  When using this method with an index (e.g.  PriceOscillator (12,26,9)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  fast Number of bars used for the calculation of the fast EMA  slow Number of bars used for the calculation of the slow EMA  smooth Number of bars used for the calculation of the EMA signal line  Visualization   Example  //Output for the value of the price oscillator\nPrint(\"The current value for the PPO is \" + PriceOscillator(12, 26, 9)[0]);\n//Output for the value of the smooth price oscillator\nPrint(\"The current value for the smooth is \" + PriceOscillator(12, 26, 9).Smoothed[0]);",
            "title": "Price Oscillator"
        },
        {
            "location": "/indicators_oscillators/#rainbow",
            "text": "Description  The rainbow indicator is represented by the set of the moving average indicator lines. Each of these lines is placed closer or further from the chart depending on the time period taken into the account for calculation of moving averages.  Introduction  The rainbow indicator has some advantages comparing to the single moving average lines because it shows better, where the trend reversal occurs. When divergence in all lines is substantial - this is a signal of a strong up- or downtrend movement.\nBy default red lines are the closest to the chart and represent the moving average line with the smallest time period.  Yellow lines indicate short-term trends. Blue display the area for short-term traders\u2019 activity. Green is typify for medium-term trends. Pink lines can be usefull for traders who hold positions for a long period.  Return value  Colors:  Yellow \u0415\u041c\u0410: 2,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15;\nBlue \u0415\u041c\u0410: 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41;\nGreen \u0415\u041c\u0410: 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74;\nRed \u0415\u041c\u0410: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122;\nPink \u0415\u041c\u0410: 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200.  Parameters           MA Type  Allows to select between the types of the moving average lines that shape a rainbow indicator. Default setting is the EMA (exponential moving average) but it is possible to choose a simple (SMA), hull (HMA) and weighted (WMA) moving average lines    Low MA Period  Shows the smallest amount of time periods for which the moving average will be calculated. For example, the setting \u201c2\u201d for the daily chart indicates the two latest daily closing prices.    High MA Period  Shows the largest amount of time periods for which the moving average will be calculated.    Step  Defines the amount of moving average lines shown on a chart within the rainbow indicator. The smaller is this number the larger amount of lines will be plotted. In our example, step 2 would mean that the indicator will contain 80 EMA lines: EMA(2), EMA(4), EMA(6) and so on.     Visualisation",
            "title": "Rainbow"
        },
        {
            "location": "/indicators_oscillators/#range",
            "text": "Description  Range delivers the span/difference between the high and low in ticks for each bar. The range is always greater than or equal to 0.  Usage  Range()\nRange(IDataSeries inSeries)\nRange()[int barsAgo]\nRange(IDataSeries inSeries)[int barsAgo]  Return value  double  When using this method with an index (e.g.  Range ()[ int  barsAgo] ), the range value for the referenced bar will be outputted.  Parameter  inSeries Input data series for the indicator  Visualization   Example  //Output for the value of the range\nPrint(\"The current bar has a range of: \" + Range()[0]);\n\n//Identical output\nPrint(\"The current bar has a range of: \" + High[0] - Low[0]);",
            "title": "Range"
        },
        {
            "location": "/indicators_oscillators/#range-indicator-rind",
            "text": "Description  Jack Weinberg created the Range Indicator (RIND), which was first published in 1954. The RIND compares the intraday span (range) between the high and low to the span (range) between the current closing price and the closing price from the day before.  Interpretation  When the span between the current close and the previous days close is bigger than the intraday span between high and low, the indicator will display a high value. This signals a potential trend change...  Further information  http://www.fmlabs.com/reference/default.htm?url=RangeIndicator.htm  Usage  RIND(int periodQ, int smooth)\nRIND(IDataSeries inSeries, int periodQ, int smooth)\nRIND(int periodQ, int smooth)[int barsAgo]\nRIND(IDataSeries inSeries, int periodQ, int smooth)[int barsAgo]  Return value  double  When using this method with an index (e.g.  RIND (3,10)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  periodQ Number of bars used for the short-term stochastic  smooth Number of bars used for smoothing the indicator (using an EMA)  Visualization   Example  //Output\nPrint(\"The current value for the PFE is: \" + RIND(3, 10)[0]);",
            "title": "Range Indicator (RIND)"
        },
        {
            "location": "/indicators_oscillators/#rate-of-change-roc",
            "text": "Description  The Rate of Change Indicator is a simple yet effective momentum oscillator. It measures the relative percentage change of the prices from one period to the next.\nThe calculation looks at the current price and compares it to the price of n periods ago.  Interpretation  As long as the ROC is above 0, the uptrend is intact.\nAs long as the ROC is below 0, the downtrend is intact.\nDivergences between the indicator and the price development can hint to a trend change.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/RoC  Usage  ROC(int period)\nROC(IDataSeries inSeries, int period)\nROC(int period)[int barsAgo]\nROC(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  ROC (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization",
            "title": "Rate of Change (ROC)"
        },
        {
            "location": "/indicators_oscillators/#relative-currency-strength-rcs",
            "text": "Description  The Relative Currency Strength indicator is a tool used for technical analysis for the Forex\n(foreign exchange) market. This indicator calculates the current and historical strength or\nweakness of a currency. The RCS can be used in all timeframes; the interpretation of the\nindicator remains the same.  The basic idea of the RCS is based on finding the strongest and weakest currency in the\npresent moment in a historical context. When you have all currencies displayed\nsimultaneously, you can seek out the strongest and weakest currency in that moment. The\nstrongest currency is the one whose line is currently the highest in comparison to the other\nlines; vice versa, you will find the weakest currency to be the lowest line at that moment. The\ncurrency pair that results from this is a potential trade candidate.  If the RCS is showing that at the moment, the euro is the strongest (overbought) and the US\ndollar is the weakest (oversold) currency relative to the other major currencies, then a short\nentry in the EURUSD Forex pair makes sense.  The logic behind this states that the EURUSD will fall either when the euro shows weakness\nor the US dollar displays strength. Since the euro is overbought, its performance will tend to\nweaken; in addition, the dollar is oversold, which means we can predict rising strength on the\npart of the USD. By finding the strongest and weakest currency, one trades the currency pair\nthat currently contains the highest probability of a value adjustment  Parameters    Moving Average Type: [SMA/EMA] \u2013 calculation of the Relative Strength based on an SMA (Simple Moving Average) or EMA (Exponential Moving Average).    Slow Period: input parameter for the sensitivity of the calculation. Higher values mean that a slower average is used for the calculation. Please leave this parameter on the standard setting (10) unless you are 100% sure what you are changing with this, since the analysis of the RCS can be distorted by deviating values. A higher period simply outputs fewer signals, which, however, present higher potential in return.    Fast Period: see Slow Period.    \u2013 11. Set the currencies that you wish to have displayed in the chart to \u201cTrue\u201d.    Signals  Extreme points in the valuation of 2 currencies  \nFor this signal, just display the two currencies included in the respective currency pair from\nthe RCS. In the example above, the EURUSD is loaded in the chart and the RCS is showing\nthe USD (green) and the euro (blue).\nAt the red horizontal lines, there is a strong overvaluation of the euro in comparison to the\ndollar. In these situations, the euro shows enormous strength, and the dollar great\nweakness. These tendencies cannot be maintained in the long run, since in the course of\nthings, both currencies gravitate toward their fair value. This is why this overvaluation of the\neuro is followed by a weakening of the EURUSD ratio, that is to say the EURUSD currency\nprice falls.\nThis interpretation is possible for every Forex pair.  Intersecting of the currency lines  The overlapping of two currency lines can also be used as a signal. In the example, a long\nsignal (blue) forms when the USD intersects the CHF line from bottom to top. A short signal\nis formed when the CHF intersects the USD line from top to bottom.   Divergences between chart and RCS  A divergence is formed when, for example, the chart forms new highs that are no longer confirmed by the strength of the RCG. In the example, the USDCHF forms new highs after a strong upward movement, which, however, are no longer confirmed by the USD strength of the RCS. After the divergence occurs, the USDCHF cannot continue its upward movement and transitions into a sideways phase. A divergence, therefore, can be used as an early indicator, for example to \u201cforesee\u201d the end of a longer movement.   Display of the current performance  In the right-hand side of the indicator window, you have a display showing how the\ncurrencies are currently developing. The values shown are the absolute changes of the\nindividual currency in the RCS graph of the previous period compared to the current period.\nFor example, a change in the USD from 0.0700 (previous period) to 0.0800 (current period)\nis outputted as +100 USD. This display serves to provide a global overview of how the Forex\nmajors are currently developing relative to each other.",
            "title": "Relative Currency Strength (RCS)"
        },
        {
            "location": "/indicators_oscillators/#relative-performance",
            "text": "Description  Calculates the price ratio between current and selected symbols.  Further information  http://stockcharts.com/articles/mailbag/2012/01/how-can-i-chart-relative-performance-qqq-underperforms-spy-.html?st=relative+performance  http://www.wikinvest.com/wiki/Relative_performance  Usage  RelativePerformance (Instrument)\nRelativePerformance (Instrument)[int barsAgo]  Return value  double  Parameters  IInstrument   Visualization",
            "title": "Relative Performance"
        },
        {
            "location": "/indicators_oscillators/#relative-spread-strength-rss",
            "text": "Description  The Relative Spread Strength Indicator was developed in 2006. It uses the difference of two SMAs to calculates the value of the RSI.  Interpretation  Values above 70 and below 30 mean that the price has the potential of turning. Trades should not be entered into at these points. When it comes to extreme values, you might want to check smaller timeframes for clearer trading signals.  In the long-term analysis, the following methodology should be applied:   below 30: long entry   above 70: for more than 5 days: exit long    above 95: short entry   below 30: for more than 5 days: exit short   Usage  RSS(int eMA1, int eMA2, int length)\nRSS(IDataSeries inSeries, int eMA1, int eMA2, int length)\nRSS(int eMA1, int eMA2, int length)[int barsAgo]\nRSS(IDataSeries inSeries, int eMA1, int eMA2, int length)[int barsAgo]  Return value  double  When using this method with an index (e.g.  RSS (10,40,5)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  length Number of bars used in the calculation  eMA1 Number of periods for the first EMA  eMA2 Number of periods for the second EMA  Visualization   Example  //Output for the RSS\nPrint(\"The current RSS is \" + RSS (10, 40, 5)[0]);",
            "title": "Relative Spread Strength (RSS)"
        },
        {
            "location": "/indicators_oscillators/#relative-strength-index-rsi",
            "text": "Description  J. Welles Wilder, the creator of several indicators, also developed the RSI, which is one of the most popular, useful momentum oscillators. It compares the size of the most recent profits with the size of the most recent losses, which means that it assesses the relationships between the up and down closing prices. The values are shown between 0 and 100.  Interpretation  Traditionally, and according to Wilder, RSI is considered overbought when above 70 and oversold when below 30. Signals can also be generated by searching for divergences, failure swings and centerline crossovers. RSI can also be used to identify the general trend. These traditional levels can also be adjusted to better fit the security or analytical requirements. Raising overbought to 80 or lowering oversold to 20 will reduce the number of overbought/oversold readings. Short-term traders sometimes use 2-period RSI to look for overbought readings above 80 and oversold readings below 20.  Further information  http://technische-analyse.eu/index.php?title=RSI  Usage  RSI(int period, int smooth)\nRSI(IDataSeries inSeries, int period, int smooth)\nRSI(int period, int smooth)[int barsAgo]\nRSI(IDataSeries inSeries, int period, int smooth)[int barsAgo]\n\n//For the average value\nRSI(int period, int smooth).Avg[int barsAgo]\nRSI(IDataSeries inSeries, int period, int smooth).Avg[int barsAgo]  Return value  double  When using this method with an index (e.g.  RSI (14,3)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  smooth Number of periods for the smoothing  Visualization   Example  //Output for the RSI\nPrint(\"The current value for the RSI is: \" + RSI(14, 3)[0]);\n\n//Output for the average line\nPrint(\"The current value for the AVG line is: \" + RSI(14, 3).Avg[0]);",
            "title": "Relative Strength Index (RSI)"
        },
        {
            "location": "/indicators_oscillators/#relative-strength-levy-rsl",
            "text": "Description  The concept of the Relative Strength according to R.A. Levy is that the past developments play a very important role in the strength that will be seen in the future. The current performance is compared to the past performance.  The calculation involves taking the weekly closes (or daily closes) and dividing them by the arithmetic mean of the closing prices for the examined period. The result is then balanced around the 10 marker, and an ordered list is created where the value of the highest RSL fills the first place.  Usage  RSL(int period)\nRSLDataSeries inSeries, int period)\nRSLnt period)[int barsAgo]\nRSL(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  RSL (27)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //RSL value output\nPrint(\"The Relative Strength as calculated by Levy is \" + RSL(27)[0]);",
            "title": "Relative Strength Levy (RSL)"
        },
        {
            "location": "/indicators_oscillators/#relative-volatility-index-rvi",
            "text": "Description  The Relative Volatility Index (RVI) has many similarities to the RSI indicator. Donald Dorsey developed the RVI, which uses the standard deviation instead of the daily price span. To determine the underlying volatility of the instrument, the RVI uses the standard deviation over a period of 10. The RSI indicator is then used on the results, which normalizes them. What comes from this is displayed on a scale of 1 to 100.  Interpretation  Values above 50 assume an increase in volatility. Values below 50 imply a drop in volatility. Dorsey recommends using the indicator as a filter for other indicators.  Further information  http://vtadwiki.vtad.de/index.php/Relative_Volatility_Index_%28RVI%29  Usage  RVI(int period)\nRVI(IDataSeries inSeries, int period)\nRVI(int period)[int barsAgo]\nRVI(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  RVI (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output of the RVI value\nPrint(\"The current value for the RVI is: \" + RVI(14)[0]);",
            "title": "Relative Volatility Index (RVI)"
        },
        {
            "location": "/indicators_oscillators/#reversalbars",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The Reversal Bars indicator helps the trader find reversal bars within a chart.\nThe indicator has a plot, and outputs the value 1 for long reversal bars, -1 for short reversal bars and 0 when there are none present. Traders can make several adjustments such as colors, arrows that are shown, etc.  Interpretation  The interpretation of reversal bars is described in M. Voight\u2019s book.  Usage  Reversalbars()\nReversalbars(IDataSeries inSeries)\nReversalbars()[int barsAgo]\nReversalbars(IDataSeries inSeries)[int barsAgo]\nReversalbars(int tolerance)\nReversalbars(IDataSeries inSeries, int tolreance)\nReversalbars(int tolerance)[int barsAgo]\nReversalbars(IDataSeries inSeries, int tolerance)[int barsAgo]  Return value  double  1 = long reversal bar  -1 = short reversal bar  0 = no reversal bar  When using this method with an index (e.g.  Reversalbars ()[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  tolerance See the following description below  Visualization   The tolerance parameter  The reversal bars must exceed their previous bars by at least 1 tick. The tolerance parameter allows you to define/add a certain number of ticks; the parameter is set to 0 by default, but in a sideways market this will lead to a relatively large number of reversal bars being marked.   Example  // Set CalculateOnClosedBar = true !!\nif (Reversalbars()[0] == 1.0)\nPrint(\"The last bar is a long reversal bar.\");",
            "title": "ReversalBars"
        },
        {
            "location": "/indicators_oscillators/#r-squared",
            "text": "Description  This indicator belongs to the linear regression series. R-Squared is the correlation coefficient that specifies the quality of the linear regression line.  It is the calculation that gives R-Squared its name \u2013 the value is the square of the correlation coefficient, which in mathematics is prefixed with the Greek letter Rho (P).  See  Linear Regression ,  LinRegSlope ,  LinRegIntercept .  Interpretation  The value of the oscillator fluctuates between 0 and 1. By default, the upper boundary line is located at 0.75, and the lower border is at 0.2.\nIf the prices are in a sideways movement, the data is scattered around the regression line. R-Squared will have a value of 0 in the aforementioned situation.\nIn a strong trend phase, the prices will remain within a tight range for an extended period of time; if these are located close to the regression line then the R-Squared indicator will have a value of 1. Stanley Kroll and Tuchar Chande used the correlation coefficient as a trend filter in their book \u201c The new technical trader \u201d.  Further information  http://www.blastchart.com/Community/IndicatorGuide/Indicators/LinearRegressionRSquared.aspx  Usage  RSquared(int period)\nRSquared(IDataSeries inSeries, int period)\nRSquared(int period)[int barsAgo]\nRSquared(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  RSquared (8)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the value of R-Squared\nPrint(\"The current value of R-Squared is: \" + RSquared(8)[0]);",
            "title": "R-Squared"
        },
        {
            "location": "/indicators_oscillators/#standarddeviationstddev",
            "text": "Description  The Standard Deviation  (StdDev) is a tool used in statistics and probability calculation. It measures the dispersion of the values of a random variable around its median value. The Standard Deviation is used for the calculation of many indicators, such as, for example, the Bollinger Bands.  Interpretation  A lower standard deviation implies that the data points are located very close to their median value. The trading application assumes that prices will return to their median value.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Standard_Abweichung  Usage  StdDev (int period)\nStdDev (IDataSeries inSeries, int period)\nStdDev (int period)[int barsAgo]\nStdDev (IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  StdDev (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the StdDev\nPrint(\"The current value for the standard deviation is: \" + StdDev(14)[0]);",
            "title": "StandardDeviation(StdDev)"
        },
        {
            "location": "/indicators_oscillators/#standard-error-stderror",
            "text": "Description  Jon Anderson came up with the Standard Error Bands, which are similar to the Bollinger Bands, but with a different calculation. An upper and a lower boundary around a middle line create the bands \u2013 this is also known as the linear regression. The lower standard error band results from the subtraction of two standard errors from the final value of the regression line. Because individual closing prices can have a huge influence on the values of the bands, it is necessary to use a Simple Moving Average to smooth the data.  Interpretation  One of the applications of the standard error bands is the tightening of the bands when prices rise/fall. If the bands tighten, it signifies that a trend is currently in place. A strong trend will continue to tighten the bands.  Further information  http://www.forexrealm.com/technical-analysis/technical-indicators/standard-error-bands.html  Usage  StdError(int period)\nStdError(IDataSeries inSeries, int period)\nStdError(int period)[int barsAgo]\nStdError(IDataSeries inSeries, int period)[int barsAgo]\n\n//Upper band\nStdError(int period).Upper[int barsAgo]\nStdError(IDataSeries inSeries, int period).Upper[int barsAgo]\n\n//Lower band\nStdError(int period).Lower[int barsAgo]\nStdError(IDataSeries inSeries, int period).Lower[int barsAgo]  Return value  double  When using this method with an index (e.g.  StdError (21)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the values of the middle line\nPrint(\"The middle line is currently at: \" + StdError(21)[0]);\n\n//Output for the lower band\nPrint(\"The lower band of the standard error is currently at: \" + StdError(21).Lower[0]);\n\n//output for the upper band\nPrint(\"The upper band of the standard error is currently at: \" + StdError(21).Upper[0]);",
            "title": "Standard Error (StdError)"
        },
        {
            "location": "/indicators_oscillators/#stochastics",
            "text": "Description  The stochastic indicator was developed by George C. Lane in the 1950s. It belongs to the class \u201cmomentum indicators\u201d (oscillators) and represents the current closing price in relation to a high or low area over a defined number of periods.\nThe stochastic indicator is based on the observation that in an uptrend, the closing price is close to the daily high, while in a downtrend, the closing price is closer to the daily low.\nThe stochastic indicator consists of two exponential Average Lines (%K and %D), both of which range between 0 and 100.\nThere are two types of stochastic: the classic slow stochastic and the fast stochastic.  Fast stochastic: \nThe %D line is the smoothing average of the %K line  Slow stochastic: \nThe %D is the basis on which the smoothing average is calculated. The slow stochastic smoothes the fast stochastic, thus stabilizing the oscillator.  Interpretation  The closing prices found in the upper area imply an accumulation (buying pressure); the lower area represents selling pressure.\nThe stochastic indicator is a classic oscillator, and is primarily used in sideways markets in order to determine the reversal points. Days with a stable trend will not provide the indicator with any relevant or valuable results/information.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Stochastik  Usage  Stochastics(int periodD, int periodK, int smooth)\nStochastics(IDataSeries inSeries, int periodD, int periodK, int smooth)\n\n//For the %D line\nStochastics(int periodD, int periodK, int smooth).D[int barsAgo]\nStochastics(IDataSeries inSeries, int periodD, int periodK, int smooth).D[int barsAgo]\n\n//For the %K line\nStochastics(int periodD, int periodK, int smooth).K[int barsAgo]\nStochastics(IDataSeries inSeries, int periodD, int periodK, int smooth).K[int barsAgo]  Return value  double  When using this method with an index (e.g.  Stochastics (7,14,3)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  periodD Number of periods to be used for the %K smoothing  periodK Number of bars included in the %K calculation  smooth Number of periods for the smoothing of %D  Visualization   Example  //Output for the %K line\nPrint(\"The stochastic line %K is currently at: \" + Stochastics(3, 14, 7).K[0]);\n\n//Output for the %D line\nPrint(\"The stochastic line %D is currently at: \" + Stochastics(3, 14, 7).D[0]);",
            "title": "Stochastics"
        },
        {
            "location": "/indicators_oscillators/#stochastics-fast",
            "text": "Description  See  stochastics .  Interpretation  Closing prices that are constantly in the upper area indicate accumulation (i.e. buying pressure), whilst the distribution (i.e. selling pressure) is shown by an indicator value in the lower area.  Further information  VTAD:  http://vtadwiki.vtad.de/index.php/Stochastik  Charttec:  http://www.charttec.de/html/indikator_stochastics.php  Usage  StochasticsFast(int periodD, int periodK)\nStochasticsFast(IDataSeries inSeries, int periodD, int periodK)\n\n//For the %D line\nStochasticsFast(int periodD, int periodK).D[int barsAgo]\nStochasticsFast(IDataSeries inSeries, int periodD, int periodK).D[int barsAgo]\n\n//For the %K line\nStochasticsFast(int periodD, int periodK).K[int barsAgo]\nStochasticsFast(IDataSeries inSeries, int periodD, int periodK).K[int barsAgo]  Return value  double  When using this method with an index (e.g.  StochasticsFast (7,14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  periodD Number of periods for the smoothing of %K  periodK Number of periods included in the calculation of %K  Visualization   Example  //Output for the %K line of the fast stochastic\nPrint(\"The stochastic line %K is currently at: \" + StochasticsFast(3, 14).K[0]);\n\n//Output %D line\nPrint(\"The stochastic line %D is currently at: \" + StochasticsFast(3, 14).D[0]);",
            "title": "Stochastics Fast"
        },
        {
            "location": "/indicators_oscillators/#stochastics-rsi-stochrsi",
            "text": "Description  Stochastics RSI is a calculation of the stochastic based on the RSI indicator.  Interpretation  The indicator provides fast and precise extreme values/points in the price movements. The StochRSI can be used as a trend filter in higher timeframes as well as a tool for better entry timing.  Further information  http://www.investopedia.com/terms/s/stochrsi.asp#axzz263tizhIG  Usage  StochRSI(int period)\nStochRSI(IDataSeries inSeries, int period)\nStochRSI(int period)[int barsAgo]\nStochRSI(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  StochRSI (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the StochRSI\nPrint(\"The current value for the StochRSI is: \" + StochRSI(14)[0]);",
            "title": "Stochastics RSI (StochRSI)"
        },
        {
            "location": "/indicators_oscillators/#summation-sum",
            "text": "Description  Summation is the sum over a predefined number of periods.  Usage  SUM(int period)\nSUM(IDataSeries inSeries, int period)\nSUM(int period)[int barsAgo]\nSUM(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  SUM (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  // Sum of the volume for the last 10 trading days\nPrint(SUM(Volume,10)[0]);",
            "title": "Summation (SUM)"
        },
        {
            "location": "/indicators_oscillators/#supertrend",
            "text": "Description  The SuperTrend indicator was invented by a French trader. SuperTrend is similar to the Parabolic Stop and Reverse System (Parabolic SAR), and is based on the median values of the candles. It measures volatility as a span between high and low, not taking potential price gaps into account. The indicator, which originates from a starting value, continues to proceed in one direction until the market changes direction, combined with rising volatility. This causes the indicator to adjust its starting value to match that of the counter-direction. The indicator is programmed in such a way that nothing but the trend direction can bring about a change. Dropping volatility combined with movements against the trend direction cause the indicator to move horizontally.  Interpretation  There are multiple interpretations and applications for the SuperTrend. Forex traders prefer to trade the crosses directly. This way, the system will continuously be inside the market and only needs to be complemented by a stop and further trading logic settings.\nAnalytically speaking, the SuperTrend indicator is only able to provide information about the current trend. If the market is above the indicator, then an uptrend exists, otherwise a downtrend is in force.\nThe indicator can be used as an exit for additional trading systems, meaning that an open position can be closed if a trend change occurs.  Usage  SuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)\nSuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)[int barsAgo]\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth)[int barsAgo]\n\n//For the values of the uptrend:\nSuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).UpTrend[int barsAgo]\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).UpTrend[int barsAgo]\n\n//For the values of the downtrend:\nSuperTrend(SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).DownTrend[int barsAgo]\nSuperTrend(IDataSeries inSeries, SuperTrendMode stMode, int length, double multiplier, SuperTrendMAType maType, int smooth).DownTrend[int barsAgo]  Return value  double  When using this method with an index (e.g.  SuperTrend (...).UpTrend[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters           InSeries  Input data series for the indicator    maType  For the calculation of the MA, the following methods can be used:    SuperTrendMAType.HMA     SuperTrendMAType.SMA     SuperTrendMAType.SMMA     SuperTrendMAType.TEMA     SuperTrendMAType.TMA     SuperTrendMAType.VMA     SuperTrendMAType.VWMA     SuperTrendMAType.WMA      Also see:  HMA ,  SMA ,  SMMA ,  TEMA ,  TMA ,  VMA ,  VWMA ,  WMA .\nDefault:\n              HMA  |\n| multiplier | This is a multiplier for the internal calculation of the offset. This is only used when the method is set to ATR and DualThrust.\n(In the adaptive mode, the multiplier uses the Homodyne Discriminator)\nDefault: 2.618      |\n| Period     | Number of bars used for the calculation of the moving average\nDefault: 14    |\n| smooth     | Values for additional smoothing\nIf no smoothing is necessary, this value can be set to 1\nDefault: 14     |\n| stMode     | The following methods can be chosen:\nSuperTrendMode.ATR, SuperTrendMode.DualThrust,  SuperTrendMode.Adaptive\nThe Period Parameter will have a huge influence when the DualThrustMode is selected. The smaller the period, the tighter the indicator will follow price developments.\nDefault: SuperTrendMode.ATR     |  Visualization   Example  if (Close[0] > SuperTrend(SuperTrendMAType.HMA, SuperTrendMode.ATR, 14, 2.618, 14).UpTrend[0])\n  Print(\"The market is in an uptrend.\");\nif (Close[0] < SuperTrend(SuperTrendMAType.HMA, SuperTrendMode.ATR, 14, 2.618, 14).DownTrend[0])\n  Print(\"The market is in a downtrend.\");",
            "title": "SuperTrend"
        },
        {
            "location": "/indicators_oscillators/#supportresistanceareas",
            "text": "Description  This indicator draws support and resistance areas in the chart. There are 4 different types of possible supports and resistances, which are differentiated by various colors.  Support due to a lower high (ColorLowerHigh)  Support due to a lower low (ColorLowerLow)  Resistance due to a higher high (ColorHigherHigh)  Resistance due to a higher low (ColorHigherLow)  Interpretation  S/R zones play an important role in technical analysis. Clearly defined and identifiable support areas provide favorable entry opportunities, while resistance areas provide target zones to exit those trades.\nOnce broken, these areas tend to reverse their function, meaning that a broken support zone becomes a resistance zone.  http://finanzportal.wiwi.uni-saarland.de/tech/Kapitel5_4.htm  Parameters           ATRRangeFactor  Settings for the width of the support/resistance area as calculated by the ATR.    The smallest configurable value is 0.1; default is 0.3     Levels  This setting defines how many S/R zones of the same type are displayed. The default is 3    Opacity  Transparency of the bars to be drawn into the chart; 0 (transparent) \u2013 255 (completely visible).    Default is 70     SensibilityFactor  Defines the sensitivity of the S/R search.    The smallest setting is 1; the default is 5      Visualization",
            "title": "SupportResistanceAreas"
        },
        {
            "location": "/indicators_oscillators/#swing",
            "text": "Description  Based on the strength of the swing highs or the swing lows, the swing indicator draws a line at these points. The number of bars to the left and right of the extreme point is the determining factor for the strength. Methods for these indicators can also be implemented for other scripts.  Interpretation  The methods for these indicators can be used in scripts to determine the last extreme point and its corresponding price value. The highs and lows of these points may then be used as entry, stop or target markers.  Usage  //For a high\nSwing(int strength).SwingHighBar(int barsAgo, int instance, int lookBackPeriod)\nSwing(IDataSeries inSeries, int strength).SwingHighBar(int barsAgo, int instance, int lookBackPeriod)\n\n//For a low\nSwing(int strength).SwingLowBar(int barsAgo, int instance, int lookBackPeriod)\nSwing(IDataSeries inSeries, int strength).SwingLowBar(int barsAgo, int instance, int lookBackPeriod)  Return value  double  When using this method with an index (e.g.  Swing (5)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  When the current bar is smaller than the parameter strength, or if no swing high/low has been found, the return value is -1.  Parameters           barsAgo  Starting point for the search    InSeries  Input data series for the indicator    instance  The number of occurrences of extreme points (1 is the last occurrence, 2 is the second last occurrence etc.)    length  Number of bars included in the calculation    lookBackPeriod  Number of bars in the past in which swing points will be searched for (search area)    strength  Number of bars to the left and right of the extreme points     Visualization   Example  // Position and price of the last swing high\nint barsAgo = Swing(5).SwingHighBar(0, 1, 10);\nPrint(\"The last swing high was \" + barsAgo + \" bars ago.\");\nPrint(\"The last swing high was at \" + High[barsAgo]);",
            "title": "Swing"
        },
        {
            "location": "/indicators_oscillators/#time-series-forecast-tsf",
            "text": "Description  The Time-Series-Forecast is quite similar to a moving average. Here, the trend is established based on a regression equation that uses the smallest square formula. The goal of the TSF is to anticipate future price movements with the help of currently existing data.  Interpretation  The TSF reacts faster than the moving averages. These always have time delays when depicting the pre-existing trends. The TSF formula never allows the distance to the current price to become too large, thus permitting sharper trade reversal recognition.  An entry is placed when the price breaks the TSF line from bottom to top.  Further information  http://en.wikipedia.org/wiki/Time_series  Usage  TSF(int forecast, int period)\nTSF(IDataSeries inSeries, int forecast, int period)\nTSF(int forecast, int period)[int barsAgo]\nTSF(IDataSeries inSeries, int forecast, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  TSF (3,14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  forecast Number of bars used for the forecast  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output the TSF values\nPrint(\"The current value for the TSF is: \" + TSF(3, 14)[0]);",
            "title": "Time-Series-Forecast (TSF)"
        },
        {
            "location": "/indicators_oscillators/#tools",
            "text": "",
            "title": "Tools"
        },
        {
            "location": "/indicators_oscillators/#constant-lines",
            "text": "Description  The Constant Lines tool can draw a maximum of four freely configurable horizontal lines within a chart. In general, it is used to label certain price levels in order to keep an eye on them.  Usage  ConstantLines(double line1Value, double line2Value, double line3Value, double line4Value)\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value)[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line1[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line2[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line3[barsAgo]\nConstantLines(double line1Value, double line2Value, double line3Value, double line4Value).Line4[barsAgo]  Return value  double  When using this method with an index (e.g.  ConstantLines (1,2,3,4)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Visualization",
            "title": "Constant Lines"
        },
        {
            "location": "/indicators_oscillators/#currentdayohl",
            "text": "Description  This function delivers the values for the open, high and low of the current day i.e. session.  CurrentDayOHL is intended for use with intraday data series.  See  PriorDayOHLC ,  DayLines .  Parameter  inSeries Input data series for the indicator  Return value  double  When using this method with an index (e.g.  CurrentDayOHL .CurrentOpen(...)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Usage  CurrentDayOHL()\nCurrentDayOHL(IDataSeries inSeries)\n\n//For the open value\nCurrentDayOHL().CurrentOpen[int barsAgo]\nCurrentDayOHL(IDataSeries inSeries).CurrentOpen[int barsAgo]\n\n//For the high value\nCurrentDayOHL().CurrentHigh[int barsAgo]\nCurrentDayOHL(IDataSeries inSeries).CurrentHigh[int barsAgo]\n\n//For the low value\nCurrentDayOHL().CurrentLow[int barsAgo]\nCurrentDayOHL(IDataSeries inSeries).CurrentLow[int barsAgo]  Visualization   Example  Print(\"The low of the current session is at \" + CurrentDayOHL().CurrentLow[0]);",
            "title": "CurrentDayOHL"
        },
        {
            "location": "/indicators_oscillators/#daily-performance",
            "text": "Description  This indicator delivers information concerning the changes in the price movements based on either a past close or a current-day open in comparison to the current price level.  The Daily Performance can be displayed in points, ticks, percent, or a currency value.  Colors and other settings can be freely adjusted.  See  Momentum ,  ROC .  Regarding usage with a scanner: \nTo get a list of your favorite stocks and their daily percentual changes, please set CalculateOnClosedBar to \u201cFalse\u201d, TimeFrame to \u201c1 Day\u201d, Calculation mode to \u201cPercent\u201d and Days ago to \u201c0\u201d.   The result will look similar to this:   Usage  DailyPerformance(DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)\nDailyPerformance(IDataSeries inSeries,DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)\nDailyPerformance(DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)[int barsAgo]\nDailyPerformance(IDataSeries inSeries,DailyPerformanceReference reference, DailyPerformanceCalculationMode mode, int daysAgo)[int barsAgo]  Return value  double  When using this method with an index (e.g.  DailyPerformance (...)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  reference Possible values are:\n-   DailyPerformanceReference.Open\n-   DailyPerformanceReference.PreviousClose  mode Possible values are:\n-   DailyPerformanceCalculationMode.Points\n-   DailyPerformanceCalculationMode.Ticks\n-   DailyPerformanceCalculationMode.Percent\n-   DailyPerformanceCalculationMode.Currency  daysAgo Number of days in the past  Visualization   Example  //How many ticks are between today\u2019s open and the current price?\nDailyPerformance(DailyPerformanceReference.Open, DailyPerformanceCalculationMode.Ticks, 1)[0]\n\n//By how much percent did the stock rise/fall since the last closing price?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Percent, 1)[0]\n\n//By how many points/ticks did the future deviate from the start of the trading week to the current value?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Points, 3)[0]\n\n//How many EURO/USD does the performance equal?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Currency, 3)[0]\n\n//How big is the overnight gap in comparison to the opening price?\nDailyPerformance(DailyPerformanceReference.PreviousClose, DailyPerformanceCalculationMode.Points, 1)[0]",
            "title": "Daily Performance"
        },
        {
            "location": "/indicators_oscillators/#dailyquotemoves",
            "text": "Description  This indicator shows the daily price moves of the current market, starting at the zero line each day.\nWith this indicator you can see if the Market is currently over/under water based on the perspective of the market open.\ne.g. the FDAX has the character that after reaching the 100, 200, 400 level, the market has a potential to turn.  Works only with intraday charts!  Usage  DailyQuoteMoves()\nDailyQuoteMoves(IDataSeries inSeries)\nDailyQuoteMoves()[int barsAgo]\nDailyQuoteMoves(IDataSeries inSeries) [int barsAgo]  Return value  double  When using this method with an index (e.g.  DailyQuoteMoves (...)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  Visualization   Example  //How many ticks are in between closing price of current bar and opening price of the current day? If this bar is the first of the day, the difference will be shown Open-Close of the bar\nDailyQuoteMoves()[0]",
            "title": "DailyQuoteMoves"
        },
        {
            "location": "/indicators_oscillators/#daylines",
            "text": "Description  The DayLines indicator draws lines for the previous day\u2019s high, low, and close. It also draws a line for the current day\u2019s open. These lines often show a reaction to the market.\nEach line can be turned on or off, and the colors and line strengths can be freely set.  See  CurrentDayOHL ,  PriorDayOHLC .  Visualization",
            "title": "DayLines"
        },
        {
            "location": "/indicators_oscillators/#daylinesadv",
            "text": "Description  DayLinesAdv draws horizontal lines for the previous day\u2019s high, low, and close, as well as the current day\u2019s open.  CurrentDayOHL ,  PriorDayOHLC .  DaysBack parameter  The DaysBack parameter sets the number of days in the past for which the lines are to be placed onto the chart.  Include Weekends parameter \nThis parameter manages the interaction with weekend price data. If IncludeWeekends = true, the price data for a trading session resulting from the weekend data is added to the last trading session.  This is generally applicable to traders in different time zones. For example, a trader located in Germany will receive EURUSD data that beginning on Sunday evenings in America.\nTo add the couple of hours that are transcribed on Sunday to the previous Friday\u2019s session, you simply need to set IncludeWeekends = true.\nThe first picture shows IncludeWeekends = false:   The second picture shows IncludeWeekends = true:   Show Prices parameter \nIf set to \u201ctrue\u201d, prices are displayed in addition to the line itself.   Extend high lines and Extend low lines parameters. \nIf set to \u201ctrue\u201d, the highs and lows that have not yet been \u201ebreached\u201c by the price will be extended onto the right-hand side of the chart using dotted lines.",
            "title": "DayLinesAdv"
        },
        {
            "location": "/indicators_oscillators/#getdaybar",
            "text": "Description  The function GetDayBar() outputs all values (open, high, low, close, time, median, typical, volume, and weighted) for a specified past or current day i.e. session. GetDayBar() is not intended to be used inside the chart. For this purpose, DayLinesAdv should be used instead. GetDayBar is mainly used as a high-performance replacement for  PriorDayOHLC .  Several data feed providers also offer historical data, in which case we recommend that you use GetDayBar. If it is intraday data that is offered, it still works adequately to use  PriorDayOHLC .  If the outputted data varies, the main cause is normally assumed to be the difference between Session Begin and Session End.  Parameters  daysAgo Number of days in the past\n(0 for the current value)  Return value  DateTime for time\ndouble for all other values  For  daysAgo = 0,  the following applies:\nClose = current price (for CalculateOnClosedBar = false)\nTime = time of the current day\u2019s open\nAll other values are calculated using intraday data.  Usage  GetDayBar (int daysAgo)  Example  [TimeFrameRequirements(\"1 day\")]\npublic class xy : UserIndicator\n{\n  int daysAgo = 5;\n  double historicalClose = Instrument.Round2TickSize(GetDayBar(daysAgo).Close);\n}\n\nprotected override void OnStart()\n{\n  Print(\"The closing price from \" + daysAgo + \" days ago was at \" + historicalClose);\n}  Important: \nThe attribute  TimeFrameRequirements  must also always be used for the class doing the calling up (in the above example, class xy) if the indicator uses  Multibars .",
            "title": "GetDayBar"
        },
        {
            "location": "/indicators_oscillators/#info",
            "text": "Description  Info is not an indicator in the classic sense of the word, but is actually more similar to a tool. Depending on the underlying instrument, the background of the chart may show additional information.  Visualization",
            "title": "Info"
        },
        {
            "location": "/indicators_oscillators/#maximum-max",
            "text": "Description  Max (MAX) delivers the highest value for a predefined number of periods.  Usage  MAX(int period)\nMAX (IDataSeries inSeries, int period)\nMAX (int period)[int barsAgo]\nMAX (IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  MAX (Close, 10)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  // Output of the highest value of the last 20 periods\n// The output is identical to high [GetSerieHighestValue(High,20)]\nPrint(\"The highest value of the last 20 periods is \" + MAX(High, 20)[0]);",
            "title": "Maximum (MAX)"
        },
        {
            "location": "/indicators_oscillators/#minimum-min",
            "text": "Description  Minimum (MIN) outputs the lowest value for a predefined number of periods.  Usage  MIN (int period)\nMIN (IDataSeries inSeries, int period)\nMIN (int period)[int barsAgo]\nMIN (IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  MIN (Close, 10)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  // Outputs the lowest value for the last 20 periods\nPrint(\"The lowest value of the last 20 periods is \" + MIN(Low, 20)[0]);",
            "title": "Minimum (MIN)"
        },
        {
            "location": "/indicators_oscillators/#mtfboxes",
            "text": "Description  What MTFBoxes does is to draw a colored area behind the bars that signify a candle from a higher timeframe. This therefore makes it possible to depict an hourly candle inside a 5-minute chart. The area would contain all 5-minute bars that are located within said hourly candle.  The area turns greener if the candle of the higher timeframe is rising. A Doji would be shown in grey.  Parameters  TimeFrame Timeframe of the \u201cvirtual\u201d candle (second, minute, hour, day, week, month)\nTimeFrameValue Value of the timeframe (number)  Visualization",
            "title": "MTFBoxes"
        },
        {
            "location": "/indicators_oscillators/#priceline",
            "text": "Description  PriceLine is not so much an indicator, but more of a tool.\nIt places a horizontal line on top of the current market price within the chart.\nThe colors and line widths are freely configurable.  Visualization",
            "title": "PriceLine"
        },
        {
            "location": "/indicators_oscillators/#priordayohlc",
            "text": "Description  PriorDayOHLC shows the values for yesterday\u2019s (i.e. the previous session\u2019s) open, high, low, and close. PriorDayOHLC works best when used together with the intraday data series.  PriorDayOHLCext \nPriorDayOHLCext For people in different time zones, PriorDayOHLCext makes it possible to set the IncludeWeekend parameter to \u201ctrue\u201d, which is helpful because all data originating from a Saturday or Sunday is treated as if it comes from the previous Friday\u2019s session.  See  CurrentDayOHL ,  DayLines .  Parameter  inSeries Input data series for the indicator  Return value  double  When using this method with an index (e.g.  PriorDayOHLC ().PriorHigh[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Usage  PriorDayOHLC()\nPriorDayOHLC(IDataSeries inSeries)\n\n//For the value of open\nPriorDayOHLC().PriorOpen[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorOpen[int barsAgo]\n\n//For the value of high\nPriorDayOHLC().PriorHigh[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorHigh[int barsAgo]\n\n//For the value of low\nPriorDayOHLC().PriorLow[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorLow[int barsAgo]\n\n//For the value of close\nPriorDayOHLC().PriorClose[int barsAgo]\nPriorDayOHLC(IDataSeries inSeries).PriorClose[int barsAgo]  Visualization   Example  // Value from the previous trading day\nPrint(\"Yesterday\u2019s open was \" + PriorDayOHLC().PriorOpen[0]);\nPrint(\"Yesterday\u2019s high was \" + PriorDayOHLC().PriorHigh[0]);\nPrint(\"Yesterday\u2019s low was \" + PriorDayOHLC().PriorLow[0]);\nPrint(\"Yesterday\u2019s close was \" + PriorDayOHLC().PriorClose[0]);",
            "title": "PriorDayOHLC"
        },
        {
            "location": "/indicators_oscillators/#priordayohlcext",
            "text": "See  PriorDayOHLC .",
            "title": "PriorDayOHLCext"
        },
        {
            "location": "/indicators_oscillators/#sessionbreaklines",
            "text": "Description  The indicator SessionBreakLines draws a vertical line at the first candle of a new trading session.\nWhat is special about this indicator is that you can manually set how the so-called \u201cweekend sessions\u201d should be handled. If the parameter IncludeWeekends is set to \u201ctrue\u201d, then the Sunday sessions will be added to the Friday\u2019s session.\nSee  PriorDayOHLC .  Visualization",
            "title": "SessionBreakLines"
        },
        {
            "location": "/indicators_oscillators/#showbidask",
            "text": "Description  The ShowBidAsk indicator displays the current bid and ask prices as well as the corresponding volume within the lower part of the chart. It also shows changes in volume even if a trade has not occurred.  Visualization",
            "title": "ShowBidAsk"
        },
        {
            "location": "/indicators_oscillators/#tickcounter",
            "text": "Description  TickCounter provides information regarding the current number of ticks that are contained within the bar. The indicator can not only count starting from 0, but can also be set to count from a specified number down to 0. TickCounter can display the value either as absolute or as a percentage. It only works with candle charts in which the bars are established based on a fixed number of ticks.  When programming your own scripts, please use Bars, TicksCountForLastBar or Bars, LastBarCompleteness.  Visualization",
            "title": "TickCounter"
        },
        {
            "location": "/indicators_oscillators/#true-strength-index-tsi",
            "text": "Description  The True Strength Index (TSI) is a momentum indicator. It is used as an indicator for trend direction and for displaying overbought or oversold conditions.\nAs a rule, momentum oscillators preemptively indicate price changes, whereas moving averages generally lag behind the price. The TSI brings together the advantages of these two indicator groups.  Interpretation  The TSI line moves between 100 and -100. Most values are between +25 and -25. These trigger lines can be used to anticipate overbought or oversold situations. A rising TSI signals an uptrend, while falling TSI suggests a downtrend.  Further information  http://en.wikipedia.org/wiki/True_strength_index  Usage  TSI(int fast, int slow)\nTSI(IDataSeries inSeries, int fast, int slow)\nTSI(int fast, int slow)[int barsAgo]\nTSI(IDataSeries inSeries, int fast, int slow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  TSI (3,14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  fast Number of bars included in the calculation of the fast EMA  slow Number of bars included in the calculation of the slow EMA  Visualization   Example  //Output of the current value for the True Strength Index (TSI)\nPrint(\"The current value for the TSI is \" + TSI(3, 14)[0]);",
            "title": "True Strength Index (TSI)"
        },
        {
            "location": "/indicators_oscillators/#ultimate-oscillator",
            "text": "Description  Larry Williams developed the Ultimate Oscillator, which was first published in 1985. The Ultimate Oscillator is calculated by means of taking the weighted sum of three oscillators in different timeframes. These three timeframes are the short-term, middle and long-term market cycles. The typical period lengths used are 7, 14 and 28, and the value of the indicator moves between 0 and 100. Values above 70 signify an overbought situation, and values below 30 show that it is oversold.  Interpretation  Williams defined the following criteria for a buy signal:  A bullish divergence between price and oscillator can be observed, meaning that the market makes a new low but the oscillator remains unchanged.  While this divergence is forming, the oscillator falls below 30.  The oscillator will then resume its upward move towards the high at which it peaked before the divergence began forming.  The buy signal is created when the price breaches that last high.  The long position is closed if the oscillator rises above 70 or if the oscillator rises above 50 and then falls back below 45.\nA sell signal consists of bearish divergences forming above 70. These positions are closed once the 30 level marker is breached.  Usage  UltimateOscillator(int fast, int intermediate, int slow)\nUltimateOscillator(IDataSeries inSeries, int fast, int intermediate, int slow)\nUltimateOscillator(int fast, int intermediate, int slow)[int barsAgo]\nUltimateOscillator(IDataSeries inSeries, int fast, int intermediate, int slow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  UltimateOscillator  (5)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters           inSeries  Input data series for the indicator    fast  Number of bars for the calculation of the short-term oscillator    intermediate  Number of bars for the calculation of the intermediate oscillator    slow  Number of bars for the calculation of the slow indicator     Visualization   Example  // Output of the values for the UltimateOscillator with settings of 7,14,28\nPrint(\"The current value for the Ultimate Oscillator is \" + UltimateOscillator(7, 14, 28)[0]);",
            "title": "Ultimate Oscillator"
        },
        {
            "location": "/indicators_oscillators/#volume-vol",
            "text": "Description  This is the volume for the shares, futures, ETFs and so on that are traded within a specified time period.  Further information  http://de.wikipedia.org/wiki/Volumenanalyse  Usage  VOL()\nVOL(IDataSeries inSeries)\nVOL()[int barsAgo]\nVOL(IDataSeries inSeries)[int barsAgo]  Return value  double  When using this method with an index (e.g.  VOL ()[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameter  inSeries Input data series for the indicator  Visualization   Example  //Output of the current volume\nPrint(\"The current volume is \" + VOL()[0]);",
            "title": "Volume (VOL)"
        },
        {
            "location": "/indicators_oscillators/#volume-moving-average-volma",
            "text": "Description  The VOLMA calculation is carried out by applying an exponential moving average to the respective volume of each period, that is to say its EMA (volume).  Caution: \nIn trading literature, the Volume Moving Average is often confused with the abbreviation for the Variable Moving Average (VMA).  Interpretation  The VOLMA indicator helps you to find and assess the relative volume of a period.  Some simple guidelines should be followed:  The volume should be above the VOLMA at a break  After a volume spike (high), an exhaustion phase will kick in. The exhaustion can lead to a complete reversal of the price movement. Generally speaking, however, this is simply a resting phase  After three successive volume spikes, it becomes much less likely that the situation will continue in the same direction  Here, you can find more general information about  Moving Averages .  Further information  Volumen-Analyse.de:  http://www.volumen-analyse.de  Usage  VOLMA(int period)\nVOLMA(IDataSeries inSeries, int period)\nVOLMA(int period)[int barsAgo]\nVOLMA(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  VOLMA (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  //Output for the value of the Volume Moving Average (VOLMA)\nPrint(\"The current VOLMA value is \" + VOLMA(14)[0]);",
            "title": "Volume Moving Average (VOLMA)"
        },
        {
            "location": "/indicators_oscillators/#volume-oscillator",
            "text": "Description  The Volume Oscillator makes use of the difference between the moving averages based on the trading volume, with a similar result to the MACD or to any other oscillator in which moving averages are used for calculation.  Interpretation  The Volume Oscillator is used to determine the trend strength. If developments in the price of the share are accompanied by disproportionate volume oscillator values, this should be regarded as highly relevant. In this way, the indicator can be used to filter out false signals.\nValues above zero mean that the shortest moving average of the volume is above the long-term moving average. IsSerieRising prices with a higher short-term volume indicate a bullish scenario.  Usage  VolumeOscillator(int fast, int slow)\nVolumeOscillator(IDataSeries inSeries, int fast, int slow)\nVolumeOscillator(int fast, int slow)[int barsAgo]\nVolumeOscillator(IDataSeries inSeries, int fast, int slow)[int barsAgo]  Return value  double  When using this method with an index (e.g.  VolumeOszillator (12,26)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  fast Number of bars for the calculation of the fast moving average  slow Number of bars for the calculation of the slow moving average  Visualization   Example  //Output of the current value for the Volume Oscillator\nPrint(\"The current value for the Volume Oscillator is: \" + VolumeOszillator(12,26)[0]);",
            "title": "Volume Oscillator"
        },
        {
            "location": "/indicators_oscillators/#volume-profile",
            "text": "Description  The VolumeProfile indicator displays the real-time volume profile as a vertical histogram on the chart. In this histogram, every bar depicts the cumulative traded volume for a certain price level. The starting bar for the calculations is labeled with a \u201c#\u201d.\nThese bars inside the histogram have various colors: green indicates executions at or above the ask, which are interpreted as buys. Red means trades at or below the bid, which are interpreted as sells. Grey signifies neutral executions.\nIt is important to note that the Volume Profile indicator only works together with a real-time data feed. After changes have been made in the properties window, the indicator is restarted and all values that have been calculated up to this point are lost.  See:  VolumeZones  Interpretation  Prices with especially high trading volume will have a more satiated accumulation and distribution at their respective levels. This leads to price resistance/support zones being formed.  Visualization",
            "title": "Volume Profile"
        },
        {
            "location": "/indicators_oscillators/#volume-rate-of-change-vroc",
            "text": "Description  The Volume Rate of Change (VROC) is almost exactly the same as the ROC indicator, with the exception that instead of price data, volume data (VOL) is used. A smoothing component is also applied.  Further information  http://www.shareholder24.de/boersensoftware-wiki/pages/viewpage.action?pageId=9207904  Usage  VROC(int period, int smooth)\nVROC(IDataSeries inSeries, int period, int smooth)\nVROC(int period, int smooth)[int barsAgo]\nVROC(IDataSeries inSeries, int period, int smooth)[int barsAgo]  Return value  double  When using this method with an index (e.g.  VROC (14,3)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  smooth Number of Bars included in the calculation for the smoothing  Visualization   Example  //Output of the current value for the Volume ROC\nPrint(\"The current value for the Volume ROC is: \" + VROC(14, 3)[0]);",
            "title": "Volume Rate of Change (VROC)"
        },
        {
            "location": "/indicators_oscillators/#volumearea",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  Similarly, with this indicator you can also have your own volume profiles displayed. Here you can now determine the start and end time completely freely by clicking on your desired position. There are no restrictions as to where the calculation should start and end. In the upper right corner you have the setting options with which you can switch between the profile types (for a description of these, read more under VolumeSessionPro). With a click on the little red \u201c+\u201d under the profile settings, you can add a further volume profile to your chart; you do so by once again determining the start and end time by left-clicking.\n The settings and the display of the indicator are exactly equivalent to the VolumeSessionPro: via ProfileType you select which calculation method should be used; via ValueArea you determine the percentage for what portion of the volume area should be colored with the highest activity. \nThe most effective way of working with the VolumeArea is to place this indicator in the action bar and assign it a hot key. In this way, if necessary, the indicator can be quickly called up and you can specify the desired volume area.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeArea"
        },
        {
            "location": "/indicators_oscillators/#volumegraph",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator contains a normal volume histogram, but here, the coloring takes place based on price trends. The VolumeGraph determines short- or long-term price trends; you can set the sensitivity for this using the parameter \u201cSlopeLength\u201d. A high value delivers long-term trends; low values represent short-term price trends. Using the setting \u201cExponential\u201d, you can select whether the calculation for trend determination should be based on an exponential (=True) or linear (=False) algorithm. This is about the fine-tuning, and no large changes should be expected with this parameter. In addition, the volume histogram also contains a moving average, for which you can enter the period using the parameter \u201cAvgLength\u201d.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeGraph"
        },
        {
            "location": "/indicators_oscillators/#volumekeltnerchannels",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The VolumeKeltnerChannels are a great tool to determine very high or very low volume in comparison to past periods. Beginning with an upper Keltner channel line calculated with volume data, this line is shifted ever further upwards or downwards using special multipliers. Volume that is higher than the highest Keltner channel line can be interpreted as extremely high volume that shows that huge numbers of trades have been carried out in the current price period and that an unusually large number of traders are buying or selling positions at the current price level.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeKeltnerChannels"
        },
        {
            "location": "/indicators_oscillators/#volumerisefall",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The VolumeRiseFall indicator is a normal volume display as volume bars, with, however, a different coloring than normal. A volume bar is drawn in green when the volume of this bar is higher than the volume of the previous bar, meaning that rising volume is present. A volume bar is drawn in gray when the volume of this bar is lower than the volume of the previous bar, thereby showing falling volume.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeRiseFall"
        },
        {
            "location": "/indicators_oscillators/#volumesentimentlong",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator detects bullish volume activity based on the analysis of the volume of a period, the price span of a bar and the close of the bar (=VolumeSpreadAnalysis).   It screens for 3 signals (listed are the sub-criteria that must be met for the respective signal):    SellingClimax (dark green)\n 6.11..1. Lowest low since 50 periods \n 6.11..2. Bar with large range \n 6.11..3. Extremely high volume     DemandComingIn (lime green) \n 6.11..1. UpBar (current close larger than previous close) \n 6.11..2. Previous Bar: DownBar (close smaller than previous close) \n 6.11..3. Previous Bar: Bar with large range \n 6.11..4. Previous Bar: Above-average high volume    BagHolding (light green) \n 6.11..1. Lowest low since 50 periods \n 6.11..2. DownBar \n 6.11..3. Bar with small range \n 6.11..4. Above-average high volume \n 6.11..5. Close larger than or equal to the middle of the bar    The VolumeSentiments provide the foundation for the calculation of the volume condition; see point 5. When a bullish VolumeSentiment occurs, the bar is colored in the respective color of the signal; you can change this color in the parameter setting  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeSentimentLong"
        },
        {
            "location": "/indicators_oscillators/#volumesentimentshort",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator is the counterpart to the VolumeSentimentLong and detects bearish volume activity based on the analysis of the volume of a period, the price span of a bar and the close of the bar (=VolumeSpreadAnalysis).   It screens for 3 signals (listed are the sub-criteria that must be met for the respective signal):    BuyingClimax (dark red) \n 6.12..1. Highest high since 50 periods \n 6.12..2. Bar with large range \n 6.12..3. Extremely high volume     SupplyComingIn (red) \n 6.12..1. DownBar \n 6.12..2. Previous Bar: UpBar \n 6.12..3. Previous Bar: Bar with large range \n 6.12..4.Previous Bar: Above-average high volume    EndOfRisingMarket (coral) \n 6.12..1. Highest high since 50 periods \n 6.12..2. UpBar \n 6.12..3. Bar with small range \n 6.12..4.Above-average high volume \n 6.12..5.Close smaller than or equal the middle of the bar    The VolumeSentiments provide the foundation for the calculation of the volume conditions; see point 5. When a bearish VolumeSentiment occurs, the bar is colored in the respective color of the signal; you can change this color in the parameter settings.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeSentimentShort"
        },
        {
            "location": "/indicators_oscillators/#volumesessionpro",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  This indicator is equivalent to the well-known VolumeProfile indicator with a display for a specific time span (session). You can determine the start time and the length of a session however you wish. For each session, the VolumeProfile is then shown. Use this indicator only in timeframes smaller than 1 day; the smaller the timeframe selected, the more detailed the display of the VolumeProfile. The price at which the most volume was traded in the respective session is shown as a red bar. The price area in which, for example, 70% of the trading activity for the respective session took place, is colored light blue. You can determine this percentage yourself as you wish under the parameter \u201cValueArea\u201d. Furthermore, you have four different options for displaying the volume information:  Furthermore, you have four different options for displaying the volume information:   4.1.1. VOC (Volume on close):  Loads the entire volume of a bar at the closing price of this bar \u2013 e.g. if a 5-minute bar has a volume of 280 and a range of 1.5 points with a closing price at 1534.25, all 280 volume units are counted at the closing price of 1534.24.  4.1.2. TPO (Time price opportunity):  This method does not take the actual traded volume into account, but instead counts an individual volume unit for each price in the traded range of the bar \u2013 e.g. if a 5-minute bar has its high at 1534 and its low at 1532.5, then one volume unit is counted for each of the following prices: 1532.50, 1532.75, 1533.0, 1533.25, 1533.50, 1533.75, and 1534.   4.1.3. VWTPO (Volume weighted time price opportunity):  This version distributes the traded volume of a bar across its price range \u2013 e.g. if a 5-minute bar exhibits a volume of 280 with a range of 1.5 points, with its high at 1534 and low at 1532.5, then 40 volume units (=280/7) are added to each of the seven prices in this range: 1532.50, 1532.75, 1533.0, 1533.25, 1533.50, 1533.75, and 1534.  4.1.4. VTPO (Volume time price opportunity):  Here, the traded volume is added to each price of the range \u2013 e.g. if a 5-minute bar has 280 volume units, a range of 1.5 points with a high at 1534 and low at 1532.5, then 280 volume units are added to each of the seven prices of the range:: 1532.50, 1532.75, 1533.0, 1533.25, 1533.50, 1533.75, and 1534.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeSessionPro"
        },
        {
            "location": "/indicators_oscillators/#volumetickspeed",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  ATTENTION!  You can only use this indicator in the tick chart! The indicator measures the number of ticks that are traded during a number of seconds defined by the user. You can set the number of seconds under the parameter \u201cPeriod\u201d. A high tick speed can, therefore, be equated with high trading intensity, which can in turn often be observed at turning points in the market. With the parameter \u201cLimitValue\u201d, you can specify from which number of ticks during the selected period the background should be colored in order to display extreme values.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeTickSpeed"
        },
        {
            "location": "/indicators_oscillators/#volumeudr",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The VolumeUpDownRatio is the relationship between UpVolume and DownVolume, displayed as an oscillator. Volume is classified as UpVolume when the current close of the price candle is located above the close of the prior candle; the opposite applies for DownVolume. Values above 80 are to be graded as a bearish signal; values under 20 as a bullish signal. Besides this, a moving average can be shown, which can serve as an additional signal generator.     Using \u201cDrawCandleOutline\u201d, you can have the border of your candles colored accordingly when bullish/bearish extreme values occur.    PriceWeightChange regulates whether you would like to have the weighted change of the market price flow into the calculation of the indicator.    Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeUDR"
        },
        {
            "location": "/indicators_oscillators/#volumeupdown",
            "text": "Description  This indicator is a variation of the volume indicator, with the slight difference that the volume bars are shown in different colors depending on whether the price movement forms an up or down bar. An up (rising) bar shows the volume in green, while a down (falling) bar shows the volume in red. A Doji, where open = close, shows the volume in blue.  Usage  VolumeUpDown()\nVolumeUpDown(IDataSeries inSeries)\nVolumeUpDown()[int barsAgo]\nVolumeUpDown(IDataSeries inSeries)[int barsAgo]  Return value  double  When using this method with an index (e.g.  VolumeUpDown ()[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameter  inSeries Input data series for the indicator  Visualization   Example  //Output of the current volume\nPrint(\"The current volume is \" + VolumeUpDown()[0]);",
            "title": "VolumeUpDown"
        },
        {
            "location": "/indicators_oscillators/#volume-zones",
            "text": "Description  This indicator draws a histogram on the left side of the chart. This histogram contains the historical volume, and inside the histogram, the length of the bars shows the cumulative volume. Traders can configure the price series (open, high, low etc.) with the help of the properties dialog box.\nAn up bar (where the close is above the open) shows the bar in green, and falling bars are displayed in red. The indicator is only designed to be used with historical data. In order to view volume changes in real-time, it is wise to consider using the VolumeProfile.",
            "title": "Volume Zones"
        },
        {
            "location": "/indicators_oscillators/#volumezoneoscillator",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The VolumeZoneOscillator divides the volume activity into UpVolume and DownVolume, similarly to the VolumeUDR. Volume is ranked as UpVolume when the current closing price is located above the prior closing price; vice versa for DownVolume. The oscillator calculated hereby outputs relative percentage values. An instrument is in a positive trend when the VolumeZoneOscillator rises above a level of 5% and vice versa in a negative trend, when it falls below -5%. Values above 40% show overbought situations, while values above 60% are an indication for an extreme exaggeration in the market. On the other hand, values smaller than -40% are deemed oversold and values smaller than -60% to be classified as enormously oversold and exaggerated.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "VolumeZoneOscillator"
        },
        {
            "location": "/indicators_oscillators/#williams-r",
            "text": "Description  Larry Williams developed the Williams %R. It is a momentum indicator, and is the inverse of the Fast Stochastic Oscillator. Williams %R, which is also called simply %R, reflects the level of the close relative to the highest high for the look-back period. The Stochastic Oscillator, on the other hand, reflects the level of the close relative to the lowest low. %R multiplies the raw value by -100 as a means of correcting for the inversion. This means that the Fast Stochastic Oscillator and Williams %R actually produce the exact same lines, with different scaling. The Williams %R fluctuates between 0 and -100. Values between 0 to -20 are deemed overbought, and values from -80 to -100 are seen as oversold. Naturally, signals taken from the Stochastic Oscillator can also be applied to Williams %R.  Interpretation  As with the Stochastic Oscillator, Williams %R reflects the level of the close relative to the high-low range over a given period of time. Assume that the highest high equals 110, the lowest low equals 100 and the close equals 108. The high-low range is 10 (110 - 100), which is the denominator in the %R formula. The highest high less the close equals 2 (110 - 108), which is the numerator. 2 divided by 10 equals 0.20. Multiply this number by -100 to get -20 for %R. Williams %R would equal -30 if the close was 103 (0.30 x -100).  The centerline, -50, is an important level to watch. Williams %R moves between 0 and -100, which makes -50 the midpoint. Think of it as the 50 yard line in football. The offense has a higher chance of scoring when it crosses the 50 yard line. The defense has an edge as long as it prevents the offense from crossing the 50 yard line. A Williams %R cross above -50 signals that prices are trading in the upper half of their high-low range for the given look-back period. This suggests that the cup is half full. Conversely, a cross below -50 means prices are trading in the bottom half of the given look-back period. This suggests that the cup is half empty.  Low readings (below -80) indicate that the price is near its low for the given time period. High readings (above -20) indicate that the price is near its high for the given time period.  Further information  http://www.broker-test.de/finanzwissen/technische-analyse/williams-percent-r/  Usage  WilliamsR(int period)\nWilliamsR(IDataSeries inSeries, int period)\nWilliamsR(int period)[int barsAgo]\nWilliamsR(IDataSeries inSeries, int period)[int barsAgo]  Return value  double  When using this method with an index (e.g.  WilliamsR (14)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  Parameters  inSeries Input data series for the indicator  period Number of bars included in the calculations  Visualization   Example  WilliamsR(int period)\nWilliamsR(IDataSeries inSeries, int period)\nWilliamsR(int period)[int barsAgo]\nWilliamsR(IDataSeries inSeries, int period)[int barsAgo]",
            "title": "Williams %R"
        },
        {
            "location": "/indicators_oscillators/#wyckoffwave",
            "text": "The installation of the Technical Analysis Package is required in order to access this indicator.  Description  The WyckoffWave indicator adds the volume for each following bar until a price wave is over / finished. You can set the sensitivity of the price waves. When the  volume of a wave rises to particularly high values, is it very often because a turning point in the chart has been reached. When the volume bars are colored red, we are dealing with a short wave; green volume bars indicate a long wave.   Using the parameter \u201cMedianPeriod\u201d you can select how sensitively the indicator should determine the individual price waves. The smaller the value, the larger the price waves that the indicator calculates.   The parameter Poles serves to fine-tune the display of the volume waves; you can select a parameter between 1-4. Changing this value usually causes only imperceptible changes.  Parameters  to be announced  Return value  to be announced  Usage  to be announced  Visualization   Example  to be announced",
            "title": "WyckoffWave"
        },
        {
            "location": "/indicators_oscillators/#zigzag",
            "text": "Description  The ZigZag indicator searched for extreme points in different timeframes. It finds the extreme points by using threshold values that traders themselves define. These specified threshold values determine the extent to which the market direction needs to change before the ZigZag line alters its orientation and forms a further extreme point.  Interpretation  The previous extreme values (local highs or lows) are ideally suited for either entries or stop targets.  Caution:  The ZigZag is not an indicator in the common sense. Position and direction of the zigzag can change retrospectively (repainting indicator).  Further information  http://www.robotrading.de/indikatoren/zig-zag-indikator-zeigt-hoch-und-tief-punkte-im-forex-markt  Usage  //For the upper extreme value\nZigZag(DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagHigh[int barsAgo]\nZigZag(IDataSeries inSeries, DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagHigh[int barsAgo]\n\n//For the lower extreme value\nZigZag(DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagLow[int barsAgo]\nZigZag(IDataSeries inSeries, DeviationType deviationType, double deviationValue, bool useHighLow).ZigZagLow[int barsAgo]  Return value  double  When using this method with an index (e.g.  ZigZag (...)[ int  barsAgo] ), the value of the indicator will be issued for the referenced bar.  A return value of 0 indicates that no high or low point has been found yet.  Parameters           inSeries  Input data series for the indicator    deviationType  The change in points or percent    DeviationType.Points and DeviationType.Percent     deviationValue  Value of the deviation    useHighLow  Defines whether the high/low of a bar will be used for extreme values or if you want to use closing prices instead     Visualization   Example  //Output of the market value for the last high point\nPrint(\"The last high of the ZigZag indicator was at \" + ZigZag(DeviationType.Percent, 1, true).ZigZagHigh[0]);\n\n// Output of the market value for the last low point\nPrint(\"The last low of the ZigZag indicator was at \" + ZigZag(DeviationType.Percent, 1, true).ZigZagLow[0]);",
            "title": "ZigZag"
        }
    ]
}